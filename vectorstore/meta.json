{
  "dim": 384,
  "embedder": "sentence-transformers/all-MiniLM-L6-v2",
  "metas": [
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 1,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 11AlgoritmiaAlgoritmia"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 2,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 22Os Computadores e a resolução de ProblemasOs Computadores e a resolução de Problemas PROBLEMA Solução como um PROGRAMA de ComputadorSolução em forma de AlgoritmoPasso difícilFase de Resolução do Problema Fase de Implementação"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 3,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 33• É importante separar as duas fases: 1. Fase de Resolução do Problema Elaboração de um algoritmo adequado 2. Fase de Implementação Se o Algoritmo satisfaz, então segue-se a implementação desse algoritmo numa Linguagem de Programação (Programa de Computador) Nota : Se o algoritmo for suficientemente preciso, então, a codificação é quase directaOs Computadores e a resolução de ProblemasOs Computadores e a resolução de Problemas"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 4,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 44• De uma forma mais detalhada, poderemos desdobrar estas duas em seis fases para a resolução do Problema: – Definição do Problema – Analise do Problema (elaboração do Algoritmo) – Codificação do algoritmo em linguagem de Programação– Teste do Programa – Implementação – DocumentaçãoOs Computadores e a resolução de ProblemasOs Computadores e a resolução de Problemas"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 5,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 55Os Computadores e a resolução de ProblemasOs Computadores e a resolução de Problemas Definição do PROBLEMAAlgoritmo Avaliação dos ResultadosCodificação Programa Fonte Programa ObjectoCompilaçãoAnálise do Problema Teste do Programa Implementação: •Colocação em Produção •Formação de utilizadores •Manutenção e actualizaçãoPositivaNegativa"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 6,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 66O que é um Algoritmo?O que é um Algoritmo? • Um Algoritmo é uma sequência de passos ordenados e sem ambiguidade e que levam à resolução de um problema •E x e m p l o s : – Indicações para chegar a um determinado endereço – Instruções para construção de um brinquedo – Receita de culinária • Propriedades: – Passos simples e sem ambiguidades – Ordem dos passos cuidadosamente definida – Passos efectivos, ou seja, resolver um problema num nº finito de passos"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 7,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 77Metodologia para análise de problemasMetodologia para análise de problemas • Análise de um Problema: – Fazer uma aproximação descendente – Proceder à Modularização • Conceito e características de um Algoritmo – Na representação de um Algoritmo, usamos uma linguagem estruturada, muito próxima da linguagem natural Linguagem Natural ↔Linguagem estruturada (Algorítmica)"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 8,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 88Principais blocos do AlgoritmoPrincipais blocos do Algoritmo • Tipicamente poderemos considerar que um Algoritmo é composto pelos seguintes Blocos: 1. Definição de Dados 2. Leitura de Dados3. Tratamento dos Dados 4. Apresentação de Resultados"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 9,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 99Exemplos de Análise de ProblemasExemplos de Análise de Problemas Ex1: Calcular a décima parte de um valor lido 1. Ler um Número 2. Dividir o Número lido por 10 3. Escrever o nº lido e o resultado Obtido Ex2: Ler apelido e nome e apresentar a sua junção 1. Ler APELIDO 2. Ler NOME 3. Concatenar NOME + “ “ + APELIDO 4. Escrever o resultado obtido em 3"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 10,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 1010Exemplos de Análise de ProblemasExemplos de Análise de Problemas Ex3: Pretende-se calcular o Preço de Venda (PV) de um artigo, sabendo que este é o resultado da soma de: custos de produção (CP), custos de armazenagem (CA) e custos de Mat.Primas (CMP), acrescido de 20% de lucro PV = CP + CA + CMP + 20% *(CP+CA+CMP ) Versão 1 1. Ler CP, CA, CMP2. Calcular valor de PV: PV = CP + CA + CMP +0.2 * (CP+CA+CMP) 3. Apresentar resultadosVersão 21. Ler CP, CA, CMP2. Somar os 3 valores 3. Calcular 20% do valor obtido 4. Somar os valores obtidos em 2 e 3 5. Apresentar resultados"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 11,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 1111Exemplos de Análise de ProblemasExemplos de Análise de Problemas Ex4: Dada um valor em Escudos, converter para Euros. 1. Atribuir a FACTOR um valor 200.482 2. Ler o Valor em Escudos (VAL_ESC) 3. Converter (VAL_EURO =VAL_ESC/FACTOR) 4. Apresentar resultados 5. Terminar"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 12,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 1212Exemplos de Análise de ProblemasExemplos de Análise de Problemas Ex5: Dada uma lista de 10 nºs, pretende-se determinar o maior valor lido 1. Atribuir a MAXIMO um valor muito pequenino (- ∞∞∞∞) 2. Repetir 10 vezes: Ler NUMERO Se o NUMERO lido for superior a MAXIMO Então MAXIMO toma o valor do NUMERO 3. Apresentar resultados"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 13,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 1313Algoritmizar Algoritmizar um Problemaum Problema • Para a resolução de um Problema, deveremos cumprir os seguintes passos: – Descrição do Problema (definição clara dos dados que temos, dados a ler e dados a obter) – Elaboração da lista de variáveis ou dicionário de dados – Construção do Algoritmo (todo o Algoritmo tem um Nome: Algoritmo “Nome mnemónico”) – Teste do Algoritmo - traçagem do Algoritmo para um conjunto de dados (esta fase é muito importante para validação do algoritmo) • Poderá ainda ser complementado pela apresentação de um Fluxograma"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 14,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 1414Tipos de DadosTipos de Dados • Dados Simples –N u m é r i c o s • Poderão ainda ser de diferentes tipos (Inteiros; Reais) – Dados tipo cadeia de caracteres (Alfanuméricos) • Exemplo Nome = “ANA” – Dados Lógicos • Utilizam-se para estabelecimento de condições • Estruturas de Dados básicas ♣Vectores X(i), ♣Matrizes Y(a,b) • Estruturas Complexas ♣Ficheiros ♣Bases de dados"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 15,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 1515OperaçõesOperações • Simbologia utilizada – Adição + 3+2 – Subtracção - 9-5 – Divisão / 15/6 – Multiplicação * 24*45 – Potenciação ^ 3^2 • Prioridade das operações – Parentização – Potenciação, raiz quadrada – Multiplicação, Divisão – Adição, Subtracção"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 16,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 1616VariáveisVariáveis • Os dados necessários ao processamento de um Programa são armazenados em posições de da memória identificadas por um nome - a Variável. • Quando definimos a variável, estamos a reservar um endereço de memória onde irá ser guardado o valor dessa mesma variável. Este valor é mutável, consoante as operações que vão sendo feitas sobre ele. •E x e m p l o s : ♣Y ←-5 ♣X ←2 ♣Z ←0 ♣Y ←(X+Y) /2 ♣X ←Y *2 ♣Z ←Y ^2"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 17,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 1717ExercíciosExercícios 1. Sejam A,B e C reais e I, J e K inteiros ♣A = 4.0 ♣B = 6.0 ♣I= 3 Qual o valor das seguintes Expressões? ♣C←A * B -I ♣K ←B/4 ♣C ←B/A+1.5 2.Transforme em expressões de computador: 3. Em Quais dos seguintes pares é importante a ordem das operações? X ←YZ ←YX ←ZZ ←Y Y ←ZZ ←XY ←XX ←Yfedcba −+ dcba ) (+aac b b 242−±−"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 18,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 1818Linguagem Algorítmica Linguagem Algorítmica --InstruçõesInstruções Declaração de variáveis N inteiro; R real; C caractere; B booleano; D data Inicialização de variáveis N /Gdf/Gdf/Gdf/Gdf0 Estruturas sequenciais Leia(\"Nome\", C) Escreva (\"Nome\",C) R /Gdf/Gdf/Gdf/GdfR *2 + 4/N Estruturas condicionais Se(cond) então acção1 senão acção2 FimseEstruturas Repetitivas N.º finito de passos Para i = 1 atén (passo p) Acção Próximo i Controlado por uma condição Enquanto (cond) acções Fim Enquanto Controlado por várias condições Enquanto (cond e/ou/ não cond2) Acções Fim Enquanto"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 19,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 1919Linguagem AlgorítmicaLinguagem Algorítmica ♦Os algoritmos são formados por conjuntos de passos. ♦Cada passo é numerado e apresenta uma breve descrição da sua funcionalidade ♦Os passos principais são: 1. [Declaração de Variáveis] 2. [Leitura de variáveis] 3. [Processamento] 4. [Apresentação de Resultados] Nota: Não esquecer o Inicio e o Fim"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 20,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 2020FluxogramasFluxogramas --SimbologiaSimbologia Início/FimInício/Fim ProcessoProcesso Entrada/Saída Entrada/Saída de Dadosde DadosDecisãoDecisão DocumentoDocumento ConectorConector FluxoFluxo"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 21,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 2121Estrutura de Controlo SequencialEstrutura de Controlo Sequencial Algoritmo NomeAlgoritmo Nome Inicio 1. [Inicialização de Variáveis] Nome←”Ana“ 2. [Apresentação de Resultados] ESCREVA (Nome) FimObjectivo: Escrever o conteúdo de uma variável anteriormente inicializada"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 22,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 2222Lista de e VariáveisLista de e Variáveis Algoritmo NomeAlgoritmo Nome Nome a escrever Alfa NOMEDescrição Tipo Nome"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 23,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 2323NOME ⇐⇐⇐⇐“ANA ” FIMINICIO NOMEInicializarInicializar variável; Escrever o s/valor variável; Escrever o s/valor Principais Conceitos: •Inicializar •Escrever"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 24,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 2424Traçagem Traçagem Algoritmo NomeAlgoritmo Nome Ana 2.Ana 1.Saída Nome Passo"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 25,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 2525Estrutura de Controlo SequencialEstrutura de Controlo Sequencial Algoritmo SomaAlgoritmo Soma Inicio 1. [Declaração de Variáveis] X ←0; Y ←0 ;Soma ←0 2. [Leitura de variáveis] LEIA (X) LEIA (Y) 3 [Processamento - cálculo da soma] SOMA ←X + Y 4. [apresentação de Resultados] ESCREVA (“A soma de “ X, “com “ Y “é “ SOMA) FimObjectivo: Ler 2 número e escrever o valor da soma"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 26,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 2626Lista de e VariáveisLista de e Variáveis Algoritmo NomeAlgoritmo Nome Resulltado da soma dos 2 nºs lidosReal Soma2º Numero lido Real Y1º Numero lido Real XDescrição Tipo Nome"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 27,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 2727X ⇐⇐⇐⇐0 Y ⇐⇐⇐⇐0 Soma ⇐⇐⇐⇐0 FIMINICIO Soma ⇐⇐⇐⇐X + Y SomaX, YLer 2 Nºs e Escrever a sua SomaLer 2 Nºs e Escrever a sua Soma Principais Conceitos: •Inicializar •Ler •Calcular •Escrever"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 28,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 2828Traçagem Traçagem Algoritmo SomaAlgoritmo Soma Dados para teste: X=56, Y=33 FimA soma de 56 com 33 é 89Saída 890SOMA 330Y 560X 5.4.3.2.1.Passo"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 29,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 2929ExercíciosExercícios • Elabore um Algoritmo estruturado para os exemplos 1, 2 , 3 e 4 vistos anteriormente – Deverá apresentar • A lista de variáveis • Algoritmo e traçagem para os seguintes valores: –Exemplo 1 /GfcDados: 4500 –Exemplo 2 /GfcDados: Cunha, André –Exemplo 3 /GfcDados: 400; 600; 700; 350 –Exemplo 4 /GfcDados: 1000"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 30,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 3030ExerciciosExercicios • Escreva um algoritmo que leia uma temperatura em graus Celsius e converta para graus Farneith. Faça a traçagem para 37.5º • Escreva um algoritmo, que dados os valores dos lados de um rectângulo, calcule a sua área e o seu perímetro.. Faça a traçagem para L1=5, L2=8. • Escreva um algoritmo, que leia as notas de um aluno (5 disciplinas) e calcule a média da turma"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 31,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 3131Estrutura de Controlo Alternativa Estrutura de Contro lo Alternat iva SimplesSimples Exemplo (Ler um número e verificar a sua paridade) Se Número/2 = Int (Número/2) Então Escreva (“O número” , Numero”é par!”) Senão Escreva (“O número” , Numero”é impar!”) Fim seSe Condição Então Processo para Condição Verdadeira Senão Processo para Condição Falsa Fim se"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 32,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 3232Estrutura de Controlo Alternativa Estrutura de Contro lo Alternat iva SimplesSimples Algoritmo Algoritmo PositividadePositividade (versão 1.0) Inicio 1. [Declaração de Variáveis] Numero ←0 Mensagem ←““ ; 2. [Leitura do Número] LEIA (Numero) 3 [Processamento - Verificação da positividade] Se Numero > 0 Então Mensagem ←“é positivo” Senão Mensagem ←“n ã o ép o s i t i v o ” Fim se 4. [Apresentação de Resultados] ESCREVA (“ O número “, Numero, “, Mensagem) FimObjectivo: Ler 1 número e escrever se é positivo ou não"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 33,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 3333Lista de e VariáveisLista de e Variáveis Algoritmo NomeAlgoritmo Nome Descrição da positividade do numero lidoAlfa MensagemNumero lido Real NumeroDescrição Tipo Nome"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 34,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 3434Numero FIMINICIO Numero > 0 PositivoSim Não é PositivoNãoLer um Nº e Escrever a sua Ler um Nº e Escrever a sua Positividade Positividade (versão 1)(versão 1) Principais Conceitos: •Alternativa (Se;Então;Senão)"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 35,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 3535Traçagem Traçagem Algoritmo Algoritmo Positividade Positividade (versão 1.0)(versão 1.0) Dados para teste:Número =-7 O número -7 não é positivo4. FimSaída FalsoNUMERO>0 não é positivoMENSAGEM -70NUMERO 5.3.2.1.Passo"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 36,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 3636Traçagem Traçagem Algoritmo Algoritmo Positividade Positividade (versão 1.0)(versão 1.0) Dados para teste:Número = 34 O número 34 é positivo4. FimSaída VerdadeiroNUMERO>0 é positivoMENSAGEM 340NUMERO 5.3.2.1.Passo"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 37,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 3737Traçagem Traçagem Algoritmo Algoritmo Positividade Positividade (versão 1.0)(versão 1.0) Dados para teste:Número = 0 O número 0 não é positivo4. FimSaída FalsoNUMERO>0 não é positivoMENSAGEM 00NUMERO 5.3.2.1.Passo"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 38,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 3838Estrutura de Controlo Alternativa Estrutura de Contro lo Alternat iva CompostaComposta Exemplo (Ler um número e verificar a sua positividade) Se Numero >0 Então Escreva ( Numero ”é positivo!”) Senão Se Num < 0 Então Escreva (Numero ”é negativo!”) Senão Escreva (Numero ”é nulo!”) Fim se Fim seSe Condição1 Então Processo p/ Condição1 Verdadeira Senão Se Condição2 Então Processo p/ Condição2 Verdadeira Senão Processo p/ Condição2 Falsa Fim se Fim se"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 39,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 3939Estrutura de Controlo Alternativa Estrutura de Contro lo Alternat iva CompostaComposta Algoritmo Algoritmo PositividadePositividade (versão 2.0) Inicio 1. [Declaração de Variáveis] Mensagem ←““ ; N u m e r o ←0 2. [Leitura do Número] LEIA (Numero) 3 [Processamento - Verificação da positividade] Se Numero > 0 Então Mensagem ←“é positivo” Senão Se Numero = 0 Então Mensagem ←“én u l o ” Senão Mensagem ←“é negativo ” Fim se Fim seObjectivo: Ler 1 número e indicar a sua positividade ...."
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 40,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 4040Lista de e VariáveisLista de e Variáveis Algoritmo NomeAlgoritmo Nome Descrição da positividade do numero lidoAlfa MensagemNumero lido Real NumeroDescrição Tipo Nome"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 41,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 4141Numero FIMINICIO Numero > 0 Nº PositivoSim Nº Negativo NãoLer um Nº e Escrever a sua Ler um Nº e Escrever a sua Positividade Positividade (versão 2)(versão 2) Numero = 0 Nº NuloSim NãoPrincipais Conceitos: •Alternativa composta (Se;Então;Senão(Se...))"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 42,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 4242Traçagem Traçagem Algoritmo Algoritmo Positividade Positividade (versão 2.0)(versão 2.0) Dados para teste:Número = -7 O número -7 é negativoSaída é negativoFalsoNUMERO =0 FalsoNUMERO >0MENSAGEM -70NUMERO 4.3.2.1.Passo"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 43,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 4343Traçagem Traçagem Algoritmo Algoritmo Positividade Positividade (versão 2.0)(versão 2.0) Dados para teste:Número = 34 O número 34 é positivoSaída é positivoNUMERO =0 VerdadeiroNUMERO >0MENSAGEM 340NUMERO 4.3.2.1.Passo"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 44,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 4444Traçagem Traçagem Algoritmo Algoritmo Positividade Positividade (versão 2.0)(versão 2.0) Dados para teste:Número = 0 O número 0 é nuloSaída é nuloVerdadeiroNUMERO= 0 FalsoNUMERO >0MENSAGEM 00NUMERO 4.3.2.1.Passo"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 45,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 4545ExercíciosExercícios • Escreva um algoritmo que leia um Número e verifique se é divisível por 5e 7 simultaneamente.Faça a traçagem para os n.ºs 15 e 35. • Escreva um algoritmo que calcule a média das idades de uma população de 15 pessoas e escreva uma mensagem de acordo com a situação (Média < 25 » “Jovem”, Média <40 » “Adulta”, outras » “Idosa. Faça a traçagem para (12,8,2,6,5,18,54,65,5,10,48,47,7,4,18,17,12,13) • Altere o Algoritmo anterior criando mais uma classe de classificações: Muito Jovem, se Média < 14 »."
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 46,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 4646Estrutura de Repetição Estrutura de Repetição ––Enquanto...Enquanto... 1.1. [Inicializar variável de controlo de ciclo] Enquanto Condição 1.2. [Operações a realizar dentro do ciclo] [Leituras, cálculos,...] 1.3. [Actualização da variável de Controlo do Ciclo] 1.4. [Terminar ciclo ] Fim Enquanto"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 47,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 4747Estrutura de Repetição Estrutura de Repetição ––Para I ...Para I ... Para I = X1 até Xn [Operações a realizar dentro do ciclo - [Leituras cálculos,...] Próximo I Exemplo: Para I = 1 até 10 Ler (Numero) Soma ←←←←Soma + Numero Proximo I Escrever (Soma)"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 48,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 4848Estrutura de Repetição Estrutura de Repetição ––Seleccionar casoSeleccionar caso Seleccionar Caso Opção Caso Opção = 1 procedimento A Caso Opção = 2 procedimento B Caso Senão procedimento ERRO Fim SeleccionarExemplo:Seleccionar Caso Opção Caso Opção = 1 ADICIONAR Caso Opção = 2 ALTERAR Caso Senão ERRO Fim Seleccionar"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 49,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 4949Estruturas de RepetiçãoEstruturas de Repetição Algoritmo Soma de 50 númeroAlgoritmo Soma de 50 número Inicio 1. [Declaração de Variáveis] Numero ←0; Soma ←0 2. [Ciclo de Processa/ -Leitura dos nºs e cálculo da soma] 2.1. [Inicializar variável de controlo de ciclo]Objectivo: Ler 50 números e escrever o valor da sua soma Contador Contador ←←0; 0; Enquanto Enquanto Contador < 50Contador < 50 2.2. [Ler n2.2. [Ler n úúmero]mero] Leia( Numero]Leia( Numero] [Actualização do valor da Soma][Actualização do valor da Soma] Soma Soma ←←←←←←←←Soma + NumeroSoma + Numero 2.3. [Actualiza2.3. [Actualiza çãção da vario da vari áável de Controlo vel de Controlo do Ciclo]do Ciclo] Contador Contador ←←←←←←←←Contador + 1Contador + 1 2.4.. [Terminar ciclo ]2.4.. [Terminar ciclo ] Fim EnquantoFim Enquanto 3. [Apresentação de Resultados] Escreva(“a soma dos 50 nºs lidos é “, Soma) Fim"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 50,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 5050Estruturas de RepetiçãoEstruturas de Repetição Algoritmo MáximoAlgoritmo Máximo Inicio 1. [Declaração de Variáveis] Maximo←- 999999999 ; Numero ←0 ; Contador ←0 2. [Processamento - Determinação do máximo] 2.1. [Ciclo de Repetição] Enquanto Contador < 10 2.2. [Leitura do Número] LEIA (Numero) 2.3. [Verificação de valor] Se Numero > Maximo Então Maximo ←Numero Fim se 2.4. [Actualização da variável de Controlo do Ciclo] Contador ←Contador + 1 2.5. [Terminar ciclo ] Fim Enquanto 3. [Apresentação de Resultados] ESCREVA (“ O máximo valor lido foi “, Maximo) FimObjectivo: Ler 10 números escrever o máximo valor lido"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 51,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 5151Lista de e VariáveisLista de e Variáveis Algoritmo MáximoAlgoritmo Máximo Máximo valor encontrado Real MáximoNumero lido Real NúmeroDescrição Tipo Nome Contador Inteiro Variável de controlo do ciclo - conta o nº de repetições do ciclo"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 52,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 5252Máximo⇐⇐⇐⇐-∞∞∞∞ Numero ⇐⇐⇐⇐0 Contador ⇐⇐⇐⇐0 Numero FIMINICIO Contador <10 Máximo Numero >Máximo Máximo=Numero Contador=Contador+1Sim NãoNão SimLer 10 nºs e escrever valor do MaiorLer 10 nºs e escrever valor do Maior Principais Conceitos: •Ciclo de Repetição •Enquanto Cond"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 53,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 5353ExercíciosExercícios 1.Escreva um algoritmo que leia uma lista de valores e determine o Máximo, o Mínimo e a Soma desses valores. A lista termina quando o valor lido for 999999. 2.1. Altere o algoritmo do ponto 1. de modo a que após a leitura de uma lista de valores seja perguntado ao utilizador se este pretende ler uma nova lista. 2.2.Altere o algoritmo do ponto 1. de modo a que após a leitura de um valor e seu processamento, seja perguntado ao utilizador se este pretende continuar ou não. 3. Escreva um algoritmo que calcule as raízes reais de uma equação de 2º grau. Após a execução para uma equação deverá ser perguntado ao utilizador se este pretende continuar ou não."
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 54,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 5454ExercíciosExercícios 4. Escreva um algoritmo que leia uma Lista de números cujo tamanho é determinado pelo utilizador e calcule o máximo nº lido. 5.Escreva um algoritmo que leia o nome da disciplina e as notas de um aluno,calcule a média e determine a sua aprovação ou não no Curso. O Aluno considera-se aprovado se a sua média for não inferior a 12 valores. • A leitura termina quando o nome lido for “FIM” • O algoritmo deve permitir o cálculo para vários alunos. 6.Escreva um algoritmo que permita calcular o total da despesa feita num supermercado. Deverá ler o nome dos itens, a quantidade e o preço unitário. A leitura para cada cliente termina quando for lido o nome “FIM”.Deve permitir o cálculo para vários clientes."
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 55,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 5555ExercíciosExercícios 7. A empresa XPTO, SA distribuidora de componentes para automóveis, pretende fazer a análise de vendas do ano anterior. Para cada venda efectuada, existe informação seguinte: Nome do Cliente Zona Geográfica (1- Norte; 2 - Sul; 3 - Centro) Família do Produto (1- Pneus; 2 - Jantes) Tipo de veículo (1- Ligeiros; 2 - Pesados) Quantidade, Valor Total As estatísticas pretendidas, são as seguintes: a)Valor Total de Vendas por Zona e Total Geral b)Total por Família de Produtos (Quantidade e Valor) c)Total por Tipo de veículo (Quantidade e Valor) Escreva um algoritmo para resolução deste problema."
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 56,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 5656ExercíciosExercícios 8. Considere uma Empresa que comercializa dois tipos de Produtos - A e B, para os quais se conhece o preço unitário e a quantidade existente em stock. Tipo de Produto Preço Quantidade A 500$ 2000 B 300$ 5000 Para cada nova encomenda é necessário conhecer os seguintes dados: N.º Cliente; Tipo Produto; Quantidade Encomendada Escreva um algoritmo que permita fazer a gestão das Encomendas desta Empresa."
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 57,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 5757ExercíciosExercícios a)Pretende-se que para cada encomenda seja verificada a quantidade existente para o Tipo de Produto, e se : /Gf0a quantidade for Zero (0), emita uma mensagem “Não há stock para satisfazer a Encomenda”; /Gf0caso a quantidade existente seja inferior à solicitada, então a encomenda será satisfeita parcialmente, dando também lugar à emissão de uma mensagem: “Satisfação parcial da Encomenda” Na satisfação da Encomenda, deverá actualizar sempre o Stock restante para o Tipo de Produto. Todas as Facturas deverão referir : /Gf0O Cliente, o tipo de Produto, a Quantidade satisfeita (quer seja total ou parcial) e o Valor a pagar b) Apresente um resumo final que informe das quantidades e valores facturados para cada Tipo de Produto, bem como os totais gerais."
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 58,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 5858AlgoritmiaAlgoritmia /V.B.A./V.B.A."
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 59,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 5959Programação em VBAProgramação em VBA •O que é uma macro ? Uma macro é uma sequência de comandos. As macros podem ser utilizadas para automatizar tarefas repetitivas que envolvem a execução de vários comandos por parte do utilizador. O que é o VBA - Visual Basic for Applications ?O VBA é uma linguagem de programação integrada no Excel e noutras aplicações da Microsoft. As macros criadas em Excel são constituídas por instruções de VBA."
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 60,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 6060Programação em VBAProgramação em VBA •Procedimentos Os procedimentos são módulos de código do Visual Basic que executam uma determinada acção. Uma macro é um exemplo de um procedimento •Existem dois tipos básicos de procedimentos em VBA: – Procedimentos que retornam ou devolvem um valor designados por FunctionFunction – Procedimentos que nãoretornam um valor designados por SubSub •Estrutura de um procedimento: – Instruções de início e fim –N o m e – Argumentos – Código do VBA– Valor devolvido (apenas nos procedimentos tipo FunctionFunction)"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 61,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 6161Programação em VBAProgramação em VBA •Exemplo de procedimento function (retorna valor) Function Soma (a, b) Soma = a + b End Function •Exemplo de procedimento sub (não retorna valor) Sub Inicio() Call Soma( 9, 15) MsgBox Soma End Sub Obs.: A instrução Call chama a função Soma A instrução MsgBox cria uma caixa com o valor de Soma"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 62,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 6262AlgoritmiaAlgoritmia / V.B.A/ V.B.A ••PseudoPseudo --CódigoCódigo /Gd8Inicio do Programa Algoritmo Nome INICIO /Gd8Declaração de Variavéis NUMERO inteiro(real) DATANASC data NOME caractere /Gd8Expressões SOMA <--A + B /Gd8Leitura LEIA ( NUMERO) LEIA ( “Nome Cliente?“, NOME) /Gd8Fim do Programa SAÍDA••Visual Visual BasicBasic /Gd8Inicio do Programa Sub Nome() /Gd8Declaração de Variavéis Dim NUMERO As Integer (Double, Long, Currency) Dim DataNasc As Date Dim NOME As String /Gd8Expressões SOMA =A + B /Gd8Leitura NUMERO = InputBox (“Numero?”) NOME = InputBox ( “Nome Cliente “) /Gd8Fim do Programa End Sub"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 63,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 6363••PseudoPseudo --CódigoCódigo /Gd8Saída de Dados ESCREVA ( NUMERO) ESCREVA ( “A Soma é”, SOMA) /Gd8Estrutura Condicional SE..ENTÃO SeNUMERO < 0 Então ESCREVA (“É Negativo”) Fim Se /Gd8Estr.Cond. SE.... ENTÃO....SENÃO SeNUMERO < 0 Então ESCREVA (“É Negativo”) Senão ESCREVA (“NãoNegativo”) Fim Se••Visual Visual BasicBasic /Gd8Saída de Dados MsgBox “Numero” & NUMERO MsgBox “A Soma é ” &SOMA /Gd8Estrutura Condicional SE...ENTÃO IfNUMERO < 0 Then MsgBox “Numero Negativo” End If /Gd8Estr.Cond. SE.... ENTÃO....SENÃO IfNUMERO < 0 Then MsgBox “Número Negativo” else MsgBox “Número não Negativo” End IfAlgoritmiaAlgoritmia / V.B.A/ V.B.A"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 64,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 6464••PseudoPseudo --CódigoCódigo /Gd8Estr.Cond. SE.... ENTÃO....SENÃO SE... SeN =0 Então ESCREVA(“Nulo”)Senão Se N < 0 Então ESCREVA (“Negativo”) Senão ESCREVA (“Positivo”) Fim se Fim Se /Gd8Ciclo Enquanto <Cond> Repetir N <--0Enquanto N < = 5 Repetir ESCREVA (N)N <-- N + 1 Fim Enquanto••Visual Visual BasicBasic /Gd8Estr.Cond. SE.... ENTÃO....SENÃO SE... If N = 0 Then MsgBox (\"Nulo\")Else If N < 0 Then MsgBox (\"Negativo\") Else MsgBox (\"Positivo\") End If End If /Gd8Ciclo Enquanto <Cond> Repetir N = 0While N < = 5 MsgBox “N”N = N + 1 WendAlgoritmiaAlgoritmia / V.B.A/ V.B.A"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 65,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 6565••PseudoPseudo --CódigoCódigo /Gd8Para ... até < Condição> Para I = 1 até 5 ESCREVA (N) Próximo I /Gd8Seleccionar caso < Condição> Seleccionar Caso Opção Caso Opção = 1 ADICIONAR Caso Opção = 2 ALTERAR Caso Senão ERRO Fim Seleccionar••Visual Visual BasicBasic /Gd8Para ... até < Condição> For I = 1 to 5 MsgBox “N” Next I /Gd8Seleccionar caso < Condição> Select Case Opção Case Opção = 1 ADICIONAR Case Opção = 2 ALTERAR Case Else ERRO End CaseAlgoritmiaAlgoritmia / V.B.A./ V.B.A."
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 66,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 6666Escreve o valor de uma variávelEscreve o valor de uma variável Sub Escreve() Dim nome As String * 20nome = \"PAULA\" MsgBox nome End Sub Soma de 2 Soma de 2 NumerosNumeros Sub Soma() Dim numero1 As Integer, numero2 As Integer, Total As Integer numero1 = InputBox(\"Escreva o Primeiro Número\")numero2 = InputBox(\"Escreva o Segundo Número\") Total = numero1 + numero2 MsgBox \"A Soma de \" & numero1 & \" com \" & numero2 & \" é: \" & Total End SubExemplosExemplos"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 67,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 6767Soma n Soma n NumerosNumeros --Fim quando Nº lido =0Fim quando Nº lido =0 Sub Soma_n() Total = 0 Numero = 0 Lidos = 0 Numero =InputBox(\"Escreva o Número\")While Numero <> 0 Total = Total + Numero Lidos = Lidos + 1 Numero = InputBox(\"Escreva o Número ( 0 p/ Terminar )\") Wend MsgBox (\"A Soma dos \" & Lidos & \" números lidos \" & \" é \" & Total) End Sub"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 68,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 6868Sequências de Somas de NúmerosSequências de Somas de Números (cada sequência termina em 0)(cada sequência termina em 0) Sub Seq_Soma_n() Continuar = “SIM”While Continuar = “SIM” Total = 0 Numero = 1 Contador = -1 While Numero <> 0 Numero = InputBox(\"Escreva o Número ( 0 para Terminar )\")Contador = Contador + 1Total = Total + Numero Wend MsgBox \"A Soma dos \" & Contador & \" números “ & \" é: \" & TotalContinuar = InputBox(\"Para soma de nova sequência, escreva ’SIM' \") WendEnd Sub"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 69,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 6969SequenciasSequencias de Máximo de 3 de Máximo de 3 NumerosNumeros Sub Maximo_3() Continuar = 1While Continuar = 1 Maximo = -9999999Numero = 0Contador = 0 While Contador <3 Numero = InputBox(\"Escreva o Número\")If Maximo < Numero Then Maximo = Numero End IfContador= Contador +1 WendMsgBox \" O Máximo valor lido foi \" & MaximoContinuar = InputBox(\"Para nova sequência, escreva '1' \") WendEnd Sub"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 70,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 7070SequenciasSequencias de Máximo de de Máximo de NumerosNumeros (é o utilizador que define o fim da lista)(é o utilizador que define o fim da lista) Sub Máximo_n() Continuar = “SIM”While Continuar = “SIM” Maximo = -99999999 Seguinte = 1Numero = 0 While Seguinte = 1 Numero = InputBox(\"Escreva o Número\")If Maximo < Numero Then Maximo = Numero End IfSeguinte = InputBox(”Para mais nºs para esta sequência escreva '1' \") WendMsgBox \"O Máximo valor lido foi \" & MaximoContinuar = InputBox(\"Para soma de nova sequência, escreva ’SIM' \") WendEnd Sub"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 71,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 7171• Pretende-se construção de um Programa, que leia um número e calcule o seu Factorial. Após a apresentação do resultado, deverá perguntar ao utilizador se pretende continuar • Notas: – Só são válidos números Positivos – O Factorial de 0 é 1 N!= N* (N-1)* (N-2)* (....) * 2Factorial de um NúmeroFactorial de um Número"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 72,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 7272Factorial de um Número Factorial de um Número (versão 1)(versão 1) Sub Factorial() Dim Numero As Integer, Cont As Integer, Factorial As Double, continuar As String continuar = \"SIM\" While continuar = \"SIM\" Factorial = 1 Numero = InputBox(\"Escreva o Número\") Cont = NumeroIf Numero > 2 Then While Cont > 1 Factorial = Factorial * ContCont = Cont - 1 Wend Else: Factorial = 1 End IfIf Numero < 0 Then MsgBox (\"O número deverá ser Positivo!!!\") Else: MsgBox (\"O Factorial de \" & Numero & \" é \" & Factorial)End If continuar = InputBox(\"Para soma de nova sequência, escreva ’SIM' \") WendEnd Sub"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 73,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 7373Sub Factorial_1() Dim Numero As Integer, Cont As Integer, Factorial As Double, continuar As String continuar = \"SIM\"While continuar = \"SIM\"Factorial = 1Numero = InputBox(\"Escreva o N.º\") Cont = Numero If Numero >= 0 Then If Numero >= 2 Then While Cont > 1 Factorial = Factorial * ContCont = Cont - 1 Wend Else: Factorial = 1 End IfMsgBox (\"O Factorial de \" & Numero & \" é \" & Factorial) Else: MsgBox (\"O número deverá ser Positivo!!!\")End Ifcontinuar = InputBox(\"Para soma de nova sequência, escreva ’SIM' \") WendEnd SubFactorial de um Número Factorial de um Número (versão 2)(versão 2)"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 74,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 7474• Pretende-se construção de um Programa, que leia as Horas de Entrada e de Saída num parque de estacionamento e calcule o valor a pagar. • A tabela de preços é a seguinte: –1.ª hora : 120 –2.ª hora : 150–seguintes: 180 – Se a permanência for inferior a 1 hora, será pago o valor correspondente a 1 hora – O tempo de permanência é arredondado para a hora inferior, caso a parte fraccionária seja inferior a 0.05Parque de EstacionamentoParque de Estacionamento"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 75,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 7575Sub parque() Dim Hora_E As Double, Hora_S As Double, Tempo As Double Dim Custo As Double, continuar As Stringcontinuar = \"SIM\" While continuar = \"SIM\" Hora_E = InputBox(\"Hora de Entrada\")Hora_S = InputBox(\" Hora de Saída\") Tempo = Hora_S - Hora_E If Tempo < 1 Then Tempo = 1 ElseIf Tempo - Int(Tempo) <= 0.05 Then Tempo = Int(Tempo)Else: Tempo = Int(Tempo) + 1 End IfParque de EstacionamentoParque de Estacionamento If Tempo = 1 Then Valor = 120 ElseIf Tempo = 2 Then Valor = 270 Else: Valor = (Tempo - 2) * 180 + 270 End If MsgBox (\"O valor a pagar é \" & Valor) continuar = InputBox(\"Para soma de nova sequência, escreva ’SIM' \")Wend End Sub"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 76,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 7676Função “Preço Final”Função “Preço Final” Function PRECO_FINAL(Valor, Desconto) Preco_Final = Valor * (1-Desconto/100) End Function Function NomeFinal(Apelido, Nome) NomeFinal = Nome + \" \"+ Apelido End FunctionObjectivo:Escrever uma Função que dado o Preço de um Artigo e a % de desconto, calcule o valor a pagar. Objectivo:Escrever uma Função que dado um Apelido e um Nome apresente o nome Completo"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 77,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 7777Função “IVA”Função “IVA” Function IVA(Valor, Codigo) If Codigo = 0 Then IVA = Valor ElseIf Codigo = 1 Then IVA = Valor * 0.05 ElseIf Codigo = 2 Then IVA = Valor * 0.12 ElseIf Codigo = 3 Then IVA = Valor * 0.17 ElseIf Codigo = 4 Then IVA = Valor * 0.3 End If End FunctionObjectivo: Escrever uma Função que dado um valor e o código de IVA, calcule o valor do IVA a pagar"
    },
    {
      "source": "Algoritmia_alunos.pdf",
      "page": 78,
      "text": "ISCAPISCAP Ana Paula TeixeiraAna Paula Teixeira Pág. Pág. 7878"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 1,
      "text": "Classical Guitar Method Volume 1 By Bradford Werner wernerguitareditions.com thisisclassicalguitar.com 2020 Edition"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 2,
      "text": "Classical Guitar Method - Volume 1 by Bradford Werner 2020 Edition Distributed by wernerguitareditions.com thisisclassicalguitar.com © Bradford C. Werner, 2020. All Rights Reserved. Sharing Info This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License. You can share this work but must give credit and link to my site. You may not sell this work, use it for commercial purposes, alter it and/or distribute a modiﬁed version. Printing the PDF This PDF has been designed for double sided printing. Place it in a three ring binder with dividers for each section. You are not permitted to print and sell this book. Hard Copies Physical print editions of this book are available on Amazon Stores online. 2"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 3,
      "text": "Contents Part 1 - Progressive Method 9 Brief Deﬁnitions of Music Notation 12 Three Open Strings, Rhythms, Etude No. 1 and 2, Nocturne Duet 17 Notes on the Third String, Sight Reading, Moderato, A Fairy Tale Duet 21 Notes on the First and Second String, Note Review, Sight Reading, Five Melodies 26 Ode to Joy Duet, Sight Reading and Dynamics, Etude No. 3, Note Review 30 Twinkle Twinkle Little Star, Etude No. 4, Jazz Cat, Au clair de la lune, Oh Susana 35 Duets: Waltz by Czerny, Minuet by Wilton, Morning by Diabelli 38 Open Bass Strings, Etudes No. 5, 6, and 7 42 New Notes (C, D, E, F), Note Review, Etude No. 8, C Major Scale 46 Eighth Notes, Sight Reading, Angeline the Baker, Minuet Duet by Hook, Etude No. 9, 51 Vsi so venci Vejli, Flow Gently, Sweet Afton Duet 54 Two Voice Textures, Etude No. 10 and 11 57 Dotted Quartet Notes, Little Birch Tree in the Field, The Skye Boat Song 60 Fifth and Sixth String Notes, Note Review, Sight Reading, Leyenda Theme by Albeniz 66 Accidentals, Chromatic Scale, Greensleeves, Malagueñas, Minuet in G Duet by Petzold 71 Siciliano by Carcassi, Farewell Part 2 - Chord & Fingerstyle Accompaniment 73 Strumming: Hey Ho, Frère Jacques, London Bridge, You Are "
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 3,
      "text": " Scale, Greensleeves, Malagueñas, Minuet in G Duet by Petzold 71 Siciliano by Carcassi, Farewell Part 2 - Chord & Fingerstyle Accompaniment 73 Strumming: Hey Ho, Frère Jacques, London Bridge, You Are My Sunshine, Amazing Grace, Red River Valley, Tom Dooley, Danny Boy, Shenandoah, Scarborough Fair 84 Fingerstyle: Tablature Explanation, Scarborough Fair, Will the Circle Be Unbroken, Saint James Inﬁrmary, House of the Rising Sun 88 Pentatonic Minor & Blues Scales, Twelve Bar Blues, The Shufﬂe, Rhythm Riff Blues Part 3 - Technique & Knowledge 92 Right Hand Technique Routine 94 Left Hand Technique Routine 95 Single String Chromatic Scales 98 Beginner Scales: E Chromatic, C Major, G Major, F Major, A Minor, E Minor, D, Minor Appendix 101 Basic Note Reference Chart 102 Chord Reference Chart 3"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 4,
      "text": "About this book This book teaches classical and ﬁngerstyle guitar skills with a focus on the rich pedagogical tradition of classical guitar. Most learning objectives are covered through pieces and duets rather than exercises or descriptions. This allows students to perform full pieces from the ﬁrst lesson. Working with a qualiﬁed teacher as well as watching the lesson videos should provide students with a healthy start to guitar. How to use this book Study Part 1 in order, covering every piece on every page. Simultaneously begin Part 3 as a technique routine. Part 2 (chords) can be studied more loosely based on the skills and age of the student. Watch the video lessons to help you learn proper technique, musicality, and listening skills. Free video lessons, an essential part of this method The video lessons for this book are essential to the learning experience. Ideas about musicality and technique are discussed and demonstrated in the videos. This book omits information that might clutter the beginner learning experience. Music should be learned through listening and experience. All the extra information and advice has been included in the free lesson videos which is a better medi"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 4,
      "text": "tter the beginner learning experience. Music should be learned through listening and experience. All the extra information and advice has been included in the free lesson videos which is a better medium for communicating musical ideas. Find the lessons at the method book page at Werner Guitar Editions or This is Classical Guitar (also via the sheet music page or lesson page): https://www.thisisclassicalguitar.com/free-classical-guitar-method-book-pdf/ Five main goals of this book 1.Play solos and duets from start to ﬁnish with a steady tempo 2.Play legato melodies (also with open string bass accompaniment) 3.Play arpeggio pieces and patterns 4.Become proﬁcient at reading music in ﬁrst position (without key signatures) 5.Accompany basic songs with strumming or ﬁngerstyle chords Educational Series (Further Study) •Method Book Volume 2 - Continue your progress with new repertoire, techniques, key signatures, scales, time signatures; theory, musicality, rhythm training; new chords and more. •Repertoire Lessons Grade 1 to 6 - A dedicated book of lessons and repertoire for each grade. All the pieces come with dedicated lesson pages and video lessons to help you learn. •Classical Guitar T"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 4,
      "text": ". •Repertoire Lessons Grade 1 to 6 - A dedicated book of lessons and repertoire for each grade. All the pieces come with dedicated lesson pages and video lessons to help you learn. •Classical Guitar Technique, Essential Scales, Arpeggios, and Exercises - Routines for all levels, hundreds of exercises, video lessons. 4"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 5,
      "text": "Rest stroke or free stroke? Nails? Teachers have different opinions about the use of rest and free strokes for beginners. I have seen good results from both approaches. My beginner students use free stroke until proper hand positions and a relaxed legato playing style are established. Students need not introduce right hand nails until hand positions and posture are secure. I introduce rest strokes and nails during my Volume 2 method. Use of the left hand pinky ﬁnger Students should use the left hand pinky for D and G (3rd fret of the 1st and 2nd strings). This ﬁngering is required for solo pieces later and helps align the left hand. Students will have no trouble using the pinky if it is curved and in the proper position. Music Theory I recommend the Berklee Music Theory Book 1 - Intro to theory which also includes an answer key. You don’t really need all this theory info yet but if you’re curious this is a good place to start. You can ﬁnd the book link on my site or on Amazon here: https://amzn.to/2K1TeHw Tuning the guitar Students should buy a clip-on tuner, I like the D’Addario Micro Tuner: http://amzn.to/2pecdpN Tuning by ear to the teacher should begin during the ﬁrst lesson as"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 5,
      "text": "ps://amzn.to/2K1TeHw Tuning the guitar Students should buy a clip-on tuner, I like the D’Addario Micro Tuner: http://amzn.to/2pecdpN Tuning by ear to the teacher should begin during the ﬁrst lesson as well as relative tuning: 1.Play the 6th string at the 5th fret and tune the open 5th string to the same pitch. 2.Play the 5th string at the 5th fret to tune the open 4th string. 3.Play the 4th string at the 5th fret to tune the open 3rd string. 4.Play the 3rd string at the 4th fret to tune the open 2nd string. 5.Play the 2nd string at the 5th fret to tune the open 1st string. Follow the site for free •Free and premium sheet music & tab: wernerguitareditions.com •Free video lessons and instructional articles: thisisclassicalguitar.com •Join the email newsletter for with lessons, sheet music, pro videos and more. Sign up at the website. 5"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 6,
      "text": "Practice Advice Happiness in small goals: Making your practice sessions enjoyable will be key to long-term musical success and development. When experiencing difﬁculties, break up the piece or exercise into small manageable goals at a speed you can accomplish successfully. Even if you only play a few notes at a time, playing successfully will improve your skills and give you a feeling of accomplishment. Isolate difﬁculties and solidify strengths: Balance your practice sessions by working on difﬁculties as well as maintaining easy material you can play well. Playing at a high quality level as often as possible will help develop a solid foundation. Work on your difﬁculties near the middle of your practice session and ﬁnish with something you can play well. This will ensure you end with a positive feeling of success. Practicing is Problem Solving: Practicing is different than just playing the guitar. When you practice you need to identify problems or elements you wish to improve and solve them immediately. Simply playing the guitar will not make you a better musician. If your teacher says you should practice for 30 minutes a day, be sure you are actually practicing for 30 minutes not "
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 6,
      "text": " them immediately. Simply playing the guitar will not make you a better musician. If your teacher says you should practice for 30 minutes a day, be sure you are actually practicing for 30 minutes not just playing. Combine repetition with thoughtful practice: Although a certain amount of repetition is required to establish your skills, balance repetition with thoughtful reevaluation. Sometimes, improvement will occur by reexamining your posture, hand positions, or elements not directly connected to what you are studying. Having a qualiﬁed teacher is very helpful. They can identify problems before you repeat it a hundred times. That said, aim to be mindful at all times about what you are doing. Good days vs bad days: Actually, I don’t believe in good or bad practice days. All days are good opportunities to practice something. On days when you are having trouble focusing or executing material cleanly, slow down your speed and use a metronome until you are playing well. You may have to play at half the speed you intended but you can still get in some quality practice. Play slowly: I’ve rarely encountered a student who practices as slowly as I think they should. Practicing ultra slowly "
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 6,
      "text": "y at half the speed you intended but you can still get in some quality practice. Play slowly: I’ve rarely encountered a student who practices as slowly as I think they should. Practicing ultra slowly will ensure you are playing with your best hand positions, sound, conﬁdence, relaxation, accuracy, and more. The majority of your practicing should be at very slow tempos. Once you can play something well at a slow tempo, you can speed it up while keeping an eye on the quality level. Page markers: Use page markers (sticky tabs) on the pages you are practicing so you can quickly ﬂip to the next piece or exercise. Keep it simple: Even the most advanced players will practice simple open string exercises but will do so at a very high quality level. Quality practice helps to improve your playing so keep the exercises and pieces simple enough that you can accomplish them at your highest potential. You don’t have to prove yourself to anyone. You‘ll only improve if you set realistic and manageable goals. Trust your teacher: If your teacher recommends something contrary to what’s in this book, please trust their advice. Your teacher knows what’s best for you and your personal and unique develop"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 6,
      "text": " goals. Trust your teacher: If your teacher recommends something contrary to what’s in this book, please trust their advice. Your teacher knows what’s best for you and your personal and unique development. Learning from books and online videos can be helpful but the real work is done through long-term communication with teachers and other musicians. 6"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 7,
      "text": "Getting Started - Finger Names Anatomy of the Classical Guitar Image use - By User: Martin Möller (File:Classical Guitar two views.jpg) [CC BY-SA 2.0 de (http://creativecommons.org/licenses/by-sa/2.0/de/deed.en)], via Wikimedia Commons 7 Left Hand Finger Names 1 = index 2 = middle 3 = ring 4 = pinky Right Hand Finger Names p = thumb i = index m = middle a = ring c = pinky Head & Tuning PegsFingerboard & FretsBody BridgeSoundholeRosette"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 8,
      "text": "Hand and Sitting Positions for Classical Guitar See more photos and video lessons on posture and hand positions: thisisclassicalguitar.com/lessons/ Sitting Position •The head of the guitar is at eye level (guitar is at a 45º angle) •Face of guitar straight up and down (not angled back) •Sit up straight and relax the shoulders and neck Right Arm & Hand •Right forearm rests on the guitar in front of the elbow •Right wrist is straight with a relaxed arch •Right hand plays around the rosette •Right hand ﬁngers move into the palm, not up and away •Right hand thumb is in front of the ﬁngers Left Arm & Hand •Left hand thumb is vertical and behind 2nd ﬁnger •Left palm and knuckles are parallel with the strings •Left wrist is straight, not over-extended •Left hand ﬁngers are curved and contact the strings on the ﬁngertips 8 Head of guitar at eye level (guitar at 45º angle)Same position applies to guitar supports"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 9,
      "text": "Beat, Tempo, Notes qefhF Notes will be placed on a staff (5 lines), as shown below. Notes are symbols used in music to represent the pitch and rhythm of a standardmusical sound. Pitch refers to how high or low a note sounds. The Rhythm indicateswhen to play a pitch. Anatomy of a note:Before you begin reading music, review these basic music notation terms and symbols. You can also see the article on the website that includes videos to help you get oriented. The beat, also called pulse, is the basic unit of time in a piece of music. For example, if you listen to a song and begin to tap your foot at regular intervals you are likely tapping 'the beat'.The word tempo is used to describe the how fast or slow the beat is moving. Noteheads with stemsStems with flagsNoteheadsœœ˙ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com9"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 10,
      "text": "Basic Musical Symbols 44The Staff has five lines. &The Treble Clef Sign is used in guitar notation (also called the G Clef). The clef indicates whichnotes are represented by the lines and spaces on a staff. The bottom circular part of the treble clefdesignates the second to bottom line as G. There are other clefs in music, but guitar primarily uses the treble clef so that's all you need to know for now.&‹A treble clef with an 8 below is often used in guitar notation. Guitar sounds one octave below where it's written (we'll learn more about that later).&‹Bars, also called Measures, are used to divide the staff into sections. Bar lines divide the staff intobars. Double bar lines usually mark the end of a section. Final bar lines mark the end of a composition (song or piece). Bar lineâDouble bar lineâFinal bar lineâ&‹The Time Signature tells you how many beats are in each bar and what type of note equals one beat. Beginners only need to know about the top number for now.∑The top number states how many beats are in each bar.The bottom number states the rhythmic value of each beat.© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pr"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 10,
      "text": "ates how many beats are in each bar.The bottom number states the rhythmic value of each beat.© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com10"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 11,
      "text": "Notes & Rhythms 4444&‹The below staff shows standard music notation starting on the lowest note of the guitar. The lines above and below the staff are called Ledger Lines which extend the range of the staff. Notice how the note names go up in the order of the musical alphabet: A - B - C - D - E - F - G and then repeat at a higher pitch. There are actually twelve notes in the musical alphabet but we'll learn about that later.EFGABCDEFGABCDEFGABCDE&‹ENotes can be placed on the lines or the spaces of the staff to indicate the pitch. Line Notes Memorization: Every Good Bear Deserves Fish. Space Notes Memorization: FACEGBDFFACE&‹2Rhythm & Beat Values - Beginners only require a simple explanation of rhythmic note values to begin. The below example has a time signature of 4 beats per bar. I've written the beats above each bar. The bottom example shows musical rests which are indications of silence that corresond to rhythmic values.Quarter NotesSolid NoteheadStem1 beat12342Half NotesHollow NoteheadStem2 beats12342Whole NotesHollow NoteheadNo stem4 beats1234&‹2Quarter Rest1 beat silence2Half Rest2 beats silence2Whole Rest4 beats silenceœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœ˙˙wŒŒŒŒÓÓ∑© Bradford"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 11,
      "text": "eheadStem2 beats12342Whole NotesHollow NoteheadNo stem4 beats1234&‹2Quarter Rest1 beat silence2Half Rest2 beats silence2Whole Rest4 beats silenceœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœ˙˙wŒŒŒŒÓÓ∑© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com11"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 12,
      "text": "Numbers above the notes indicate the left hand fingering. E, B, and G are open strings so they all have \"0\" above them. The high E string (1st string) is the string closest to your feet. It is called high because it is high in pitch.Notes for Etude No. 1&‹1st string open0E2nd string open0B3rd string open0G &‹String:Name:Continue writing the note names and string numbers. You don't need to play these notes.E1B 2G 3E1&‹Name:String:E1B 2wwwœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com12"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 13,
      "text": "Rhythms for Etude No. 1Place your right hand thumb on a bass string.Say the right hand fingering as you play.Count the beat as you play.44444444&‹Quarter Notes Count:i1m2i3m4i1m2i3m4 i1m2i3m4i1m2i3m4 &‹Half NotesCount:i12m34i12m34 i12m34i12m34 &‹Whole NotesCount:i1234m1234 i1234m1234 &‹Mixed RhythmsCount:i1m2i3m4i12m34 i1m2i34m1234 œœœœœœœœœœœœœœœœ˙˙˙˙˙˙˙˙wwwwœœœœ˙˙œœ˙w© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com13"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 14,
      "text": "Etude No. 1 - MelodyPlace your right hand thumb on a bass string to stabilize the hand.1. Name the notes without playing2. Name the rhythms without playing (quarter, half, whole) 3. Say the right hand fingering as you play4. Count the beat as you play44&‹Count:i1m2i3m4i12m34i1m2i3m4i12m34&‹Continue Countingimimimimimim&‹imimimimimim&‹imimimimimiœœœœ˙˙œœœœ˙˙œœœœ˙˙œœœœ˙˙œœœœ˙˙œœœœ˙˙œœœœ˙˙œœœœw © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com14"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 15,
      "text": "Arpeggios are notes of a chord played in succession instead of all together. Let all notes sustain (ring) and count out loud. Keep the right hand thumb in front of the fingers at all times. rit. = Ritardando indicating a slowing down of the tempo.Etude No. 2 - Arpeggios rit.44&‹Slowlypimipimipimipimi&‹pimipimipimip&‹pipipipipipipipi&‹pmpmpmpmpmpmpœœœœœœœœœœœœœœœœœœœœœœœœœœœœwœœœœœœœœœœœœœœœœœœœœœœœœœœœœw © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com15"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 16,
      "text": "°¢°¢Nocturne DuetThe student plays the top staff as a solo or duet with a teacher. Also see the play-along videos for duets in this book.Stop the sound during bars with whole note rests (bar 2 and 4). Both lines have repeat signs. In this song you repeat each line once. Count out loud as you play.............4444&‹StudentCount:i12m341∑234i12m341∑2repeat to the beginning34É&‹Teacher&‹Érepeat 2nd line from herei12mi3m4i12m34i12mi34m123Érepeat4&‹˙˙˙˙˙œœœ˙œœœ˙œœœÓœœœœ˙œœœ˙œœœ˙œœœÓœœœœœœœœ˙˙œœ˙wœœœœœœ#œœ˙œœœ˙œœœœœœœœœœœœ.œœœœj˙˙ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com16"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 17,
      "text": "Notes on the Third StringThis is a great time to watch or review the left hand technique video.The numbers above the notes in guitar music indicate the left hand fingering. Open String (0), Index (1), Middle (2), Ring (3), Pinky (4).&‹3rd stringopen0G3rd string2nd fret2nd finger2A &‹Name:String:Fret:Complete the following note names, frets, and stringsG03A23&‹String:Name:Fret:A23B02wwœœœœœœœœœœœœœœœœ œœœœœœœœœœœœœœœœ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com17"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 18,
      "text": "Sight Reading & Review44444444&‹1. Ascending Note Reviewm0i2mi0mi0mi&‹2. Descending Note Reviewimimimim&‹3. Rhythm Review on Open Stringsimimimimimi&‹4. Rhythm Review with All Notesimimimimimi˙˙˙˙˙˙˙˙˙˙˙˙˙˙˙˙œœ˙œœ˙œœœœwœ˙œœ˙œœœœœw © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com18"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 19,
      "text": "Say the note names out loud as you play. Moderato indicates a moderate tempo.Keep your left hand fingers curved, on the fingertips, and close to the fret.Playing close to the fret will stop buzzing and allow for a light touch. Place the right hand thumb on a bass string. Moderato44&‹i2mimi0mimi2mimi0m&‹imimimimimimi&‹imimimimimimim&‹imimimimimimiœœœœœœœœœœœœ˙˙œœœœœœœœœœœœwœœœœœœœœœœœœ˙˙œœœœœœœœœœœœw © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com19"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 20,
      "text": "°¢°¢°¢°¢ A Fairy Tale The student plays the top staff as a solo or duet.Also see the play-along videos for duets in this book. This piece has 3 beats per bar as indicated by the time signature.Count: 1-2-3 for each bar.3434&‹2im0imimi&‹&‹mimimimi&‹&‹mimimimi&‹&‹mimimim&‹˙œœœœ˙.˙.˙˙˙...œœœ˙˙˙...˙.˙˙˙...œœœ˙˙˙...œœœœœœœœœ˙.˙.˙˙˙...˙.˙˙˙...˙.˙˙..œœœœ˙˙˙...˙.œœœ˙.œœœ˙.˙˙˙...˙.˙˙˙...œœœ˙˙˙...˙.˙˙˙...˙.˙œœœœ˙.˙.˙˙˙...œœœ˙˙˙...˙.˙˙˙...œœœ˙˙˙...˙.© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com20"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 21,
      "text": "Notes on the First & Second StringsThe following notes use a similar pattern: open string, 1st fret, 3rd fret.Use the 4th finger on D and G as solo pieces will require in later grades.&‹2nd stringopen0B2nd string 1st fret1st finger1C2nd string 3rd fret4th finger4D1st string open0E1st string 1st fret1st finger1F1st string 3rd fret4th finger4G&‹Name:String:Fret:Complete the following note names, frets, and stringsD32C12&‹String:Name:Fret:G31F11wwwwwwœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com21"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 22,
      "text": "Note Review&‹String:Name:Fret:B02C12&‹String:Name:Fret:&‹String:Name:Fret:œœœœœœœœœœœœœœœœœœœœœœœœ œœœœœœœœœœœœœœœœ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com22"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 23,
      "text": "Sight Reading & ReviewSay the note names out loud as you play the following exercises.Keep left hand fingers curved, play on fingertips very close to the fret.Playing close to the fret will stop buzzing and allow for a light touch.Place the right hand thumb on a bass string. 444444&‹Second String Notes0imim1imim4imim&‹First String Notes0imim1imim4imim&‹Both Strings Without Fingeringmimimimimimi&‹mimimimimimiœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœ© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com23"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 24,
      "text": "Say the note names out loud as you play.Place the right hand thumb on a bass string.Five Melodies44 44&‹The Mountain1im4imi0mi1m4imimim&‹im1im0im4im1im0im1i&‹Theme by Joseph Haydn (1732-1809)mimimimimimimi&‹mimimimimimiœœœœœœœœœœœœ˙˙œœœœœœœœœœœœwœœœœœœ˙œœœœœœ˙œœœœœœ˙œœœœw © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com24"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 25,
      "text": "4444 44&‹Lightly Rowimimimimimim&‹imimimimimi&‹Go Tell Aunt Rhodyimimimimimi&‹mimimimimim&‹This cunning little piece encourages proper left hand technique through listening skills.Let all notes sustain by keeping C and D down while you play the open E string. You will have to stay on your fingertips and curve your fingers to avoid muting the 1st string! The Fox imimimimetc.&‹œœ˙œœ˙œœœœ˙˙œœ˙œœ˙œœœœw˙œœ˙˙˙œœœœ˙˙œœ˙œœœœœœwœœœœœœœœœœœœœœœœœœœœœœœœœœœœw© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com25"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 26,
      "text": "°¢°¢°¢°¢Ode to JoyThe student plays the top part as a solo or duet.The dotted quarter note and eighth note rhythms in bar 4, 8, and 16should be played by ear (as you naturally hear the melody). These rhythms will be taught later. Ludwig van Beethoven (1770-1827)4444&‹mimimimietc.&‹&‹&‹&‹&‹&‹&‹œœœœœœœœœœœœœ.œJ˙œ˙˙˙œ˙œœ˙œœ˙œœ˙œœ˙œœ˙œ.œj˙˙˙œœœœœœœœœœœœœ.œJ˙œ˙˙˙œ˙œœ˙œœ˙œœ˙œœ˙œœ˙œ.œj˙˙˙˙œœœœœœœœœœœœœœ˙˙œœ˙œœ˙œœ˙œœ˙œœ˙œœœœœ#œ˙˙˙˙œœœœœœœœœœœœœ.œJ˙œ˙˙˙œ˙œœ˙œœ˙œœ˙œœ˙œœ˙œ.œj˙˙˙˙© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com26"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 27,
      "text": "Dynamics indicate changes in volume and can bring any melody to life. Dynamics are not always marked on the page but musicians add them for expressive effect. Here are a few examples of dynamics you might see:Sight Reading & Dynamics 4444&‹Play the following example of crescendo and diminuendo p crescendo (gradual increase) ppiano(soft) mfmezzo forte (medium) f diminuendo(gradual decrease) f forte(loud) &‹Play the following example of an echo effect (loud first line, soft second line) f&‹ pœœœœœœœœœœœœ˙˙˙œœ˙œœ˙œœw˙œœ˙œœ˙œœw© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com27"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 28,
      "text": "Etude No.3 - Sound PictureRemember to keep the right hand thumb in front of the fingers.Strum the final chord from the 3rd string to the 1st string.Follow the dynamics very carefully...44&‹pimipimi&‹ p&‹f&‹&‹rit.p∏∏∏∏∏œœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœwww © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com28"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 29,
      "text": "Note Review&‹Name:String:Fret:Name the following notesG03A232B0&‹String:Name:Fret:G31G03&‹String:Name:Fret:G31E01œœœœœœœœœœœœœœœœ œœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com29"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 30,
      "text": "Twinkle, Twinkle, Little StarPhrasing tip: sing the words as you play and imitate your voice. Avoid emphasizing each syllable/note equally.Do your best to alternate right hand fingers after the first line. LyricsTwinkle, twinkle, little star,How I wonder what you are.Up above the world so high,Like a diamond in the sky.Twinkle, twinkle, little star,How I wonder what you are.44&‹mimimimimimimi&‹&‹œœœœœœ˙œœœœœœ˙œœœœœœ˙œœœœœœ˙œœœœœœ˙œœœœœœ˙ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com30"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 31,
      "text": "Etude No.4 - The Birds Hold down all the notes within each bar and let sustain.Notice the time signature indicates only three beats per bar.Play slowly and count 1-2-3 for each bar.34&‹mfpimpim&‹&‹p&‹&‹f&‹&‹mfrit.UPFermata (hold longer)œœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœ˙.© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com31"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 32,
      "text": "The student reads the notes and ignores the written chords.The teacher plays the chords (leave out the 7ths if needed).Accompaniment can be strummed or fingerstyle.Vary the accompaniment pattern to encouarge musical flexibilty.Jazz Cat44&‹mfmCmaj7imG7iCmaj7miAm7G7E7Am7G7&‹pCmaj7Dm7G7Am7Dm7E7Am7G7&‹mfCmaj7G7Cmaj7Am7Dm7G7Cmaj7œœ˙œœ˙œœœœ˙˙œœ˙œœ˙œœœœ˙˙œœ˙œœ˙œœœœw © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com32"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 33,
      "text": "Au clair de la luneThe student plays the notes (ignore the letters indicating chords).The teacher accompanies with chords (strumming and fingerstyle),and should vary the accompaniment pattern to encouarge musical flexibilty.44&‹mfmCimiGCGC&‹pCGCGC&‹fDmG&‹mfCGCGCœœœœ˙˙œœœœwœœœœ˙˙œœœœwœœœœ˙˙œœœœwœœœœ˙˙œœœœw © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com33"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 34,
      "text": "Oh! Susanna Stephen Foster (1826–1864)The student plays the notes. The teacher accompanies with chords.A starting note that doesn't begin on the first beat of the bar is called a pickup. Count the missing beats in the pickup bar (the first note begins on beat 4).The note near the end of the first line is called a dotted half note and counts for 3 beats.Play the notes with alternating i-m as best you can.44&‹Count: 1 2 3 4IcomeGfromAla-bam-a-withabanjo-onmyknee.DWe're&‹goin'GtoLouisi-an-a-mytrueloveforDtosee.G&‹OhCSusan-na-ohdon'tGyoucryforme;DI&‹comeGfromAla-bam-a-withmybanjo-onDmyknee.Gœœœœœœœœœœœœœ˙.œœœœœœ˙œœœœœw˙˙œ˙œœœœœ˙.œœœœœœœœœœœœœ˙. © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com34"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 35,
      "text": "°¢°¢°¢°¢WaltzCarl Czerny(1791-1857)The student plays the top part as a solo or duet. Notice the dynamics and phrase marks indicating legato: a smooth and connected sound from note to note. The dots above some notes indicate staccato: short and disconnected (opposite of legato). Play staccatoby placing the next right hand finger on the string early (therefore stopping the sound). ....3434&‹Andantinop&‹&‹&‹&‹&‹p&‹&‹œœœœ.œ.œ.œœœœ.œ.œ.˙.˙.˙.˙.œ.œ.œ.œœœœœœ˙.˙.˙.˙.˙.œœœœ.œ.œ.œœœœ.œ.œ.˙.˙.˙.˙.œ.œ.œ.œœœœœœ˙.˙.˙.˙.˙.© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com35"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 36,
      "text": "°¢°¢°¢°¢MinuetC. H. Wilton(1761-1832)The student plays the top part as a solo or duet.Notice the phrasing and dynamics as well as the special fingering in bar 9.This fingering allows you to play legato from D to G without jumping the same finger over to a new string.............3434&‹Andantinomf&‹&‹&‹&‹p34cres.&‹&‹mf&‹œœœ˙œœœœ˙œ˙.œœœ˙œœœœœœœœœœœœœ˙.˙.œœœ˙.˙.œœœ˙œœœœ˙œ˙.œœœ˙œœœœœœœ˙œœœœ˙.œœœœœœœ˙˙.© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com36"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 37,
      "text": "°¢°¢°¢°¢MorningAnton Diabelli(1781-1858)The student plays the top part as a solo or duet. Notice the phrasing and dynamics. ....4444&‹p&‹&‹&‹&‹mpmf&‹&‹fp&‹œœœœœœ˙œœœœœœ˙wwwwwwwwœœœœœœœœœœœœ˙Óww˙˙˙˙˙Óœœœœœœ˙œœœœœœ˙wwwww˙˙w˙Óœœœœœœœœœœœœ˙Ó˙˙˙˙˙˙˙Ó© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com37"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 38,
      "text": "Open Bass StringsThe lines below the staff are called ledger lines.Ledger lines extend the pitch range of the staff. 44&‹6th stringopen0E5th stringopen0A4th stringopen0D &‹Name the following notesName:String:Fret:D04A05E60&‹String:Name:Fret:G03A23wwwœœœœœœœœœœœœœœœœ œœœœœœœœœœœœœœœœ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com38"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 39,
      "text": "This piece combines melody with bass accompaniment. The melody (top three strings) is the prominent musical voice. Play the melody louder than the bass notes. Sustain the melody notes despite their quarter note value (keep fingers down during each bar).I've used sostenuto marks (dashes) to indicate sustain of the melody notes.Etude No. 5 - Waltz34&‹mppippmppipp&‹mppimi&‹mimi&‹mirit.mpœ-œœœ-œœœ-œœœ-œœœ-œœœ-œœœ-œœœ-œœœ-œœœ-œœœ-œœœ-œœœ-œœœ-œœœ-œœ˙. © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com39"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 40,
      "text": "Etude No. 6 - AllegroMake the melody (top three strings) the prominant voice. Let the last melody note of each scale run sustain for the entire bar.Allegro indicates a brisk (fast) tempo but never play faster than you can play well.44&‹imimipppmimimppp&‹imimimimimimippp&‹impmip&‹imrit.pœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœ˙˙ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com40"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 41,
      "text": "Etude No. 7 - The Lonely Dogwood The Dogwood is a flowering tree and the offical tree of British Columbia, Canada. This piece introduces the a finger during arpeggios. Hold your left hand fingers down and let all notes sustain.44&‹pimapima&‹21&‹&‹21&‹4&‹&‹rit.œœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœw© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com41"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 42,
      "text": "New Notes 44&‹5th string 3rd fret3rd finger3C4th string open0D4th string 2nd fret2nd finger2E4th string 3rd fret3rd finger3F &‹Complete the following note names, frets, and strings Name:String:Fret:F34E24C53&‹String:Name:Fret:A23F34wwwwœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com42"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 43,
      "text": "Note Review&‹String:Name:Fret:C35D04&‹String:Name:Fret:&‹String:Name:Fret:œœœœœœœœœœœœ œœœœœœœœœœœœœœœœœœœœœœœœœœœœ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com43"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 44,
      "text": "Hold fingers down and let notes sustain.Etude No. 8 - Prelude34&‹3p0i0mpim&‹0&‹3&‹0&‹2&‹0&‹30rit...3œœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœ˙.© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com44"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 45,
      "text": "This is a C major scale with repeated half notes.You will learn more about major scales in my Volume 2 method.Rest your thumb on the 6th string.Use i-m alternation the entire time.Memorize this scale and warm up with it everyday.C Major Scale44&‹imimimimim&‹imimimimim&‹imimimimim˙˙˙˙˙˙˙˙˙˙˙˙˙˙˙˙˙˙˙˙˙˙˙˙˙˙˙˙˙˙ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com45"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 46,
      "text": "Eighth NotesNotice that eighth notes are connected with beams.Eighth notes are half the value of quarter notes.Therefore, there are two eighth notes in every beat.44444444&‹Exercise No. 1aCount the written numbers and say \"and\" for the plus sign.1+2+3+4+1+2+3+4+1+2+3+4+1+2+3+4+&‹Exercise No. 1bOnly count the written numbers (do not say \"and\" between the quarter beats).1234123412341234&‹Exercise No. 2aCount the written numbers and say \"and\" for the plus sign.1+2+3+4+1+2+3+4+1+2+3+4+1+2+3+4+&‹Exercise No. 2bOnly count the written numbers (do not say \"and\" between the quarter beats).1234123412341234œœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœ˙œœœœœœœœœœœœœœœœœœœ˙ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com46"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 47,
      "text": "Sight Reading ..443444 24&‹Exercise 1 - Count 1-2-3-4 as you play. Use your right hand thumb the entire time.p_&‹Exercise 2 - Count 1-2-3 out loud as you play. Use i-m the entire time. imimimimimi&‹Frére Jacques mimietc&‹imim&‹Merrily we roll alongNotice the time signature indicates two beats per bar (count 1-2 for each bar).œœœœœœœœœœœœœœœœ˙˙œœœœœœœœœœ˙.œœœœœœœœœœ˙œœ˙œœœœœœœœœœœœœœ˙œœ˙œœœœœœœœœœœœœœœœœœœœœœœœ˙© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com47"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 48,
      "text": "Angeline the BakerPlay the melody with alternating i-m fingering.Traditional BluegrassFiddle & Banjo Tune......24&‹GmimiC&‹G&‹GC&‹Gœœœœœœœœœœœœ˙œœœœœœœœœœœœ˙œœœœœœœœœœœœ˙œœœœœœœœœœœœ˙ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com48"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 49,
      "text": "°¢°¢°¢°¢MinuetJames Hook(1746-1827)Edited for this book.The student plays the top part as a solo or duet. ............3434&‹&‹&‹&‹&‹&‹&‹&‹œœœ˙œ˙œœœœœœœœœœœœœœœ˙.œœœ˙œœœœ˙.œœœœœœœ˙˙.œœœ˙.œœœ˙.œœœœœœœœœœœœœœœœœœœ˙œœœœ˙.œœœœœœœ˙˙.© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com49"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 50,
      "text": "Etude No. 9 - GlassLet all notes sustain.44&‹pimipimi&‹&‹&‹&‹&‹œœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœ˙Ó© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com50"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 51,
      "text": "Thanks to Slovenian guitarist Uroš Barič for this beautiful song. Play the notes slowly and legato aiming for the first beat of each bar. The letters above the staff are chords for the teacher.Notice the changing time signature and eighth notes. When the time signature changes, count different numbers of beats for the bars.I've written the beat under the music to help. Count out loud as you play. Vsi so venci vejli(All the Wreaths are White)Traditional SlovenianTranscribed by Uroš Barič ..344434&‹Count:C12F3G1C23G4C1234&‹G12C3G4C12F3G1C23œœœœœ˙œœœœœœœœœœœœœœœœœœœ˙ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com51"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 52,
      "text": "°¢°¢°¢°¢The student plays the top part as a solo or duet. The melody is in both parts, phrase together.Flow Gently, Sweet AftonScottishFolk Song3434&‹&‹&‹&‹&‹&‹&‹&‹œœœœœœœœœœœ˙œœœœœœœœœœœœœœœœœœœœœœœ˙œœœœœœœœœœœœœœ˙œœœœœœœœœœœœœœœœœœœœœœœœœ˙œœœœœœœœœœœœœœ˙œœœœœœœœœœœœœœœœœœœœœœ˙œœœœœœœœœœœœœ˙œœœœœœœœœœœœœœœœœœœœœœœœœ˙˙˙˙Œœœ© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com52"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 53,
      "text": "°¢°¢°¢°¢&‹334&‹&‹334&‹&‹&‹&‹&‹œœœœœœœœœ˙œœœ˙œœœœ˙œœœœœœ#œœœœ#˙œœœœœœœœœœœœœœœ˙.œ˙œœœœ˙œœœœœœœœœœœœ#˙œœœœœœœœœœœœœœ˙œœœœœœœœœœœœœœœœœœœœœœ˙œœœœœœœœœœœœœ˙œœœœœœœœœœœœœœœœœœœœœœœ˙˙˙˙© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com53"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 54,
      "text": "Two Voice TexturesMultiple musical lines can be written and played simultaneously. When two voices are written, each voice must account for all the beats in the bar. This allows composers to write exactly how long each note should sustain. Let's first look at the voices separately and then combine them into one staff.4444&‹Voice One (upper)&‹Voice Two (lower)∑&‹Both voices on the same staff (two-voice or two-part texture)Notice how the rests in each voice account for all beats in the bar. Count:1234123412341234ŒœœœŒœœœŒœœœœœœœwwwŒwœœœŒwœœœŒwœœœœ∑œœœ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com54"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 55,
      "text": "Etude No. 10 - The Swan Different stem directions help keep the voices separate.Notice the special fingering needed to play legato from G to D.44&‹pmimpim4i3pmim&‹pm43&‹p∑_∑∑∑&‹pmimpim4i3UpŒwœœœŒwœœœŒwœœœœ∑œœœŒwœœœŒwœœœŒwœœœ˙∑˙œœœœœœœœœœœœ˙˙ŒwœœœŒwœœœŒwœœœwÓ˙ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com55"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 56,
      "text": "Etude No. 11 - The Old Douglas FirPlay the melody (stems up) on its own a few times before including the bass notes.Notice how two notes from separate voices are played at the same time in bar 8 and bar 16.Play all lower voice notes (stems down) with p and all upper voice notes (stems up) with i-m. 34&‹ipmipm&‹&‹&‹˙Œ˙œ˙Œ˙œ˙Œ˙œ˙.Œœœ˙Œ˙œ˙Œ˙œ˙.Œœœ˙.˙.˙Œ˙œ˙Œ˙œ˙Œ˙œ˙.Œœœ˙Œ˙œ˙Œ˙œ˙Œ˙œ˙.˙. © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com56"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 57,
      "text": "A dot after a note adds half of its value to its length. A dotted quarter note equals one and a half beats. Dotted Quarter Notes44444444&‹Exercise 1a - Deck the Halls. Count out loud as written (say the \"and\").1+2+3+4+1+2+q. 3+= 4q ++ 1+e 2+3+4+1+2+3+4+&‹Exercise 1b - Deck the Halls. Count out loud as written (do not say \"and\")1234123412341234&‹Exercise 2a - Count out loud as written (say the \"and\")1+2+3+4+1+2+3+4+1+2+3+4+1+2+3+4+&‹Exercise 2b - Count out loud as written (do not say \"and\")1234123412341234œ.œJœœœœœœœœœœœ.œJœœ˙œ.œJœœœœœœœœœœœ.œJœœ˙œ.œJœœœ.œJœœœœœ.œJ˙˙œ.œJœœœ.œJœœœœœ.œJ˙˙© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com57"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 58,
      "text": "Во поле березка стояла(Little Birch Tree in the Field)Thanks to my friends Natasha and Galina for recommend this song.Notice the time signature for this piece has only two beats per bar.Play all bass notes with p and all melody notes with i-m. Do your best to alternate your right hand fingers.Russian Folk Song ..24&‹pimimpimpimppi&‹&‹&‹˙œœœœœœœœœœœœœ˙œœœœœœœœœœœœœœœ.˙œjœœœœœœœœœœ.˙œjœœœœœœœœœœ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com58"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 59,
      "text": "The Skye Boat SongThe student plays the notes. The teacher accompanies with chords.D.C. al Fine - Return to beginning and play until the Fine.Scottish Folk Song 34&‹CAm3Dm034GC&‹FCG∑CAm&‹3Dm034GCFC∑Fine&‹AmDmAm&‹FAm∑Am&‹DmAmFAm∑GD.C al Fineœ.œjœ˙œœœ.œJœ˙.œ.œJœ˙œ˙.œ.œjœ˙œœœ.œJœ˙.œ.œJœ˙œ˙.œ.œJœ˙.œ.œjœ˙.œ.œjœ˙œ˙.œ.œJœ˙.œ.œjœ˙.œ.œjœ˙œ˙.© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com59"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 60,
      "text": "Fifth String Notes 44&‹5th string open0A5th string 2nd fret2nd finger2B5th string 3rd fret3rd finger3C &‹Name the following notes Name:String:Fret:A05B25C53&‹String:Name:Fret:A23F34wwwœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com60"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 61,
      "text": "Sixth String Notes4444&‹6th string open0E6th string 1st fret1st finger1F6th string 3rd fret3rd finger3G &‹Name the following notes Name:String:Fret:E06F16G63&‹String:Name:Fret:G31G03G36wwwœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com61"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 62,
      "text": "Note Naming&‹String:Name:Fret:A0B2&‹String:Name:Fret:55 &‹String:Name:Fret:œœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com62"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 63,
      "text": "Note ReviewUse you p on the three bass strings and i-m for the top three strings.Say the note names out loud as you play.For extra practice, try playing with all i-m alternation. 44&‹3p_0230im2imetc.01&‹40141041&‹0203p_2032&‹031013023œœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœw © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com63"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 64,
      "text": "Sight Reading - The Imitation Game Notice how every other bar is a repeat one octave lower (same note name but lower). Use i-m for the upper octave and p for the lower octave as shown in the first line.Say the note names out loud as you play.44&‹i4m1i00p3p2pi1m0i4p3p2p0&‹041203410032&‹102320020203&‹203031032310œœ˙œœ˙œœ˙œœ˙œœ˙œœ˙œœ˙œœ˙œœ˙œœ˙œœ˙œœ˙œœ˙œœ˙œœ˙œœ˙ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com64"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 65,
      "text": "Isaac Albeniz(1860-1909)This piece is notated as one voice for simplicity. Let all notes sustain.Notice the special fingering to play legato from E to B on the 4th and 5th string. The time signature indicates six beats per bar.Leyenda Theme64&‹pmpmpm&‹&‹21&‹212&‹21212&‹œœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœw.© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com65"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 66,
      "text": "AccidentalsSharps raise the pitch by a half-step (up one fret).Flats lower the pitch by a half-step (down one fret).Naturals return the note to its regular pitch.44&‹„G Chromatic ScaleIn the below scale each new string is marked with a string number with a circle around it.The fingering matches the fret number for this scale so use your third finger on D and G. When flats are used on open string notes the flat note must be found on an adjacent string.0G1G#2A#bn 3A#‚0B1C2C#3D4D#·0E1F2F#&‹ With Sharps:The Musical AlphabetThere are 12 notes in the traditional musical alphabet. Some notes have two different names but share the same pitch (sound), these are called enharmonic notes (indicted with slash marks).Musical Alphabet:With Flats:3G2Gb1F A Bb B C Db D Eb E F Gb G Ab AA A# B C C# D D# E F F# G G# AA A#/Bb B C C#/Db D D#/Eb E F F#/Gb G G#/Ab A0E‚4Eb3D2Db1C0B„3Bb2A1Ab0Gœœ#œœ#œœœ#œœ#œœœ#œœbœœœbœœbœœœbœœbw © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com66"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 67,
      "text": "This E chromatic scale goes up to the highest note in first position. The pitches are the same acsending and decsending but are spelled with sharps on the way up and flats on the way down. Say the note names out loud as you play.E Chromatic Scale44&‹Ê01234Â01234‰01&‹234„0123‚01234&‹·012343210‚432&‹10„3210‰43210Â4&‹3210Ê43210œœœ#œœ#œœ#œœœ#œœ#œœœ#œœ#œœ#œœœ#œœ#œœœ#œœ#œnœbœœœbœœbœœœbœœbœœbœœœbœœbœœœbœœbœœbœ˙Ó© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com67"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 68,
      "text": "GreensleevesThe student plays the notes. The teacher accompanies with chords.Accidentals (sharps and flats) apply to the entire bar. For example, the G# in the first bar of the third line also applies to the G on the final beat of that bar.Do your best to alternate i-m fingering but don't be too hard on yourself.Practice alternating, remind yourself to do it, but never get frustrated if you make small mistakes.Traditional34&‹imAmimimiGmiAm1&‹E1AmGAm&‹1E41AmCG&‹AmEC&‹GAm1E41Amœ˙œœ.œJœ˙œœ.œjœ˙œœ.œ#jœ˙œ#˙œ˙œœ.œJœ˙œœ.œjœœ.œJœœ#.œ#jœ˙.˙Œ˙.œ.œ#Jœ˙œœ.œjœ˙œœ.œ#jœ˙œ#˙.˙.œ.œ#Jœ˙œœ.œjœœ.œJœœ#.œ#jœ˙.© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com68"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 69,
      "text": "MalagueñasThe malagueña is a style of flamenco music derived from earlier types of the fandango. It is often improvised upon and is generally free in its rhythmic interpretation (cante libre).The vertical arrow at the end of the second line indicates a strum of the chord (rasgueado) using the fingernail of the top side of the i finger. ..34&‹p2p1p0_&‹pipipi_Ui∏∏∏∏∏∏0012&‹mim&‹&‹p0p4p2_031&‹p0ip4ip2i_pUi∏∏∏∏∏∏œœ#œœœ#œœœœœœnœœœœœ#œœœœœœœœœ#œœœœœœœœœœœœœœœœœœœnœœœœ˙.˙˙˙#...˙.œœœœ.œJœœœœ˙.œœœœ.œJœœœœ˙.œœ#œœœ#œœœœœœnœœœœœ#œœœœœœœœœ#œœœœœœœœœœœœœœœœœœœnœœœœ˙.˙˙˙#...˙.© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com69"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 70,
      "text": "°¢°¢°¢°¢The student should practice both parts separately. If played as a duet, switch parts at the repeat.Minuet in G Christian Petzold (1677-1733) (First Section Only) ....3434&‹24&‹&‹4&‹&‹2&‹&‹4&‹œœœœœœœœœœœœœ#œœœ˙œ˙.˙.˙.œœœœœœœœœœœ#œœœœœ˙˙.˙.œœœœœœœœœœœœœœœœœœœœœ#œœœ˙œœœœ˙.œœœœœœœœœœœœœœœœœœœœ#˙.˙œ#˙œœœœœœœ© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com70"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 71,
      "text": "SicilianoTies join together the rhythm of two notes of the same pitch. Sustain for the full value of both notes (but do not re-pluck the 2nd note).This is an authentic piece by a guitar player and composer of the Classical era.Matteo Carcassi (1792-1853)34&‹impimipmiTie&‹&‹&‹ipamiœŒœ.˙.œjœœ.˙.œjœœ.˙.œjœœ.˙.œjœœ.˙.œjœœ.˙.œjœ#œ.˙.œjœ˙˙.œœ.˙.œjœœ.˙.œjœœ.˙.œjœœ.˙.œjœœ.˙.œjœœ.˙.œjœ#œ˙.œœ˙˙. © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com71"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 72,
      "text": "Farewell Congratulations! You've made it to the final classical guitar piece in the book. The rhythm used here is called triplets: three notes evenly spaced within one quarter note beat (indicated by the bracket). The first note of each triplet group is the melody. Let all notes sustain. 34&‹apmi2ami4ami2123&‹2&‹1242&‹4212&‹424212&‹U˙.œœœœ#œœœœœ˙.œ#œœœœœœœœ˙.œœœœœœœœœ˙.œœœœœœœœœ˙.œœœœ#œœœœœ˙.œ#œœœœœœœœ˙.œœœœœœœœœ˙.œœœœœœœœœ˙.œœœœ#œœœœœ˙.œœœœ#œœœœœ˙.œœœœœœœœœ˙.œœœœœœœœœ˙.œœœœ#œœœœœ˙.œœœœ#œœœœœ˙.œœœœœœœœœ˙.œœœœœœœœœ˙.˙.© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com72"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 73,
      "text": "Hey,ho,nobod-y-home.Meat000 nordrink,nor money-haveInone,yetwillIbemerry.-44&#?Hey, Ho, Nobody Home- Strum four beats per bar as indicated by the slash marks (do not read the notes). - Count out loud as you strum.- The teacher plays or sings the melody.Chord Diagrams- Vertical lines = the strings - Horizontal lines = the frets - The string on the left is the 6th string (bass)- Do not strum strings that have an X.- The numbers below are the fingering.- E minor = Strum the top three open strings- Strum down from the 3rd to the 1st strings using your thumb or a pick. Em???????E Minor (Em) ????Before learning fingerstyle accompaniment some basic strumming patterns will be played. Chord Accompaniment Section &#????????????U˙˙œœœ˙œœœœœœœœ˙œœœœœœœœœœw© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com73"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 74,
      "text": "AreFrèGyoure-sleepJacing?ques,--Arefrèyoure-sleepJacing?ques,G003 --Brodorthermez--John,vous?-BroDorthermez--John,vous?- MornSoningnezbellslesaremaringti-ing!nes!--Mornsoningnez-bellslesaremaringti-ing!nes!--Ding,dang,dong.Ding,dang,dong.44&#Frère Jacques / Brother JohnThe student strums a G Major chord the entire time (do not play the notes).Strum four beats per bar (there are no slash marks anymore)Once comfortable strum and sing the lyrics at the same time. G Major Chord: 1st string, 3rd fret, 3rd finger. Strum the top three strings.TraditionalFrance &#œœœœœœœœœœ˙œœ˙œœœœœœœœœœœœœœ˙œœ˙ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com74"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 75,
      "text": "LonCdon-Bridgeisfal010C ling-down,falGling-down,G003 falCling-down London-Bridgeisfalling-down,myGfairlaCdy-44&The student strums the chords with four beats per bar and sings. If no chord is shown, continue strumming the previous chord.C Major: 2nd string, 1st fret, 1st finger. Strum the top three strings. London BridgeTraditionalEngland &œœœœœœœŒœœœŒœœœŒœœœœœœœŒ˙˙œœÓ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com75"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 76,
      "text": "YouaremysunGG003 shine,-C010 myon0132D ly-sunshine.- YoumakemehapCpy,-whenskiesaregrey.G You'llnever-know,Cdear,howmuchIloveGyou. Pleasedon'ttakemysunDshine-away.G-44&#Strum the chords with four beats per bar.Notice that the pickup bar starts on beat two.D Chord - Follow the chord diagram and strum four strings. You Are My Sunshine Jimmie Davis,Charles Mitchell,Paul Rice &#&#&#œœœ˙˙œœœ#œ˙˙Œœœœ˙˙œœœœwŒœœœ˙˙œœœœœœ˙Óœœ˙™œ˙œœw© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com76"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 77,
      "text": "AmazG-ingG003 -grace,C how010 sweetC0132D thesoundGthat savedawretchlikeme.DI--- onceGwaslost,butnowCamfound;Gwas blind,butnowDIsee.G--34&#Strum the chords with three beats per bar.Amazing GraceTraditional Hymn &#&#&#œ˙œ˙œ˙œ˙œ˙œ˙œ˙™˙œ˙œ˙œ˙œ˙œ˙œ˙œ˙™˙© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com77"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 78,
      "text": "GCD ComeandsitGbymy003 sideif010 youloveC0132 me.DonothasGten-tobidmeadieu.D-ButrememG-bertheRedRiver-ValCley,- andthecowDboygirl-wholovedyousotrue.G4444&#≥Strum Pattern1≥2≤+≥3≥4≥≤Red River Valley TraditionalNorth AmericanStrum the chords using the below pattern (count four beats per bar).Slighty swing/relax the eighth note.Downstrum = Upstrum = &#&#&#&#VVVVVœœ˙œœ˙œœœ˙™Óœœ˙œœ˙œœwÓœœ˙œœ˙œœœ˙™Óœœ˙œœ˙œœw© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com78"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 79,
      "text": "HangCdownG210003 yourhead,Tom320004G Dooley.-32010C HangdownD0132 yourheadand023000Em cry.G Hangdownyourhead,TomDooley.-Poorboyyou'reboundtodie.C44&#Tom Dooley - North Carolina Folk Song Try out the G and C chords by strumming four beats per bar.Full Chord Shapes Memorize these chord shapes for the next few songs. Notice the alternative fingering for the G chord. The first G chord is quite comfortable, the second is a bit of a stretch but easier to move to the C chord after. Practice both chord shapes. Youth students may have thier teacher choose one. &#œjœœjœœœ˙™œjœœjœœwœjœœjœœœ˙™œJœœJœœw © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com79"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 80,
      "text": "Oh,Danny-boy,Gthe-pipesthepipesarecallC-ing,fromglentoglenGanddownthemountain- side.DThesummer's-goneGand-alltheroses-fallC-ing.It'syou,it's you,Gmustgo,DandImustbide.GButcomeyebackwhensumCmer's-inthe meadGow,-orwhenthevalEmley's-hushedCandwhitewithsnow.D'TisI'llbe thereGinsunCshine-orinshadG-ow,oh,Danny-boy,oh,Danny-boy,DIloveyouso!G44&#Traditional IrishDanny BoyBars containing two chords recieve two beats per chord. &#&#&#&#œjœœœ™œjœœœœœœœ‰œjœœœ™œJœœœœ˙‰œjœœœ™œjœœœœœœœ‰œjœœœ™œJœœœœ˙‰œJœœœ™œJœœœœœœœ‰œJœœœ™œJœœœœ˙‰œJœœœ™œJœœœœœœœ‰œjœœœœœœœœœœ˙© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com80"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 81,
      "text": "Oh.ShenGan-doah-Ilongtoseeyou,AwayC-yourolling- rivGer,-OhShenCan-doah-DIlongtoseeEmyou,CA- wayGCwe'reboundawayG-aEmcross-thewideGMissDou-ri.-G44&#American FolksongShenandoahThe chords change more often in this song. Pick a slow tempo to begin. &#&#œœœœœœœœœJœ™œœœ˙œœœœœJœ™œ‰œJœœœœœœœœjœ™œœ˙œœœœ˙œœœœ˙œœœœ˙™ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com81"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 82,
      "text": "AreAmyouAm02310 going023000 -Em toScarEmG210003 bor-ough0132 -D Fair?Am Parsley,-sage,rosemaD-ry-andthyme.Am Remem-ber-meEmtotheoneAmwholivesthere,G SheAmoncewasGatrueEmloveofmine.Am34&Strum with any strumming pattern as long as there are three beats per bar.In the following pages we will also learn this song with fingerstyle accompaniment.Scarborough FairTraditional &&&∑˙œœJœ™œœ™œJœ˙™Œœœ˙œœœ#œ˙™Óœ˙œ˙œœœœœœ˙˙œ˙œœœœ˙™© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com82"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 83,
      "text": "°¢EEDBFD&The below example demonstrates the same notes on both the notation staff and the TAB. Tablature Please NoteTablature has been in use for centuries going back to the Renaisance lute. Modern TAB often omits rhythm and other musical indications so it has some clear disadvantages. Most importantly, it does not allow you to communicate with non-guitarists. However, it can still be useful for direct guitar knowledge and popular music can often be found in TAB. Tablature (TAB) is another system of written music for guitar.TAB is a visual representation of the six strings on the guitar. The bottom line is the 6th string, the top line is the 1st string. The numbers indicate the frets (not the fingering). ⁄F6th stringopen1st stringopenF4th stringopenF5th string2nd fretF4th string3rd fretF2nd string3rd fretFœœœœœœ 000233 © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com83"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 84,
      "text": "°¢°¢°¢°¢AreAmyougoing-toScarEmbor-ough-Fair?Am Parsley,-sage,rosemaD-ry-andthyme.Am Remem-ber-meEmtotheoneAmwholivesthere,G SheAmoncewasGatrueEmloveofmine.Am34& Play the TAB as eighth notes (two notes for each beat).When playing fingerstyle, only use the left hand fingers needed for each chord.Let all notes sustain within each chord. Scarborough Fair (Fingerstyle)⁄pimamipimamipimami(continue)&⁄&⁄&∑⁄˙œœJœ™œœ™œJœ˙™021012021012000000021012Œœœ˙œœœ#œ˙™ 021012021012023232021012Óœ˙œ˙œœœœœœœ˙021012021012000000021012300300˙œ˙œœœœ˙™ 300300021012300300000000021012© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com84"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 85,
      "text": "°¢°¢°¢°¢WillthecirGcle-beunbro-ken,-byand by,Cbyandby?GIsa better-homeawait-ing,-inthe sky?Dinthesky?G44& The student plays the TAB (4 beats per bar).Notice the bassline contained in this fingerstyle accompaniment.Use your thumb for the bass notes and i, m, a for the top three strings.Will the Circle Be Unbroken? Ada R. Habershon &Charles H. Gabriel⁄&⁄&⁄&⁄œœ˙˙˙œœ˙˙˙œœ 300300033003000330030003300302w˙˙w˙œœ30102010301020103003000330030003˙˙˙œœ˙˙˙œœ 30030003300300033003000330030003w˙œœw˙ 3003200302322030030003320003© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com85"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 86,
      "text": "™™AmEAmEAm02310AmE EAmFmaj73210Fmaj7 1.™™EAmEAmFmaj7EAmAmFmaj7EAm2.44&∑Saint James Infirmary BluesThe student should first strum the chords and then invent a simple fingerstyle accomapaniment. American Folksong &&ÓŒœœœœœœœœœœŒœœœœœœ˙™œœœœœœœœœ˙œœœœœœœ˙™ŒÓŒœœœœ˙œœœœœœœœœ˙™Œ © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com86"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 87,
      "text": "°¢°¢°¢°¢AmCDFmaj7AmC EThereisAmahouseCinNewDOrleansFmaj7-they callAmtheRisCing-Sun.EIt'sbeenAmtheruCin-of manyDpoorgal,Fmaj7andIAmohLordEwasone.Am44&∑∑∑Strum the chords and then learn the TAB. Play the TAB as triplets (three notes to each beat) as indicted in the first bar. House of the Rising SunAmerican Folksong ⁄pimamipimami(continue)&⁄&⁄&⁄021012301010023232321012021012301010ÓŒ™œjœ™œJœ™œJœJœ™œ™œJ 010001010001021012301010023232321012œ™œJœ™œœ˙Œ™œJœ™œJœœœœJ021012301010010001010001021012301010œœœœjœ™œJœ™œjœ#œœœœw023232321012021012010001021012© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com87"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 88,
      "text": "A Pentatonic Minor (open position)Scales for Blues and Popular MusicBelow is the pentatonic minor and blues scales up to the highest notes in position. These can be used for soloing over the following blues chords and other chord progressions such as House of the Rising Sun. 030202130330Closed position scales can be moved around the fingerboard to change the key. Example: If you start the pattern on the 6th fret it will be an A# pentatonic minor scale. A Pentatonic Minor (closed position)141313131414By adding an extra note to the pentatonic minor scale we can create a blues scale. A Blues Scale (closed position)0302021303031202030303058575757585858575757585585675757858585858757576585© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com88"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 89,
      "text": "A DA EDAETwelve Bar BluesUse the TAB to check your note locations. Take a solo using the A pentatonic minor scale.When finished repeating, end using the A chord instead of E.Swing the beat (think: long-short-long-short). 101010 02020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202 0202020202020202020202020202020202020202020202020202020202020202© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com89"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 90,
      "text": "A DA EDAEThe Shuffle10301030/01030 02020404020204040202040402020404020204040202040402020404020204040202040402020404020204040202040402020404020204040202040402020404 0202040402020404020204040202040402020404020204040202020202020202© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com90"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 91,
      "text": "A DA EDAERhythm Riff Blues/00022002200220022002200220022002200331122003311220022002200220022 00220022003311220022002202020202020202 © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com91"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 92,
      "text": "No. 1 - i, m alternation in groups of fourimimimimimimimimRight Hand Technique Routine No. 2 - i, m alternation in groups of threeimimimimimimNo. 3 - p, i alternationRemember to keep the thumb in front of the fingers during arpeggios. Checking your guitar position may help. pipipipipipipipiNo. 4 - p, i, m arpeggio patternpimpimpimpim © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com92"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 93,
      "text": "No. 5 - p, m, i arpeggio patternpmipmipmipmiNo. 6 - p, i, m, a arpeggio patternpimapimapimapimaNo. 7 - p, a, m, i arpeggio patternpamipamipamipamiNo. 8 - p, i, m, a bass strings arpeggio patternpimapimapimapima © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com93"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 94,
      "text": " No. 1 - Fingers 1-2-3-4 on all stringsStart at the 5th fret on the 6th string and play one left hand finger after the other. 123412341234123412341234Left Hand Technique RoutineTablature has been included to clarify the upper position playing. These exercises use the one-finger-per-fret rule or one finger after the other.Keep the left hand palm and knuckles aligned with the strings.Play on your fingertips and curve each joint of each finger.Use your right hand thumb for the bass strings and i-m for the top three strings. No. 2 - Fingers 1 and 4 on all stringsStart at the 5th fret, 6th string, 1st finger and play with only fingers 1 and 4. Observe the one-finger-per-fret rule. 141414141414 567856785678567856785678  585858585858 © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com94"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 95,
      "text": "No. 3 - Finger Pattern 1-4-3-4-2-4Start at the 5th fret, 6th string, 1st finger and use the one-finger-per-fret rule. 143424143424143424143424143424143424 587868587868587868 587868587868587868 © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com95"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 96,
      "text": "1st String - E Chromatic0I.E1F2F#3G4G#V.1A2A#3B4CIX.1C#2D3D#4E3Eb2D1DbV.4C3B2Bb1A4I.Ab3G2Gb1F0ESingle String Chromatic ScalesThese scales teach you the musical alphabet and every note on the guitar.Memorize the pattern but don't worry about reading the notes. The fingering is the same for all the strings (1-2-3-4 on every four frets). Say the note names out loud. 2nd String - B ChromaticBCC#DD#EFF#GG#AA#BBbAAbGGbFEEbDDbCB3rd String - G ChromaticGG#AA#BCC#DD#EFF#GGbFEEbDDbCBBbAAbG012345678910111211109876543210012345678910111211109876543210012345678910111211109876543210© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com96"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 97,
      "text": "4th String - D ChromaticDD#EFF#GG#AA#BCC#DDbCBBbAAbGF#FEEbD5th String - A ChromaticAA#BCC#DD#EFF#GG#AAbGF#FEEbDDbCBBbA6th String - E ChromaticEFF#GG#AA#BCC#DD#EEbDDbCBBbAAbGGbFE012345678910111211109876543210012345678910111211109876543210012345678910111211109876543210© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com97"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 98,
      "text": "ScalesI have included a small number of scales in preparation for the next level of study.Beginners should continue to my V olume Two method book to fully understand the theory of scales, arpeggios, and key signatures. Use i-m and m-a alternation for all scales. 2E Chromatic 1 Octave340123012340432103210432 0E Chromatic 2 Octaves123401234012340123012340432103210432104321043210 98"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 99,
      "text": "One Octave Major ScalesThese scales have been left unfingered for flexiblity in teaching styles.Key Signatures will be discussed in my V olume 2 method book.I have added accidentals in addition to the key signature. C MajorG Major Upper OctaveG Major Lower OctaveF Major© Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com99"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 100,
      "text": "A Natural MinorE Natural MinorD Natural Minor © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com100"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 101,
      "text": "Reference for Basic First Position NotesReview the notes you've learned as you progress through the book. I suggest colouring each new note with a yellow highlighter as you learn.E6th string openF6th string1st fret1st fingerG6th string3rd fret3rd fingerA5th string openB5th string2nd fret2nd finger5th string 3rd fret3rd fingerC4th string openD4th string 2nd fret2nd fingerE4th string 3rd fret3rd fingerF3rd string openG3rd string 2nd fret2nd fingerA2nd string openB2nd string1st fret1st fingerC2nd string3rd fret4th fingerD1st stringopenE1st string1st fret1st fingerF1st string3rd fret4th fingerG © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com101"
    },
    {
      "source": "Classical-Guitar-Method-Vol1-Werner.pdf",
      "page": 102,
      "text": "Not all of the below chords were covered in this book, addition chords have been added for the benefit of supplemental materials. I suggest colouring each new chord with a yellow highlighter as you learn.Chord ReferenceC010C32010G0003G210003G320004G7320001 D0132D70213Dm0241E023100E7020100Em023000 A01230A701020Am02310F3211Fmaj73210B721304 © Bradford Werner, 2020. All Rights Reserved. Sheet Music with Videos: wernerguitareditions.com Lessons, Pro Video, & Blog: thisisclassicalguitar.com102"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 3,
      "text": "Legacy Learni ng Systems 2510 Franklin Pike, Suite 200 Nashville,TN 37204 Gibson's®Learn and Master®Guitar. Copyright © 2010 by Legacy Learn ing Systems, Inc. All rights reser ved. No part of this product, including its DVDs, CDs, printed materials,and packaging,may be used or repro- duced in any manner whatsoever without written permis sion,except in the case of brief quota tions embod - ied in critical articles and reviews. For reproduction informa tion,write to Legacy Learning Systems ,624 Grass mere Park Dr.,Suite 16,Nashville, TN,37211 . LEARN & MASTE R is a registered trademark of Legacy Learning Systems, Inc. GIBSON,the Gibson logo, and the Gibson headstock are registered trademarks of Gibson Guitar Corp.and are used under license. First Edition ISBN 13:978-0-9841193-7-0 ISBN 10:0-9841193 -7-x Printed in China 10 11 12 13 8 7 6 5 4 3 2 1 www .Learn andMas ter.com"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 4,
      "text": "SESSIONS PAGE 1) Starting Off Right 2 String Names, Technique, Tuning, Finger Exercises, C & G7 Chords 2) Reading Music & Notes on the 1st & 2nd Strings 7 Music Reading, 1st & 2nd String Notes & Exercises Ode To Joy (CD #1 Tracks 2,3,4) 14 Jingle Bells (CD #1 Tracks 5,6,7) 15 3) Notes on the 3rd & 4th Strings 16 Ties, Dots, Repeat Signs, Eighth Notes, 3rd & 4th String Notes & Exercises Yankee Doodle (CD #1 Tr. 8,9,10) 21 When The Saints Go Marchin' In (CD #1 Tr. 11,12,13) 21 Aura Lee (CD #1 Tr. 14,15,16) 22 4) Notes on the 5th & 6th Strings 23 5th & 6th String Notes & Exercises, Sharps, Flats, Natural Signs, Am & E Chords Minuet in C (CD #1 Tr. 17,18,19) 26 Simple Gifts (CD #1 Tr. 20,21,22) 28 The Star Spangled Banner (CD #1 Tr. 23,24,25) 29 Minuet in G (CD #1 Tr. 26,27,28) 30 5) Basic Open Chords 31 Open Chords & Chord Exercises 1-3 Morning Has Broken (CD #2 Tr. 2,3,4) 35 America The Beautiful (CD #2 Tr. 5,6,7) 36 6) Minor Seventh & Suspended Chords 37 Minor Seventh & Suspended Chords & Strumming Patterns Scarborough Fair (CD #2 Tr. 8,9,10) 41 Greensleeves (CD #2 Tr. 11,12,13) 42 Island Groove (CD #2 Tr. 14,15,16) 42 7) Barre Chords on the 6th String 43 Half-Steps & Whole Steps, 6"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 4,
      "text": " & Strumming Patterns Scarborough Fair (CD #2 Tr. 8,9,10) 41 Greensleeves (CD #2 Tr. 11,12,13) 42 Island Groove (CD #2 Tr. 14,15,16) 42 7) Barre Chords on the 6th String 43 Half-Steps & Whole Steps, 6th String Barre Chords & Exercises, Major Scales Home on the Range (CD #2 Tr. 17,18,19) 47 Yellow Rose of Texas (CD #2 Tr. 20,21,22) 47 8) Barre Chords on the 5th String 48 5th String Barre Chords & Exercises, Keys & Key Signatures, Relative Major & Minor Jamaica Farewell in F (CD #2 Tr. 23,24,25) 51 Jamaica Farewell in G (CD #2 Tr. 26,27,28) 51 9) The Secret to Great Strumming 52 Strumming Technique, Intervals & Worksheets La Bamba (CD #3 Tr. 2,3,4) 55 The Wabash Cannonball (CD #3 Tr. 5,6,7) 56 Blues in E (CD #3 Tr. 8,9,10) 56 10) Fingerstyle Guitar 57 Technique & Exercises, Merle Travis & Classical House of the Rising Sun (CD #3 Tr. 11,12,13) 61 Canon in D (CD #3 Tr. 14,15,16) 62Table of Contents SESSIONS PAGE 11) Pentatonic Scales 63 Pentatonic Scales, Forms & Pentatonic Patterns A Minor Pentatonic Blues (CD #3 Tr. 17) 66 G Major Pentatonic (CD #3 Tr. 18) 66 Around the Pentatonic World (CD #3 Tr. 19) 66 12) Advanced Chords 67 Two Chords, Major 7th Chords, Minor 11th Chords, Exercise"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 4,
      "text": "r Pentatonic Blues (CD #3 Tr. 17) 66 G Major Pentatonic (CD #3 Tr. 18) 66 Around the Pentatonic World (CD #3 Tr. 19) 66 12) Advanced Chords 67 Two Chords, Major 7th Chords, Minor 11th Chords, Exercises & Chord Substitution Rockin' (CD #3 Tr. 20) 70 Suspended Smooth (CD #3 Tr. 21) 70 Acoustic Groove (CD #3 Tr. 22) 70 13) Playing the Blues 71 Blues Scale, Minor Pentatonic with Blues Notes, Blues Chord Progression, Triads & Worksheets Jammin the Blues (CD #4 Tr. 2,3) 75 Johnny’s E Blues (CD #4 Tr. 4,5) 75 14) Giving Your Playing Some Style 76 Sliding, Bends, Hammer-ons, Pull-offs, Tapping & Harmonics Bending the Blues (CD #4 Tr. 6) 78 Jazz Octaves (CD #4 Tr. 7) 79 The Funky Mute (CD #4 Tr. 8) 79 15) Electric Guitars-The Heart of Rock & Roll 80 Power Chords, Chicken Pickin', Countr y Bends, Arpeggios, Sliding 4ths, Harmonized Major Scale Power Chord Rock (CD #4 Tr.9) 84 Power Riffs (CD #4 Tr.10) 84 16) Adv anced Strumming 85 16th Notes, Strumming & Exercises Rolling Along (CD #4 Tr. 11) 87 A Little Bit Rocky (CD #4 Tr. 12) 88 Electric Funk (CD #4 Tr. 13) 88 17) Going Beyond the First Position 89 3 Note on a String scales, Seventh Chords Triplet Scale Practice (CD #5 Tr. 2,3,4) 91 Pop B"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 4,
      "text": " A Little Bit Rocky (CD #4 Tr. 12) 88 Electric Funk (CD #4 Tr. 13) 88 17) Going Beyond the First Position 89 3 Note on a String scales, Seventh Chords Triplet Scale Practice (CD #5 Tr. 2,3,4) 91 Pop Ballad Groove (CD #5 Tr. 5) 92 ZZ Shuffle (CD #5 Tr. 6) 92 18) Jazz 93 Jazz Chords & Chord Progressions Swingin (CD #5 Tr. 7,8) 96 Jazz Blues (CD #5 Tr. 9) 97 19) Soloing 98 Soloing Techniques & Ear Training Ear Training Exercises (CD #5 Tr. 10,11,12) 100 Stevie's Groove (CD #5 Tr. 13) 101 20) All the Chords You Need To Know 102 Chord Formulas, Abbreviations & Inversions Chord Exercise 1 (CD #5 Tr. 14) 104 Chord Exercise 2 (CD #5 Tr. 15) 105 Friend (CD #5 Tr. 16) 105 Funky Groove (CD #5 Tr. 17) 105"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 5,
      "text": "SESSION 1- Starting Off Right SESSION 1 2 Starting Off RightLearn & Master Guitar “It's easy to play any musical instrument: all you have to do is touch the right key at the right time and the instrument will play itself.” ~ J.S. Bach The Parts of the Guitar There are three main types of guitars, the steel-string acoustic , the nylon string orclassical guitar, and the electric guitar. Bracing your hand gives your hand the needed stability to accurately switch between strings. Although there are many different ways to brace, placing your pinky on the soundboard right below the first string is the most com- mon way. You don't need to press hard.Proper Right Hand Technique Hold the pick between your thumb and first finger. The thumb and pick should form a 90 degree angle. The pick should be sticking out from undernea th the thumb a 1/4 to 1/2 of an inch. Body BridgeFretsHeadstock Pick GuardSound HoleNeck or Fretboard Tuning KeysEstimated Time to Learn These Concepts - 1 Week E A D G B E E A D G B E4 5 63 2 11 2 3 4 5 6 Proper Left Hand Technique Hold your thumb on the back of the fingerboard on the upper side of the neck. Be careful not to put your thumb on top of the neck. Your wrist"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 5,
      "text": " A D G B E4 5 63 2 11 2 3 4 5 6 Proper Left Hand Technique Hold your thumb on the back of the fingerboard on the upper side of the neck. Be careful not to put your thumb on top of the neck. Your wrist should be lo w with some air space between your palm and the neck of the guitar. Your four fingers should be evenly spaced. Notice how the middle two fingers are coming straight onto the fretboard. Your first and fourth fingers are cur ved slightly toward the frets. The Names of the Strings The six strings of a guitar are numbered from first to sixth starting on the thinnest string and counting up to the thick- est string. The strings also have letter names that corre- spond to each string. Memorize the names of your strings."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 6,
      "text": "Tuning the Guitar Your guitar will need to be tuned before playing. Tuning involves tightening or loosening the strings to raise or lower the pitch to match a constant pitch. There are three main ways to tune your guitar. You can tune your guitar by using an electronic tuner, or you can tune by “ear” using the other strings of the guitar, or you can tune to a keyboard. Tuning with an Electric Tuner Many electric tuners come with a built in microphone for use with an acoustic gui- tar. If you are using an electric guitar you can plug your instrument cable directly into the tuner. According to the directions of your specific tuner, it will display whether you need to tighten or loosen the string in order to be in tune. Electric tuners are an easy to use, fast, and accurate way to tune your guitar. Tuning by Ear You can also tune your guitar by listening carefully to the other strings and tuning each string to the others. Here is the process. ·Put your finger on the fifth fret of the sixth string. Now, play the sixth string and the open fifth string. Listen to the two pitches. If the open fifth string sounds lower than the sixth string then tighten the fifth string tuning key until th"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 6,
      "text": "h string. Now, play the sixth string and the open fifth string. Listen to the two pitches. If the open fifth string sounds lower than the sixth string then tighten the fifth string tuning key until the two notes ma tch. If the open fifth string sounds higher than the first note then loosen the fifth string tuning key . You al ways adjust the tuning keys of the open string, not the string tha t you are fretting. ·Next, play the fifth fret on the fifth string and the open fourth string undernea th it. Listen to the two pitches care - fully and adjust the open fourth string accordingly. ·Play the fourth string at the fifth fret. Listen and tune the open third string to it. ·To tune the second string, play the third string at the fourth fret and tune the open second string to it. This is the only string that does not use the fifth fret as the reference. ·Lastly, play the second string fingered back at the fifth fret and tune the open first string to it. Tuning to a Keyboard You can also tune your guitar to a keyboard or piano. The open strings of a guitar correspond to certain notes on a keyboard. SESSION 1 3 Starting Off RightLearn & Master Guitar E A D G B EB6th string 5th str ing 4t"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 6,
      "text": "ne your guitar to a keyboard or piano. The open strings of a guitar correspond to certain notes on a keyboard. SESSION 1 3 Starting Off RightLearn & Master Guitar E A D G B EB6th string 5th str ing 4th string 3rd str ing 2nd string 1st string 5th Fret 1st string6th string5th string4th string3rd string2nd stringE A D GB EMiddle CA D G E"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 7,
      "text": "How to Read Guitar Tablature TABLATURE is a type of musical notation that guitarists have developed to describe what strings on the guitar are being played at any point and what frets need to be fingered. Figure 1 Figure 2 Figure 3 The Tablature Staff Single Notes in Tablature Chords in Tablature Finger Exercises These finger exercises are designed to build coordination between your right and left hand. Proper picking and fingering hand coordina tion is vital to good controlled guitar playing. Directions: Play each finger pattern on each string. Start on the first string, then the second, third, etc... Although a little dif- ficult at first, these exercises quickly build the motor skill control needed to play the guitar effectively. Practice with an even, steady rhythm. The goal is control, not speed. Right Hand Picking: Down-Up-Down-Up Repeat for all Strings Right Hand Picking: Down-Up Repea t for all Strings Right Hand Picking: All Down Repeat for all Strings SESSION 1 4 Starting Off RightLearn & Master Guitar T A B1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 4 3 3 3 3 2 2 2 2 1 1 1 1 1. T A B1 1 2 2 3 3 4 4 3 3 2 2 1 1 2. T A B1234321 3.1332100 The numbers tell you which frets you need to put "
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 7,
      "text": " RightLearn & Master Guitar T A B1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 4 3 3 3 3 2 2 2 2 1 1 1 1 1. T A B1 1 2 2 3 3 4 4 3 3 2 2 1 1 2. T A B1234321 3.1332100 The numbers tell you which frets you need to put your fingers on and which strings to use. In this example you would play the first string fretted at the first fret. The next note would be the first string at the third fret. Then, the second string a t the third fret and so on.In this example you would play all of the strings at the same time. The first, second and sixth strings would be open. Your first finger would fret the first fret on the third string. The fourth and fifth strings would have fingers on the second frets of each string.Strings 1st - E 2nd - B 3rd - G 4th - D 5th - A 6th - ET A B The 6 lines correspond to the 6 strings on your guitar.001220T A BT A B"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 8,
      "text": "Repeat for all Strings Repeat for all Strings How to Read Chord Blocks CHORD BLOCKS are diagrams that tell you how a chord is to be played. They include information about which frets are to be played by which fingers and which strings are to be played or not. Session 1 Assignment SESSION 1 5 Starting Off RightLearn & Master GuitarT A B1 2 1 3 1 4 1 3 1 2 1 4. T A B4 3 4 2 4 1 4 3 4 2 4 15. Strings 6th 5th 4th 3rd 2nd 1st E A D G B E Nut 1st Fret 2nd Fret 3rd Fret 4th Fret Chord Name C Don’t Play String1 2 3Put 2nd Finger on 4th String at 2nd Fret Put 3rd Finger on 5th String at 3nd FretPut 1st Finger on 2nd String at 1st FretPlay Strings Open · An open circle means play the appropriate string open. · A filled circle means play the note on that particular fret and string. · An X means to not play that string. · Do all finger exercises on all of the strings daily until there is no soreness in fingers and they can be played without hesitation. (pages 4-5) · Memorize the names of the strings. (page 2) · Practice the C & G7 chord exercises. Each note should sound out clearly. Try not to hesitate between chords. (page 6)"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 9,
      "text": "The C and G7 Chords The first two chords to be learned are the C and G7. Form and play each chord. The numbers tell you which fingers to use. The C chord uses only 5 strings, so be careful not to play the sixth string. The G7 uses all six strings. Chord Exercises SESSION 1 6 Starting Off RightLearn & Master Guitar 1.C G7 C G7 C 3. C G7 C G7 C Strum chord for each slash. 1 2 3 1 2 37C G 2.C G7 C Strum chord for each slash. Practicing is the Only Way to Improve In order to make good progress, you should practice at least 15 minutes a day. If you can do 30 minutes, that would be great. You will only improve with effort. Consistent daily practice yields better results faster."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 10,
      "text": "How to Read Music Music is written on a STAFF which has 5 lines and 4 spaces. Music is read from left to right just like you would read a book. Where the note is on the staff tells you how high it is or how low it is in pitch. The note can be on a line or a space. Each line of the staff has a letter name that goes with it. The musical alphabet goes from A to G. The Music Staff Notes on a Line Notes on a Space Rhythm There are four main types of notes tha t vary according to how long they are played. Types of Notes SESSION 2 - Reading Music &Notes on the1st&2ndStrings SESSION 2 7 Reading Music & Notes on the 1st & 2nd StringsLearn & Master Guitar“Music is what feelings sound like.” ~ AnonymousEstimated Time to Learn These Concepts - 2 Weeks 5th Line 4th Line 3rd Line 2nd Line 1st Line 4th Space 3rd Space 2nd Space 1st SpaceHigh Note Low Note 5th Line 4th Line 3rd Line 2nd Line 1st Line Remember them by learning: Every Good Boy Does FineE The notes on the spaces conveniently spell the word FACE. GBDF 4th Space 3rd Space 2nd Space 1st Space WHOLE NOTE 4 BeatsHALF NOTE 2 BeatsQUARTER NOTE 1 BeatEIGHTH NOTE 1/2 BeatFACE"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 11,
      "text": "Types of Rests Music is made up of sound and silence. The notes tell you when to play and the rests tell you when not to play. Treble Clef ,Time Signatur es, Barlines & Measures The Notes on the E or First String SESSION 2 8 Reading Music & Notes on the 1st & 2nd StringsLearn & Master Guitar WHOLE REST 4 BeatsHALF REST 2 BeatsQUARTER REST 1 BeatEIGHTH REST 1/2 Beat TOP NUMBER = How Many Beats in each Measure BOTTOM NUMBER = What Kind of Note Gets the Bea t Time SignatureTreble Clef Barline BarlineMeasure Measure Measure Ending Barline E F G First String OpenFirst String First Finger First FretFirst String Third Finger Third Fret1 3"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 12,
      "text": "First String Exercises Instructions: Write above each note the letter name of the note. Play each exercise using the correct finger for each note. SESSION 2 9 Reading Music & Notes on the 1st & 2nd StringsLearn & Master Guitar 1.EF G Half Notes get 2 Beats.2. Quarter Notes get 1 Beat.3. 4.Whole Notes get 4 Beats."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 13,
      "text": "More First String Exercises Instructions: These exercises do not have the tablature included. Try to read the music and play slowly. Write in the notes if needed. Play each exercise. Remember to use the correct finger for each note. The Notes on the B or Second String SESSION 2 10 Reading Music & Notes on the 1st & 2nd StringsLearn & Master Guitar 3. 4. 5. 2. Continue to next line. Second String OpenSecond String First Finger First FretSecond String Third Finger Third Fret B C D 1. 1 3"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 14,
      "text": "Second String Exercises Instructions: Write above each note the letter name of the note. Play each exercise using the correct finger for each note. Practice slowly. Remember to give each note the proper number of beats. More Second String Exercises Instructions: Try to read the music and play slowly in an even rhythm. Write in the notes if needed. Play through each exercise until there is no hesitation between notes. SESSION 2 11 Reading Music & Notes on the 1st & 2nd StringsLearn & Master Guitar 1. 2. 3. 4.BC D 1."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 15,
      "text": "2. 3. 4. 1.First and Second String Exercises Instructions: Play each exercise slowly in an even, steady rhythm. Be careful to use the correct finger for each note. SESSION 2 12 Reading Music & Notes on the 1st & 2nd StringsLearn & Master Guitar 5. 2. 3."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 16,
      "text": "More First and Second String Exercises Instructions: Try to read the music and play slowly in an even rhythm. Write in the notes if needed. Play through each exercise until there is no hesitation between notes. Session 2 Assignment SESSION 2 13 Reading Music & Notes on the 1st & 2nd StringsLearn & Master Guitar 4. 1. 2. 3.Quarter rest, 1 Beat. Half rest, 2 Beats. 4. 5. 6. · Play through all of the First and Second String Exercises several times. (pages 9-13) · Play Ode To Joy, both notes and chords. Write in letter names of notes. (page 14) · Play Jingle Bells, both notes and chords. Write in letter names of notes. (page 15)"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 17,
      "text": "Ode to Joy Ludwig van Beethoven (1770-1827) SESSION 2 14 Reading Music & Notes on the 1st & 2nd StringsLearn & Master Guitar Jam Along CD #1 Track 2 - Slow Version Track 3 - Medium Version Track 4 - Fast VersionTheme from Symphony #9 Play the notes then practice strumming the correct chord for each beat. If a measure does not have a chord change over it then continue to play the previous chord until the chord changes."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 18,
      "text": "SESSION 2 15 Reading Music & Notes on the 1st & 2nd StringsLearn & Master GuitarJingle BellsJam Along CD #1 Track 5 - Slow Version Track 6 - Medium Version Track 7 - Fast Version ."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 19,
      "text": "SESSION 3 - Notes on the 3rd & 4th Strings Ties A TIE combines the rhythmic values of two notes and is represented by a curved line between two notes of the same pitch. The first note is played for the duration of both notes and the second note is not played. Dots A DOT following a note changes the rhythmic value of the note. DOTS add one half of whatever note value they are attached to. Repeat Signs A REPEAT SIGN is a double bar line with two dots. It means to repeat a section of music. You would repeat back to where a previous backwards repeat sign was or to the beginning of the song, whichever comes first. SESSION 3 16 Notes on the 3rd & 4th StringsLearn & Master Guitar “I would teach children music, physics, and philosophy; but most importantly music, for in the patterns of music and all the arts are the keys of learning.” ~ PlatoEstimated Time to Learn These Concepts - 2 Weeks 1. 2. DOTTED HALF NOTE 3 Beats (2+1)DOTTED WHOLE NOTE 6 Beats (4+2) DOTTED QUARTER NOTE 1 1/2 Beats (1+1/2) Repeat bac k to beginning Repeat these two measures then proceed on"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 20,
      "text": "Eighth Notes An EIGHTH NOTE receives 1/2 a beat so it takes two of them to make 1 beat. If you have several eighth notes together, they are grouped together by a beam. Eighth Note Exercises Instructions: Play slowly in an even rhythm. Write in the notes if needed. Play through each exercise. Try not to hesitate between notes. When you have several eighth notes of the same pitch in a row, then alternate your pick- ing (Down-Up-Down-Up). SESSION 3 17 Notes on the 3rd & 4th StringsLearn & Master GuitarEIGHTH NOTE EIGHTH NOTES BEAMED TOGETHER 1. 2. 3. 4. 5. 6."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 21,
      "text": "3.The Notes on the G or Third String Third String Exer cises Instructions: Play each exercise using the correct finger for each note. Write in the notes if needed. SESSION 3 18 Notes on the 3rd & 4th StringsLearn & Master Guitar Third String OpenThird String Second Finger Second Fret 1. 2. G A 2"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 22,
      "text": "The Notes on the D or Fourth String Fourth String Exercises Instructions: Play each exercise using the correct finger for each note. Write in the notes if needed. SESSION 3 19 Notes on the 3rd & 4th StringsLearn & Master Guitar 4. D E F Fourth String OpenFourth String Second Finger Second FretFourth String Third Finger Third Fret 1.2 3"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 23,
      "text": "Session 3 Assignment SESSION 3 20 Notes on the 3rd & 4th StringsLearn & Master Guitar 2. 3. 4. · Play through the Eighth Note Exercises until they can be played without hesitation. (page 17) · Play through all of the Third and Fourth String Exercises several times. (pages 18-20) · Play Yankee Doodle, both notes and chords. Write in letter names if you need to. (page 21) · Play When The Saints Go Marchin’ In. (page 21) · Play Aura Lee. (page 22)"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 24,
      "text": "Yankee Doodle When The Saints Go Mar chin’ In SESSION 3 21 Notes on the 3rd & 4th StringsLearn & Master GuitarJam Along CD #1 Track 8 - Slow Version Track 9 - Medium Version Track 10 - Fast Version Jam Along CD #1 Track 11 - Slow Version Track 12 - Medium Version Track 13 - Fast Version This song includes chords that are covered in Session 5 (page 31)."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 25,
      "text": "Aura Lee SESSION 3 22 Notes on the 3rd & 4th StringsLearn & Master Guitar This song includes chords that are covered in Session 5 (page 31).Jam Along CD #1 Track 14 - Slow Version Track 15 - Medium Version Track 16 - Fast Version"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 26,
      "text": "The Notes on the A or Fifth String SESSION 4 23 Notes on the 5th & 6th StringsLearn & Master Guitar“Playing guitar is an endless process of running out of fingers.” ~ Harvey Reid, Fingerstyle Guitarist Estimated Time to Learn These Concepts - 4 Weeks Fifth String OpenFifth String Second Finger Second Fr etFifth String Third Finger Third Fret A B CSESSION 4- Notes on the 5th & 6th Strings 2 3"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 27,
      "text": "The Notes on the E or Sixth String Fifth and Sixth String Exercises Instructions: Play each exercise using the correct finger for each note. Write in the notes if needed. SESSION 4 24 Notes on the 5th & 6th StringsLearn & Master Guitar Sixth String OpenSixth String First Finger First FretSixth String Third Finger Third Fret 1. 2. E F G 1 3"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 28,
      "text": "Notes in the First Position C Major Scale Example SESSION 4 25 Notes on the 5th & 6th StringsLearn & Master Guitar3. 4. E F G A B C D E F G A B C D E F G 6th String 5th String 4th String 3rd String 2nd String 1st String"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 29,
      "text": "Minuet in C J.S. Bach (1685-1750) Sharps, Flats, and Natural Signs Sharps SHARPS raise up an y note one half-step or one fret. The sharp sign a ppears before the note tha t is to be sharped. Remember to use the correct finger for each fret. Flats FLATS lower any note one half-step or one fret. Open String Flat Rule: When flatting an open string go to the next lower string and play the fourth fret with your fourth finger. The one exception to this rule is the Bb on the third string third fret. SESSION 4 26 Notes on the 5th & 6th StringsLearn & Master Guitar Jam Along CD #1 Track 17 - Slow Version Track 18 - Medium Version Track 19 - Fast Version"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 30,
      "text": "A sharp or a flat affects not just the note it is by, but every note of the same name that follows it for the entire measure. Example Naturals AN A T U R A LS I G N c a n c e l s o u t a p r e v i o u s l y u s e d s h a r p o r f l a t a n d r e s t o r e s i t t o i t s n o r m a l p o s i t i o n . The A Minor and E Chor d Chord Exercises SESSION 4 27 Notes on the 5th & 6th StringsLearn & Master Guitar A E1 32321 1. m 2."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 31,
      "text": "Session 4 Assignment Simple Gifts SESSION 4 28 Notes on the 5th & 6th StringsLearn & Master Guitar 3. Jam Along CD #1 Track 20 - Slow Version Track 21 - Medium Version Track 22 - Fast VersionAll F's are sharped throughout the whole song. · Play through all of the Fifth and Sixth String Exercises several times. (pages 24-25) · Play through and memorize the Notes in the First Position. (pages 25) · Play Minuet in C. (page 26) · Play Simple Gifts. (page 28) · Play The Star Spangled Banner .(page 29) · Play Minuet in G. (page 30) Key Signa ture = F# 13"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 32,
      "text": "SESSION 4 29 Notes on the 5th & 6th StringsLearn & Master GuitarThe Star Spangled Banner Francis Scott Key & John Stafford SmithJam Along CD #1 Track 23 - Slow Version Track 24 - Medium Version Track 25 - Fast Version"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 33,
      "text": "Minuet in G J.S. Bach (1685-1750) SESSION 4 30 Notes on the 5th & 6th StringsLearn & Master Guitar Jam Along CD #1 Track 26 - Slow Version Track 27 - Medium Version Track 28 - Fast Version Key Signature = F# All F's are sharped throughout the whole song."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 34,
      "text": "SESSION 5- Basic Open Chords SESSION 5 31 Basic Open ChordsLearn & Master Guitar“Being good is not about playing fast, it's about thinking fast.” ~ Anonymous 1 2 3 1 2 3 1 231 231 2 3 42 31 2 3 32 1 2 3 41 2 31 2 3 4 432 2 31 2C C DD D EE E GG B AA A7 7 7 7 7 mmm 7Estimated Time to Learn These Concepts - 3 Weeks"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 35,
      "text": "Basic Open Chord Exercises - 1 Learning the C, G7, Am, E, & Dm chords SESSION 5 32 Basic Open ChordsLearn & Master Guitar 1. 2. 3. 4. 5. 6.This chord uses 5 strings. This chord uses 6 strings. Strum chord for each beat. 6 string chord 4 string chord5 string chord Strum chord down & up for each eighth note pair.C G7 Am E CA m Am Dm Dm G7 C Am Dm G7"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 36,
      "text": "Basic Open Chord Exercises - 2 Learning the G, D7, Em, & B7 chords SESSION 5 33 Basic Open ChordsLearn & Master Guitar 6 string chord 4 string chord 5 string chord 6 string chord Use your finger tips to get all of the notes to sound properly. Watch your rhythm carefully!G D7 C D7 B7 Em Am B7 GE m G D7 Em B71. 2. 3. 4. 5. 6."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 37,
      "text": "Basic Open Chord Exercises - 3 Learning the D, C7, A, A7 & E7 chords SESSION 5 34 Basic Open ChordsLearn & Master Guitar 4 string chord 5 string chord 5 string chord 5 string chordDA A7 A7 A DC7 Em Em Em Am G7 Dm CEB7 E7 G C7 D71. 2. 3. 4. 5. 6.6 string chord Change chords quickly to not break the rhythm."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 38,
      "text": "Session 5 Assignment Morning Has Brok en SESSION 5 35 Basic Open ChordsLearn & Master Guitar Jam Along CD #2 Track 2 - Slow Version Track 3 - Medium Version Track 4 - Fast Version · Memorize the Basic Open Chord Forms. (page 31) · Play through Basic Chord Exercises 1, 2 & 3. (pages 32-34) · Play Morning Has Broken, both notes and chords. (page 35) · Play America the Beautiful. (page 36)"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 39,
      "text": "America The Beautiful Samuel A. Ward SESSION 5 36 Basic Open ChordsLearn & Master Guitar Jam Along CD #2 Track 5 - Slow Version Track 6 - Medium Version Track 7 - Fast VersionKey Signature = F# All F's are sharped throughout the whole song."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 40,
      "text": "SESSION 6 - Minor Seventh & Suspended Chords Open Minor Seventh Chords Open Suspended Chords Minor Seventh Chord Exercises Practicing the Am7, Dm7, & Em7 chords.Learn & Master Guitar“If music be the food of love, play on.” ~ William Shakespeare 1 2 1 21 1 34 1 42 Alternate Fingering 1 3 42 3434 2A7m D7m E7m E7m Asus Dsus Esus SESSION 6 37 Minor Sev enth & Suspended ChordsEstimated Time to Learn These Concepts - 2 Weeks 1. 2. 3."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 41,
      "text": "Strumming with Ties Exercises Suspended Chord Exercises Practicing the Asus, Dsus, & Esus chords. Three Basic Strumming Patter ns SESSION 6 38 Minor Sev enth & Suspended ChordsLearn & Master Guitar 1. 2. Strumming Pattern Without Tie Strumming Pattern With Tie Down Down Up Down Down Down Up Down Down Up Down Up Down Down Down Up Up Down 3.Down Up Down Up Down Down Up Down Up 1. 2. 3. 1. 2. 3."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 42,
      "text": "Open Chords in the Key of C Practicing the C, Am, Am7, Dm, Dm7, G7, G, Em and Em7 chords SESSION 6 39 Minor Sev enth & Suspended ChordsLearn & Master Guitar 1. 2. 3. 4. 5. 6."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 43,
      "text": "Open Chords in the Key of G Practicing the G, Am, Am7, C, D, D7, Dsus, Em & Em7 chords Open Chords in the Key of D Practicing the D, D7, Em, Em7, G, G7, A, A7 and Asus chords SESSION 6 40 Minor Sev enth & Suspended ChordsLearn & Master Guitar 1. 2. 3. 4. 5. 6. 1. 2. 3."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 44,
      "text": "Session 6 Assignment Scarborough Fair SESSION 6 41 Minor Sev enth & Suspended ChordsLearn & Master Guitar 4. 5. 6. · Memorize the Open Minor Seventh and Suspended Chord F orms. (page 37) · Play through the Chord Exercises in the Key of C, G, and D. (pages 39-41) · Play Scarborough F air, both notes and chords. (page 41) · Play Greensleeves, both notes and chords. (page 42) · Play Island Groove, both notes and chords. Use the given strumming pattern. (page 42) Jam Along CD #2 Track 8 - Slow Version Track 9 - Medium Version Track 10 - Fast Version"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 45,
      "text": "Greensleeves Island Groo ve SESSION 6 42 Minor Sev enth & Suspended ChordsLearn & Master Guitar Jam Along CD #2 Track 11 - Slow Version Track 12 - Medium Version Track 13 - Fast Version Am7 D7 G Em Am7 Em Am7 D7 G Em Am E7 Am C G Em Am7 Em C G Am E7 Am Jam Along CD #2 Track 14 - Slow Version Track 15 - Medium Version Track 16 - Fast Version"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 46,
      "text": "Half-Steps & Whole Steps A HALF-STEP is the distance from any note to the very next note. A WHOLE STEP is two half-steps put together. On a guitar, each fret is a half-step apart. On a piano, each key, whether white or black, is a half-step apart from the next key. Even though some white keys on a piano are next to each other, often they will have a black key in between them. The distance from the first white key to the in-between black key is a half-step. From a white key to another white key, with a black key in between, is a whole step. The only naturally occurring half-steps are between E to F and B to C. Naturally occurring means that without using sharps or flats the intervals of E to F and B to C are the only adjacent pairs that are half-steps. Between these two intervals there is only a half-step difference. All of the other pairs of adjacent notes, without sharps or flats involved, are whole steps. On our keyboard there are no black keys between E - F and B - C. On a guitar, each of these two pairs of notes are side by side with no note in between them. Notes on the Sixth String SESSION 7 43 Barre Chords on the 6th StringLearn & Master GuitarSESSION 7 - Barre Chords on the"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 46,
      "text": "ach of these two pairs of notes are side by side with no note in between them. Notes on the Sixth String SESSION 7 43 Barre Chords on the 6th StringLearn & Master GuitarSESSION 7 - Barre Chords on the 6th String “If I were not a physicist, I would probably be a musician. I often think in music. I live my daydreams in music. I see my life in terms of music. . . . I get most . . . in life out of music.” ~ Albert EinsteinF# orGb E F G A B C D E G# orAb A# orBb C# orDb D# orEb E D C B A G F 12th Fret Estimated Time to Learn These Concepts - 2-3 Weeks"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 47,
      "text": "Sixth String Barre Chords The “1fr.” means to play that chord starting at the first fret. The arcs mean to cover all of the strings with one fin- ger. When you use one finger to cover more than one string it is called a BARRE. The note with a diamond is the root of the chord and the note tha t you will pivot from to move the chord into different keys. Sixth String Barr e Chor d Exer cises Learning the moveable F, F7, Fm, Fm7 & Fsus SESSION 7 44 Barre Chords on the 6th StringLearn & Master Guitar 21fr. 1fr. 2 3 3 41fr. 1fr. 1fr.F7m FF F m7Fsus 1. 2. 3. 4. 5. 6.1 1 11111 11 1 11 1 11 1111 1 2 34 43 3"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 48,
      "text": "Major Scales MAJOR SCALES are the building blocks for all of music. Major scales are built on a specific pattern of half-step and whole-step intervals. The pattern for a major scale is Whole-step, Whole-step, Half-step, Whole-step, Whole-step, Whole-step, Half-step. Starting on any note, if you follow this pattern you will build a major scale in the note's key. Directions: Fill in major scale notes following the interval pattern. Determine the number of sharps or flats. List sharps or flats in order. I have filled in some of the spaces for you. Check your answers at www.LearnandMasterGuitar.com/answerkey Whole Whole Half Whole Whole Whole Half What are they? C _D_ _E_ ___ ___ ___ ___ ___ none _________________ The following scales all contain SHARPS. G_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ F # _ _ _ _ _ _ _ _ _ _ F # , _ _ _ _ _ _ _ _ _ _ _ _ _ D ___ _F#____ ___ ___ _C#_ ___ _____ __F#,C#,_________ A_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 3 # ' s _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ E_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ B ___ ___ ___ ___ ___ ___ ___ _____ _________________ F# ___ ___ ___ ___ ___ E#_ ___ _____ _________________ The followin"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 48,
      "text": " _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ B ___ ___ ___ ___ ___ ___ ___ _____ _________________ F# ___ ___ ___ ___ ___ E#_ ___ _____ _________________ The following scales all contain FLA TS. F ___ ___ _Bb_ ___ ___ ___ ___ _____ _________________ Bb ___ ___ ___ ___ ___ ___ ___ _____ _________________ Eb ___ ___ _Ab ___ ___ ___ ___ _3 b's _________________ Ab ___ ___ ___ ___ ___ ___ ___ _____ _Bb,Eb,Ab,Db_____ Db ___ ___ ___ ___ ___ ___ ___ _____ _________________ Gb ___ ___ _Cb ___ ___ ___ ___ _____ _________________ SESSION 7 45 Barre Chords on the 6th StringLearn & Master Guitar How many #'s or b's?"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 49,
      "text": "Major Scale Table Major Scales are the foundation upon which all of the upcoming theory is going to be built. Just like multiplica- tion tables need to be memorized, major scales and the key signatures that they generate have to be learned and memorized. KEY SIGNATURES are the pattern of sharps or flats that each major scale generates. Directions: Fill in the major scale notes on the following table. Remember, the naturally occurring half-steps are between E-F and B-C. Check your answers at www.LearnandMasterGuitar.com/answerkey Session 7 Assignment SESSION 7 46 Barre Chords on the 6th StringLearn & Master Guitar C F Bb Eb Ab Db Gb F# B E A D GD A Eb Bb F C Gb E# G# B D F# AWhole Step Whole Step Whole Step Whole Step Whole Step Half StepHalf Step · Memorize the Notes on the Sixth String. (page 43) · Memorize the 6th String Barre Chord Forms. (page 44) · Play through 6th String Barre Chord Exercises. Make sure each chord is sounding clear and that the chords change at the right time. (page 44) · Play Home on the Range, both notes and chords. Try to use all barre chords. (page 47) · Play Yellow Rose of Texas, both notes and chords. (page 47) · Complete the Major Scale and the Major S"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 49,
      "text": "age 44) · Play Home on the Range, both notes and chords. Try to use all barre chords. (page 47) · Play Yellow Rose of Texas, both notes and chords. (page 47) · Complete the Major Scale and the Major Scale Table Worksheets. (pages 45-46)"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 50,
      "text": "Home on the Range Practice using a mixture of open and barre chords and then practice using all barre chords. Yellow Rose of Texas SESSION 7 47 Barre Chords on the 6th StringLearn & Master GuitarJam Along CD #2 Track 17 - Slow Version Track 18 - Medium Version Track 19 - Fast Version Jam Along CD #2 Track 20 - Slow Version Track 21 - Medium Version Track 22 - Fast Version"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 51,
      "text": "SESSION 8 48 Barre Chords on the 5th StringLearn & Master Guitar SESSION 8 - Barre Chords on the 5th String “Music should be something that makes you gotta move, inside or outside.” ~ Elvis Presley A G F E D C B 12th Fret B7Bsus BB m Bm7B 23433 33423 43243 1. 2. 3.1 1 1 Alternate Fingering1 1 1Estimated Time to Learn These Concepts - 2-3 Weeks 1 11 11 1 1 1 Notes on the Fifth String Fifth String Barr e Chor ds Fifth String Barre Chord Exercises Learning the moveable B, Bm, B7, Bm7 & Bsus"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 52,
      "text": "Keys & Key Signatures KEY SIGNATURES are derived from the flats or sharps found in a major scale. Each major scale produces a unique combina tion of sharps or fla ts as its key signa ture. A key signature will never have both sharps and flats in it simul- taneously. The order of the sharps and flats in a key signature come in a predictable sequence. The key signature order of sharps is F#, C#, G#, D#, A#, E#. The order of flats is Bb, Eb, Ab, Db, Gb, Cb. Directions: Using your major scales, determine the proper key and list the key signature. Put sharps or flats in the proper order. Check your ans wers a t www .www .LearnandMasterGuitar .com/answerkey 1) What key has 4 flats in its key signature? ______ What are they? ____ ____ ____ ____ 2) What key has 3 sharps in its key signature? _____ What are they? ____ ____ ____ 3) What key has 2 flats in its key signature? _____ What are they? ____ ____ 4) What key has 4 sharps in its key signature? ______ What are they? ____ ____ ____ ____ 5) In the key of G, what note(s) are sharped/flatted? ______________ 6) In the key of F, what note(s) are sharped/flatted? ______________ 7) In the key of C, what note(s) are sharped/flatted? ___________"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 52,
      "text": "In the key of G, what note(s) are sharped/flatted? ______________ 6) In the key of F, what note(s) are sharped/flatted? ______________ 7) In the key of C, what note(s) are sharped/flatted? ______________ 8) In the key of Db, what note(s) are sharped/fla tted? ______________ 9) In the key of B, what note(s) are sharped/fla tted? ______________ 10) What key has 2 sharps in its key signature? _____ What are they? ____ ____ 11) What key has 5 sharps in its key signature? _____ What are they? ____ ____ ____ ____ ____ SESSION 8 49 Barre Chords on the 5th StringLearn & Master Guitar 4. 5. 6. 7."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 53,
      "text": "12) If the key signature has a Bb and an Eb in it, what's the key? _______ 13) If the key signature has an F#, C#, G#, and a D#, what's the key? _______ 14) If the key signa ture is F# and C#, what's the key? _______ 15) If the key signature is Bb, Eb, Ab, and Db, what's the key? _______ 16) If the key signature is F#, C#, G#, D#, A#, and E#, what's the key? _______ Relative Major and Minor Scales There is a unique rela tionship between the keys of major scales and minor scales. This rela tionship is called RELATIVE. Relative major and minor scales share the same key signatures. To derive a relative minor scale: Go to the 6th step of the major scale and build an 8 note scale in tha t key.You can get to the 6th step of an y major scale by either going up six steps from the root or do wn two steps. So,the C major scale and the A minor scale share the same key signa ture. Therefore A is the relative minor of C major and conversely C is the relative major of A minor. Session 8 Assignment SESSION 8 50 Barre Chords on the 5th StringLearn & Master Guitar Theory Tips & Tricks...How to determine a key by looking at the key signature. For Keys with Sharps: The key is one half-step up from th"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 53,
      "text": "ESSION 8 50 Barre Chords on the 5th StringLearn & Master Guitar Theory Tips & Tricks...How to determine a key by looking at the key signature. For Keys with Sharps: The key is one half-step up from the last sharp in the key signature. For example, if the key signature is F#, C#, G#, then the last sharp is G#. One half-step up from G# is A. The key is A. For Keys with Flats: The key is the next to last flat in the key signature. For example, if the key signature is Bb, Eb, Ab, the next to last flat is Eb. So, the key is Eb. C Major Scale A Minor Scale D Minor ScaleF Major Scale · Memorize the 5th String Barre Chord Forms. (page 48) · Play through 5th String Barre Chord Exercises. Make sure each chord is sounding clear and that the chords change at the right time. (pages 48-49) · Play Jamaica F arewell in F ,both notes and chords. Use 6th and 5th string barre chords. (page 51) · Play Jamaica F arewell in G, both notes and chords. Use 6th and 5th string barre chords. (page 51) · Complete the Keys & Key Signatures Worksheet. (pages 49-50)"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 54,
      "text": "Jamaica Farewell (in F) Jamaica Far ewell (in G) SESSION 8 51 Barre Chords on the 5th StringLearn & Master GuitarJam Along CD #2 Track 23 - Slow Version Track 24 - Medium Version Track 25 - Fast Version Jam Along CD #2 Track 26 - Slow Version Track 27 - Medium Version Track 28 - Fast Version G C D7 G C D7 G C D7 G C G D G"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 55,
      "text": "Good Strumming Technique · Hold your pick firmly. · Keep your wrist loose. · Strum the accurate number of strings on the down stroke but on the up stroke just hit a few of the strings. · Strum smooth, even strums with no hesitations. THE SECRET TO GREAT STRUMMING - KEEP YOUR HAND GOING! Strumming with Eighth Notes Strumming with Eighth Notes & Ties SESSION 9 52 The Secret to Great StrummingLearn & Master Guitar SESSION 9 - The Secret to Great Strumming “Music produces a kind of pleasure which human nature cannot do without.” ~ Confucius 1. 2. 3. 1. 2.Estimated Time to Learn These Concepts - 2 Weeks"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 56,
      "text": "Diatonic Intervals INTERVALS are the distance between two notes. DIATONIC refers to intervals that are found within the major scale. You will be given the key and a specific scale step and then you will need to derive the specific note. Here are some examples … 1) In C, what is the 3rd step? The C scale is C - D - E- F - G - A - B - C. The 3rd step is E. 2) In A, what is the 6th? The A scale is A - B - C# - D - E - F#- G# - A. The 6th step is F#. Diatonic Intervals Worksheet Directions: Fill in the correct note corresponding to the dia tonic inter val asked for . Check your ans wers a t www .LearnandMasterGuitar .com/answerkey SESSION 9 53 The Secret to Great StrummingLearn & Master Guitar3. 4. 1) In C, what is the 4th ? __F__ 2) In F, what is the 6th ? __D__ 3) In Ab, what is the 4th ? _____ 4) The 4th in D is _____ 5) The 6th in E is _____ 6) In D, what is the 6th ? _____ 7) In G, what is the 7th ? _____ 8) In Db, what is the 2nd ? _____ 9) The 2nd in F# is _____ 10) The 3rd in D is _____11) In G, what is the 5th ? _____ 12) In D, what is the 7th ? _____ 13) In A, what is the 3rd ? _____ 14) The 6th in Gb is _____ 15) The 7th in Db is _____ 16) In Bb, what is the 6th ? _____ 17) "
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 56,
      "text": "_____11) In G, what is the 5th ? _____ 12) In D, what is the 7th ? _____ 13) In A, what is the 3rd ? _____ 14) The 6th in Gb is _____ 15) The 7th in Db is _____ 16) In Bb, what is the 6th ? _____ 17) In F, what is the 7th ? _____ 18) The 2nd in B is _____ 19) The 3rd in F# is _____ 20) The 3rd in Gb is _____"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 57,
      "text": "Harmonic Intervals HARMONIC INTERVALS are intervals that have been raised or lowered a half step from their natural major scale (diatonic) position. The intervals within a major scale are divided into two groups; MAJOR and PERFECT. The 2nd, 3rd, 6th, and 7th are referred to as MAJOR INTERVALS. The 4th, 5th, and octave are referred to as PERFECT INTERVALS. For MAJOR INTERVALS - If a major interval (2nd, 3rd, 6th & 7th) is lowered by a half step it is called MINOR. If a major interval is raised a half step it is called AUGMENTED. For PERFECT INTERVALS - If a perfect interval (4th, 5th & Octave) is lowered a half step it is called DIMINISHED. If it is raised a half step then it is also called AUGMENTED. ENHARMONIC notes are two notes tha t have the same pitch but two different names. Double Sharps and Double Flats If I need to lower an already flatted note, I just add another flat until I get to the pitch I need. For example, if you were asked to find the minor 3rd in Gb, you would solve the problem as follows. The 3rd in the key of Gb is a Bb. So to make it minor we would need to lo wer the Bb an additional half step making it a Bbb. So the correct answer would be Bbb or B “double fl"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 57,
      "text": "the problem as follows. The 3rd in the key of Gb is a Bb. So to make it minor we would need to lo wer the Bb an additional half step making it a Bbb. So the correct answer would be Bbb or B “double fla t.” Here is another example. If you were asked to determine the augmented 2nd in E, the problem would be solved this way .In the key of E the second is an F#. So to augment it I would need to raise it up an additional half step making it an F## or F “double sharp.” Remember to not answer the enharmonic equivalent of the note. In our previous example, an F## would also be a G. But a G would be the wrong answer to this problem because in the key of E a G would be a minor 3rd not an augmented 2nd. SESSION 9 54 The Secret to Great StrummingLearn & Master Guitar MAJOR INTERV ALS 2nd 3rd 6th 7th Lowered a 1/2 step - MINOR (flatted) Raised a 1/2 step - AUGMENTED (sharped)PERFECT INTERV ALS 4th 5th Octave Lowered a 1/2 step - DIMINISHED (flatted) Raised a 1/2 step - AUGMENTED (sharped)"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 58,
      "text": "Harmonic Intervals Worksheet Directions: Fill in the correct note corresponding to the harmonic interval asked for. Add double sharps or flats if needed. Check your answers at www.LearnandMasterGuitar.com/answerkey 1) In C, what is the minor 6th ? _Ab__ 6) The minor 2nd in D is _____ 2) In F, what is the augmented 2nd ? _G#__ 7) The augmented 6th in E is _____ 3) In Bb, what is the diminished 5th ? _____ 8) The minor 7th in B is _____ 4) In Eb, what is the minor 3rd ? _____ 9) The minor 6th of F# is _____ 5) In Ab,what is the diminished 5th ? _____ 10) The minor 7th of G is _____ Session 9 Assignment La Bamba SESSION 9 55 The Secret to Great StrummingLearn & Master Guitar · Practice all of the Strumming Examples given. Start slowly, then gradually increase your speed. Remember to use good technique and to always keep your strumming hand going. (pages 52-53) · Play La Bamba, both notes and chords, using the strumming pa ttern given. (page 55) · Play The Wabash Cannonball, both notes and chords, with the strumming pattern. (page 56) · Play Blues in E, both notes and chords, with the strumming pattern. (page 56) · Complete the Inter val Worksheets. (pages 53, 55) Jam Along CD #3 Track"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 58,
      "text": " chords, with the strumming pattern. (page 56) · Play Blues in E, both notes and chords, with the strumming pattern. (page 56) · Complete the Inter val Worksheets. (pages 53, 55) Jam Along CD #3 Track 2 - Slow Version Track 3 - Medium Version Track 4 - Fast Version"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 59,
      "text": "The Wabash Cannonball Blues in E SESSION 9 56 The Secret to Great StrummingLearn & Master Guitar Jam Along CD #3 Track 5 - Slow Version Track 6 - Medium Version Track 7 - Fast Version Jam Along CD #3 Track 8 - Slow Version Track 9 - Medium Version Track 10 - Fast Version E7 A7 E7 B7 A7 E7 B7 E"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 60,
      "text": "Keys to Good Fingerstyle Technique · Have a relaxed fingering hand. · Bring your thumb slightly forward. · Make sure each finger has freedom of movement. · Go SLOW .S p e e d w i l l c o m e a s y o u g a i n c o n t r o l . Fingerstyle Technique Exer cises: Finger Pattern 1 Finger Pattern 1 Thumb - 1st - 2nd - 3rd Directions: Play each exercise slo wly in an even, stead y rhythm using finger pattern 1. Slowly increase your speed only after you have control of your fingers. SESSION 10 57 Fingerstyle GuitarLearn & Master GuitarSESSION 10 - Fingerstyle Guitar “One must make of one's fingers well drilled soldiers.” ~ Fernando Sor, Classical Guitarist & Composer (1778-1838) 1. 2. Estimated Time to Learn These Concepts - 3 Weeks T123"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 61,
      "text": "Fingerstyle Technique Exercises: Finger Pattern 2 Finger Pattern 2 Thumb - 3rd - 2nd - 1st SESSION 10 58 Fingerstyle GuitarLearn & Master Guitar 3. 4. 1. 2."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 62,
      "text": "Fingerstyle Technique Exercises: Finger Pattern 3 Finger Pattern 3 Thumb - 2nd - 1st - 3rd Merle Travis Fingerstyle Technique SESSION 10 59 Fingerstyle GuitarLearn & Master Guitar 1. 2. 1."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 63,
      "text": "SESSION 10 60 Fingerstyle GuitarLearn & Master Guitar Giuliani Studies for Classical Guitar Mauro Giuliani (1781-1828) 1. 2.2."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 64,
      "text": "SESSION 10 61 Fingerstyle GuitarLearn & Master GuitarSession 10 Assignment House of the Rising Sun· Practice all of the Fingerstyle Exercises. Start slowly to gain control, then gradually increase your speed. (pages 57-59) · Practice the Merle Travis and Giuliani Finger Style Exercises. (pages 59-60) · Play House of the Rising Sun with fingerstyle accompaniment pattern. (page 61) · Play Canon in D. Do one section at a time. It is a great song and worth the extra effort. (page 62) Jam Along CD #3 Track 11 - Slow Version Track 12 - Medium Version Track 13 - Fast Version"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 65,
      "text": "Canon in D (Pachelbel’s Canon) Johann Pachelbel (1653-1706) SESSION 10 62 Fingerstyle GuitarLearn & Master Guitar Jam Along CD #3 Track 14 - Slow Version Track 15 - Medium Version Track 16 - Fast Version"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 66,
      "text": "What's a Pentatonic Scale? A PENTATONIC SCALE is a five note scale derived from the major scale. It uses the first, second, third, fifth, and sixth steps of the major scale. C Major Scale CPentatonic Scale Relative Major & Minor Roots There is a special rela tionship between the first and sixth step of the major scale which is called RELA TIVE. The first step of the major scale is called the RELATIVE MAJOR. The sixth step is called the RELATIVE MINOR. To find the rela- tive minor when given the relative major you would go up from the relative major six steps in the major scale. You could also go down two steps from the relative major to find the relative minor. After you find the relative major or minor root, you can then build the appropriate major or minor scale. Relative major and minor scales share the same KEY SIGNATURE. SESSION 11 63 Pentatonic Scales - The Foundation of SoloingLearn & Master GuitarSESSION 11- Pentatonic Scales - The Foundation of Soloing “Our musical minds know everything they have ever heard, while our hands know only what we've trained them to do.” ~ Chris Proctor, Fingerstyle Guitarist 1 2 3 4 5 6 7 1 2 3 5 6Estimated Time to Learn These Concepts - 4 Week"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 66,
      "text": "everything they have ever heard, while our hands know only what we've trained them to do.” ~ Chris Proctor, Fingerstyle Guitarist 1 2 3 4 5 6 7 1 2 3 5 6Estimated Time to Learn These Concepts - 4 Weeks"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 67,
      "text": "The Five Pentatonic Forms Since there are five notes in a pentatonic scale, there are five different forms that we can use to play the scale if we start on each different note. These are the five forms of a C major pentatonic scale or an A minor pentatonic scale. The diamond shows the major root and the open circle shows the minor root. On guitar, these five forms connect togeth- er like overlapping puzzle pieces as shown in the lower example. D=Major Root =Minor Root Pentatonic Forms Connect Together Common Pentatonic Patter ns Directions: These examples are given in penta tonic form #1. Practice each pa ttern. Begin slo wly,then gradually increase speed. Try playing these patterns in different keys and places on the neck. Use all pentatonic forms. Pattern #1 (Sets of 4) SESSION 11 64 Pentatonic Scales - The Foundation of SoloingLearn & Master Guitar 5 fr. 7 fr. 9 fr. 12 fr. 2 fr.1st Form 2nd Form 3rd Form 4th Form 5th Form 4th Form 3rd Form 2nd Form 1st Form 5th Form Ascending Descending"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 68,
      "text": "Pattern #2 (Sets of 3) Pattern #3 (3 Pairs) Session 11 Assignment SESSION 11 65 Pentatonic Scales - The Foundation of SoloingLearn & Master Guitar · Practice all of the pentatonic forms ascending and descending. Memorize them. (page 64) · Practice the penta tonic forms in all of the keys. (page 64) · Practice connecting them together to play in all the keys the full length of the guitar . (page 64) · Practice the common pentatonic patterns in various keys and places on the neck. (pages 64-65) · Practice soloing using pentatonic scales on A Minor Pentatonic Blues, G Major Pentatonic, and Around the Pentatonic World. Make up your own solo using the scales suggested. (page 66)Ascending and Descending Ascending Descending"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 69,
      "text": "A Minor Pentatonic Blues Slow Blues G Major Pentatonic Medium Groove Around the Pentatonic World Medium Latin SESSION 11 66 Pentatonic Scales - The Foundation of SoloingLearn & Master Guitar Jam Along CD #3 Track 17 Jam Along CD #3 Track 18 Jam Along CD #3 Track 19Solo using the A Minor Pentatonic Scale Solo using a G Major Pentatonic Scale Solo using the appropriate Pentatonic Scale"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 70,
      "text": "Open Two Chords Moveable Two Chords Open Major 7th Chords Moveable Major 7th Chords Open Minor 11th Chords Moveable Minor 11ths SESSION 12 67 Advanced ChordsLearn & Master GuitarSESSION 12 - Advanced Chords “It's important to other musicians, but on records, fast picking doesn't mean a thing. People want to hear melody and nice harmony.” ~ Chet Atkins C2D2E2G2A23 211 31 2 421 323F2B2G2 13fr. 3 41 1 11 3422fr. 341 Cmaj7 Dmaj7 Fmaj7 Gmaj7 Amaj7231111 2 31 21 2 34th String Root 5th String Root 6th String Root E maj7 B maj7 Fmaj7 13331 1 2 3 41 2 34 4th String Root 5th String Root 6th String RootEstimated Time to Learn These Concepts - 2 Weeks F m11 Bm11 Cm11 Gm11 34 23 2 4 1 1 3 421 2 34 5th String Root 6th String Root"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 71,
      "text": "1. 2.Two Chord Exercises Major 7th Exercises Minor 11th Exercises SESSION 12 68 Advanced ChordsLearn & Master Guitar 1. 2. 3. 1. 2."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 72,
      "text": "Chord Substitution Examples Session 12 Assignment SESSION 12 69 Advanced ChordsLearn & Master Guitar Normal Substituted Chords Normal Substituted Chords1. 2.Theory Tips & Tricks...Substituting Chords. For Major Chords: To spice up any MAJOR chord, you can substitute a TWO chord. For example, if the chord progression is a C to an F chord, then play a C2 to an F2. For Minor Chords: To spice up any MINOR chord, you can substitute a MINOR 11TH chord. For example, if the chord progression includes a Dm, then play a Dm11 in it's place. · Practice all of the advanced chord forms. Memorize them. (page 67) · Play the Two Chord, Major 7th, Minor 11th and Chord Substitution Exercises. (pages 68-69) · Play Rockin', Suspended Smooth, and Acoustic Groove with the Jam Along CD. (page 70)"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 73,
      "text": "Rockin’ Medium Rock Suspended Smooth Slow Acoustic Groove Medium Acoustic SESSION 12 70 Advanced ChordsLearn & Master Guitar Jam Along CD #3 Track 20 Jam Along CD #3 Track 21 Jam Along CD #3 Track 22"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 74,
      "text": "What's a Blues Scale? A BLUES SCALE is derived from the major scale. Some notes are added and some notes are adjusted. To form a blues scale, you add the flatted third and the flatted fifth. Also, adjust the seventh step of the major scale down a half step to form a flatted seventh. The flatted third, fifth, and seventh would be called the BLUES NOTES. C Major Scale CBlues Scale C Minor Pentatonic Scale The C MINOR PENTATONIC scale already includes all but one of the blues notes. So, an easy way to sound bluesy is to play the minor pentatonic form. If you wanted to add the flatted fifth blues note, you would need to add one extra note to the form. SESSION 13 71 Playing the BluesLearn & Master GuitarSESSION 13 - Playing the Blues “We all have idols. Play like anyone you care about but try to be yourself while doing so.” ~ B.B. King, Legendary Blues GuitaristEstimated Time to Learn These Concepts - 2 Weeks 1 2 3 4 5 6 7 1 2 b3 3 4 b5 5 6 b7 1 b3 4 5 b7"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 75,
      "text": "C Minor Pentatonic With Added Flatted 5th If you wanted to add the flatted fifth blues note, you would just need to add one extra note to the minor pentatonic form. Pentatonic For ms with Blues Notes Based on an A minor pentatonic. =Minor Root =Blues Note The Blues Chor d Progression The BLUES CHORD PROGRESSION consists of 12 measures which have a specific pattern of chords in the key. These chords are represented by Roman numerals. SESSION 13 72 Playing the BluesLearn & Master Guitar Pentatonic 1st Form with added blues note = Added Blues Note 1st Form 2nd Form 3rd Form 4th Form 5th Form5fr. 7fr. 9fr. 12fr. 2fr. I IV I V IV I8fr.1 b3 4 b5 5 b7"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 76,
      "text": "Blues Progression in C or C Blues Triads A TRIAD is a combination of three notes played together. A triad is made up of the FIRST, THIRD, and FIFTH notes of the major scale. These scale tones are adjusted up or down according to a formula to form the different types of triads. The four main types of triads are MAJOR, MINOR, AUGMENTED, and DIMINISHED. The chart below shows each triad type and the corresponding formula. SESSION 13 73 Playing the BluesLearn & Master Guitar C F C G F C C D E F G A B C Triad T ypes Scale T one Formulas Major 1 - 3 - 5 Minor 1 - b3 - 5 Augmented 1 - 3 - #5 Diminished 1 - b3 - b5"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 77,
      "text": "Triad Examples in C 1) A C Major triad would use the 1st, 3rd and 5th scale tones from the C major scale. So, a C Major triad would be C, E and G. 2) A CM i n o r triad would use the same scale tones, but we would need to lower the 3rd a half step. So, a C Minor triad would be C, Eb,a n d G . 3) A C Augmented triad would require us to raise the 5th step up a half step. So, a C Augmented triad would be C, E, and G#. 4) A CD i m i n i s h e d triad would have us lower the 3rd and the 5th scale tone down a half step. This would make a C Diminished triad be C, Eb,a n d Gb. Triad Worksheet Directions: Fill in the proper letter names for each triad. Check your ans wers a t www .LearnandMasterGuitar .com/ans werkey 1) F Minor _F__ _Ab_ _C__ 2) G Major _G__ _B__ _D__ 3) C Diminished ____ ____ ____ 4) Bb Augmented ____ ____ ____ 5) Eb Major ____ ____ ____ 6) D Minor ____ ____ ____ 7) A Diminished ____ ____ ____ 8) Ab Major ____ ____ ____ 9) E Minor ____ ____ ____ 10) C Minor ____ ____ ____ Session 13 Assignment SESSION 13 74 Playing the BluesLearn & Master Guitar 11) F Major ____ ____ ____ 12) G Minor ____ ____ ____ 13) Bb Diminished ____ ____ ____ 14) D Augmented ____ ____ ____ 15) Eb Mino"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 77,
      "text": "ion 13 Assignment SESSION 13 74 Playing the BluesLearn & Master Guitar 11) F Major ____ ____ ____ 12) G Minor ____ ____ ____ 13) Bb Diminished ____ ____ ____ 14) D Augmented ____ ____ ____ 15) Eb Minor ____ ____ ____ 16) A Major ____ ____ ____ 17) Ab Minor ____ ____ ____ 18) E Augmented ____ ____ ____ 19) Db Major ____ ____ ____ 20) B Minor ____ ____ ____ · Practice all of the Pentatonic Forms with Blues Notes in all keys for the full range of the guitar. (page 72) · Memorize the Blues Chord Progression. (pages 72-73) · Memorize the four Triad Types and complete the Triad Practice Worksheet. (pages 73-74) · Play Jammin the Blues and Johnny’s E Blues with the Jam Along CD. Practice playing the chords and solo- ing using the pentatonic forms with blues notes. (page 75)"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 78,
      "text": "Jammin the Blues Swing Jazz Johnny's E Blues SESSION 13 75 Playing the BluesLearn & Master GuitarJam Along CD #4 Track 2 - Slow Version Track 3 - Fast Version Jam Along CD #4 Track 4 - Slow Version Track 5 - Fast VersionSolo using the C minor pentatonic scale with the added blues note. Solo using the E minor penta tonic scale with the added blues note."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 79,
      "text": "Sliding to Notes SLIDING involves approaching a note from above or beneath, usually from a half step or whole step. Sliding Riff In C, on 5th String In F, on 6th String SESSION 14 76 Giving Your Playing Some StyleLearn & Master Guitar SESSION 14 - Giving Your Playing Some Style How many guitar players does it take to change a light bulb? Five. One to change it and the other four to say “I could do that.”Estimated Time to Learn These Concepts - 1 Week 1. 2."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 80,
      "text": "Bends BENDS involve playing a note and then bending the string, either a half or whole step, to another pitch. Always bend to a specific pitch. Normally, you would use your third or fourth finger (pinky) to bend with the other fingers helping. Major Scale Bending Exercise Hammer-ons A HAMMER-ON is a technique with which you pick the first note, then by hitting your fretting finger hard on the fretboard you get the second note to sound without picking it. Pull-offs A PULL-OFF is a technique where you pick the first note then pull off your fretting finger so tha t the remaining fretted note sounds without picking it. Tapping TAPPING is a technique combining hammer-ons and pull-offs. It also incorporates reaching over with your picking hand to hammer on a note on the fretboard. SESSION 14 77 Giving Your Playing Some StyleLearn & Master GuitarAm i n o r Pentatonic Scale = Notes that are good to bend."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 81,
      "text": "Major Scale in Harmonics Example Session 14 Assignment Bending the Blues Slow Blues SESSION 14 78 Giving Your Playing Some StyleLearn & Master Guitar · Practice the Major Scale Bending Exercise. Bend accurately to the correct pitch. (page 77) · Practice the Sliding Riff on the fifth and sixth string. Do it in various keys. (page 76) · Practice Palm Muting on the pentatonic scales. Go for a consistent, good muted string tone. · Practice the Jazz Octaves technique. · Play Bending the Blues, Jazz Octaves, and The Funky Mute with the Jam Along CD. (pages 78-79) Jam Along CD #4 Track 6Solo using the A minor pentatonic scale bending the correct notes."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 82,
      "text": "Jazz Octaves Swing Feel The Funk y Mute Medium Funk SESSION 14 79 Giving Your Playing Some StyleLearn & Master GuitarJam Along CD #4 Track 7Play the melody using jazz octaves then solo in the key of Bb. Jam Along CD #4 Track 8Use palm muting starting at the 5th position."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 83,
      "text": "Power Chords POWER CHORDS are chords that only use the root and 5th steps of the major scale. The chord symbol is abbreviated to the root and the number 5 (ie. C5, F5). They are played using two or three strings. The examples shown include three strings. To play the two string version, just omit the highest pitch played with your fourth finger. Moveable Power Chords Open Power Chords Power Chor d Exer cises SESSION 15 80 Electric Guitars - The Heart of Rock & RollLearn & Master Guitar SESSION 15 - Electric Guitars - The Heart of Rock & Roll “We don't like their sound, and guitar music is on the way out.” ~ Decca Recording Company rejecting the Beatles 1962Estimated Time to Learn These Concepts - 1 Week F5 B5 E5 A5 G5 D5 31 41 34232334 232 1. 2.5th String Form 6th String Form"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 84,
      "text": "Countr y Chic ken Pickin’ Exercises Entire Phrase in A SESSION 15 81 Electric Guitars - The Heart of Rock & RollLearn & Master Guitar 3. 4."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 85,
      "text": "In E In D Country Bends Example Country Arpeggio Example SESSION 15 82 Electric Guitars - The Heart of Rock & RollLearn & Master Guitar In G In A"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 86,
      "text": "SESSION 15 83 Electric Guitars - The HEart of Rock & RollLearn & Master GuitarSliding Fourths Example SLIDING FOURTHS are built off of the root or the fifth with the two notes used being the root or the fifth and the fourth below. The Harmonized Major Scale A HARMONIZED MAJOR SCALE is a specific pattern of chords that are derived from the major scale. A triad is built on each note of the major scale. In the key, start on 1-3-5 and then move up a scale step for each note (ie… 2-4-6 3- 5-7 4-6-8 and so on). These combinations of notes form triads in the same predictable pattern for every key. The triads built on the first, fourth, and fifth scale steps end up becoming MAJOR CHORDS. The triads built on the second, third, and sixth scale steps become MINOR CHORDS. The triad built on the seventh scale step is a DIMINISHED CHORD. This pattern of chords is consistent in every key. Session 15 Assignment · Practice P ower Chords and Power Chord Exercises. Change chords accurately and quickly. (pages 80-81) · Practice Chicken Pickin' Exercises and make up some on your own. (pages 81-82) · Practice the Sliding 4ths Exercise. Practice moving to various keys. (page 83) · Play P ower Chord Rock "
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 86,
      "text": "pages 80-81) · Practice Chicken Pickin' Exercises and make up some on your own. (pages 81-82) · Practice the Sliding 4ths Exercise. Practice moving to various keys. (page 83) · Play P ower Chord Rock and P ower Riffs with the Jam Along CD. (page 84)In A MAJOR CHORDS 1st,4th,5th I, IV, V In an y key, triads built off of the 1st, 4th, and 5th scale steps become MAJOR CHORDS.MINOR CHORDS 2nd, 3rd,6th ii, iii, vi In an y key, triads built off of the 2nd, 3rd, and 6th scale steps become MINOR CHORDS.DIMINISHED CHORD 7th vii diminished In an y key, a triad built off of the 7th scale step becomes a DIMINISHED CHORD."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 87,
      "text": "Power Chord Rock Up Tempo Rock Power Riffs Medium Heavy Rock SESSION 15 84 Electric Guitars - The Heart of Rock & RollLearn & Master Guitar Jam Along CD #4 Track 9Solo in the key of G. Jam Along CD #4 Track 10Play the power chord melody then solo on E minor pentatonic."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 88,
      "text": "SESSION 16 85 Advanced Strumming - Going Beyond the BasicsLearn & Master GuitarSixteenth Notes SIXTEENTH NOTES are the smallest subdivision of notes that you are likely to see as a guitar player. There are FOUR sixteenth notes for every beat. Sixteenth Note Strumming ExercisesSESSION 16 - Advanced Strumming - Going Beyond the Basics “A good instrument is really an inspiration. When you have a truly fine instrument, suddenly even the most simple things sound good.” ~ Mason Williams - Guitarist on the song “Classical Gas”Estimated Time to Learn These Concepts - 2 Week 1. 2. 3. 1. 2. 3. 4."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 89,
      "text": "Strumming with Accents Exercises SESSION 16 86 Advanced Strumming - Going Beyond the BasicsLearn & Master Guitar 1. 2. 3. 4. 5. 6. 7. 8."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 90,
      "text": "Strumming Exercises Session 16 Assignment Rolling Along Relaxed Acoustic Feel SESSION 16 87 Advanced Strumming - Going Beyond the BasicsLearn & Master Guitar 1. 2. 3. · Practice all sixteenth note strumming exercises with open and barre chords. Start slo wly then gradually increase speed. (pages 85-87) · Experiment with making up your own strumming patterns. · Play Rolling Along, A Little Bit Rocky, and Electric Funk with the Jam Along CD. (pages 87-88) Jam Along CD #4 Track 11"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 91,
      "text": "A Little Bit Rocky Aggressive Acoustic Electric Funk Medium Funk Groo ve SESSION 16 88 Advanced Strumming - Going Beyond the BasicsLearn & Master Guitar Jam Along CD #4 Track 12 Jam Along CD #4 Track 13"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 92,
      "text": "Three Note on a String Scales THREE NOTE ON A STRING SCALES are a way of playing major scales on a guitar that help you learn the notes on the entire neck of your guitar and also help you with developing speed, triplet technique, and soloing. SESSION 17 89 Going Bey ond the First PositionLearn & Master GuitarSESSION 17- Going Beyond the First Position “Playing scales is like a boxer skipping rope or punching a bag. It's not the thing in itself, it's preparatory to the activity.”~ Barney Kessel, Jazz GuitaristEstimated Time to Learn These Concepts - 4 Weeks or more"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 93,
      "text": "Seventh Chords A SEVENTH CHORD is a combination of FOUR notes played together. Seventh Chord Worksheet Directions: Fill out the appropriate scale tones in each seventh chord. Remember to adjust them as needed to ful- fill the formula for the triad type. Use double sharps or fla ts as needed. Check your answers at www.LearnandMasterGuitar.com/answerkey SESSION 17 90 Going Bey ond the First PositionLearn & Master Guitar C D E F G A B C There are SIX common types of sev- enth chords. With the addition of the seventh scale step, the number of ways all these tones can be adjusted adds up to more chord varia tions. Although these are not all of the pos- sible combina tions, the follo wing chart shows the most commonly used forms.Seventh Types Formulas Abbreviations Major 7th 1 - 3 - 5 - 7 Cmaj7, C 7 Minor 7th 1 - b3 - 5 - b7 Cmin7, Cm7, C-7 Dominant 7th 1 - 3 - 5 - b7 C7, C7, G7, D7 Augmented 7th 1 - 3 - #5 - b7 Caug7, C+7 Diminished 7th 1 - b3 - b5 - bb7 Cdim7, C , C 7 Half-Dim. 7th 1 - b3 - b5 - b7 C half-dim, C 7 1) Gmaj7 ____ ____ ____ ____ 2) Cm7 ____ ____ ____ ____ 3) F+7 ____ ____ ____ ____ 4) Bb7 ____ ____ ____ ____ 5) Eb ____ ____ ____ ____ 6) Abm7 ____ ____ ____ ____ 7) Db7 ___"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 93,
      "text": "- b5 - b7 C half-dim, C 7 1) Gmaj7 ____ ____ ____ ____ 2) Cm7 ____ ____ ____ ____ 3) F+7 ____ ____ ____ ____ 4) Bb7 ____ ____ ____ ____ 5) Eb ____ ____ ____ ____ 6) Abm7 ____ ____ ____ ____ 7) Db7 ____ ____ ____ ____ 8) F#min7 ____ ____ ____ ____ 9) Baug7 ____ ____ ____ ____ 10) E7 ____ ____ ____ ____11) Bbm7 ____ ____ ____ ____ 12) Ebmaj7 ____ ____ ____ ____ 13) Ab+7 ____ ____ ____ ____ 14) C# 7 ____ ____ ____ ____ 15) Gbmaj7 ____ ____ ____ ____ 16) Bmin7 ____ ____ ____ ____ 17) E 7 ____ ____ ____ ____ 18) A7 ____ ____ ____ ____ 19) Dm7 ____ ____ ____ ____ 20) Gaug7 ____ ____ ____ ____oo ooo o"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 94,
      "text": "Session 17 Assignment Triplet Scale Practice SESSION 17 91 Going Bey ond the First PositionLearn & Master Guitar· Practice Three Note on a String Scales for the full range of the instrument. (page 89) · Practice the seven scale forms in all twelve keys. Say the notes while playing them. · Incorporate Hammer-Ons and Pull-Offs as you play the scale forms. Try ascending in one form and descend- ing in the next form. Try playing triplets. · Play Triplet Scale Practice, Pop Ballad Groove, and ZZ Shuffle with the Jam Along CD. (pages 91-92) Jam Along CD #5 Track 2 - Slow Version Track 3 - Medium Version Track 4 - Fast Version"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 95,
      "text": "Pop Ballad Groove This song uses a FIRST and SECOND ENDING. First and Second Endings are a way to repeat a section of music with slightly different endings. The first time through, you play the music, take the first ending and repeat back to the begin- ning. The second time through, you play the music again, skip over the first ending, take the second ending, and then continue on through the song. This song also has a KEY CHANGE in the fourth line. Notice the key signature difference at the beginning of the fourth line. Practice strumming the chords then soloing in the key of C using the Three Note on a String Technique. Slow Ballad ZZ Shuffle Practice the chords using power chords. Practice soloing in E minor. Remember tha t the key of E minor is the same as G major . Rock Shuffle SESSION 17 92 Going Bey ond the First PositionLearn & Master Guitar Jam Along CD #5 Track 5 Jam Along CD #5 Track 6"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 96,
      "text": "Chord Melody A CHORD MELODY involves playing a melody in chords with the melody as the highest tone in the chord and all the other notes voiced beneath the melody note. Moveable Major Seventh Chords SESSION 18 93 JazzLearn & Master GuitarSESSION 18 - Jazz “A jazz musician is a juggler who uses harmonies instead of oranges.” ~ Benny Green - Jazz SaxophonistEstimated Time to Learn These Concepts - 3 Weeks 31 4 1 3 4Fmaj7B maj7B maj7D maj7E maj7G maj7 2 1 2 431 2 111 3 42fr. 333 1 2 3 42fr. 1 6th String Form 5th String Forms 4th String Forms"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 97,
      "text": "Open Major Seventh Chords Moveable Minor Seventh Chords Ninth Chords Ways to Jazz up Chor d Prog ressions Add Color Tones A COLOR TONE is a tone added to the basic chord to create a more complex chord. Usually these added tones come directly from the major scale, but sometimes they can be major scale tones tha t have been altered such as a sharped 9th.Remember tha t there are only seven notes in a major scale and then they repea t, so if you are referring to a ninth, this is actually the second scale step. The eleventh is the same as the fourth and the thirteenth is the sixth. SESSION 18 94 JazzLearn & Master Guitar Amaj7C maj7D maj7 F maj7G maj73123211131221 Fm7 F m7 C m7 C m7 A9 C9 6th String Forms 5th String Forms 6th String Form 5th String Form 234 1111341 2341123124 314 233fr. 2fr. 11"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 98,
      "text": "Adding the ii-V Progresion Using the harmonized major scale, we learned that the chord built off of the second degree of a major scale is a minor triad. In C, the two (ii) chord would be a D minor. Also, the chord built off of the fifth major scale degree is a major chord. In C, the five chord (V) would be a G major. This combination of a two minor chord to a five major chord is one of the most common chord progressions in jazz. To get to any chord in a jazzy way you can approach it using the two minor and five major in the key of the chord you are going to. Dress up the Dominant Seventh Chord The fifth chord in the harmonized major scale is called a DOMINANT SEVENTH chord. The dominant seventh chord is abbreviated with the root and a 7 (ie C7, F7 or G7). This chord is almost always preceding the one chord. In C, a G7 goes to a C chord. A dominant seventh chord can be jazzed up by adding color tones to it. SESSION 18 95 JazzLearn & Master Guitar 1. 2. 3. 4. 5. 6."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 99,
      "text": "Session 18 Assignment Swingin A standard jazz form consists of playing the melody all the way through one time, then going back through the song soloing over the chord changes, then playing the melody through all the way one last time. Medium Swing SESSION 18 96 JazzLearn & Master Guitar · Practice the Major Seventh, Minor Seventh, and Ninth Forms. (pages 93-94) · Practice the Chord Melody example in the book. Try to make up another melody adding chords to it. (page 93) · Play through the chord progression exercises. (pages 94-95) · Make up a melody and play it in jazz octaves. · Play Swingin and Jazz Blues with the Jam Along CD. Practice playing the melody, chordal accompaniment, and soloing over the chord changes. (pages 96-97) Jam Along CD #5 Track 7 Track 8 - Without Guitar"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 100,
      "text": "Jazz Blues SESSION 18 97 JazzLearn & Master GuitarJam Along CD #5 Track 9"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 101,
      "text": "Where Do I Start? 1) Look at the key signature. 2) Let the chord tones guide you. 3) Adjust to the style of the song. 4) Use finger patterns as a simple starting point. 5) Creativity involves lots of trial and error. What makes up a good solo? 1) Melody - You want to create something that is memorable. 2) Balance - All the pieces of the solo need to fit together . 3) Say Something - Avoid just musically mumbling. Find a musical idea and develop it. Take a few notes or a phrase and build something around it. SESSION 19 98 SoloingLearn & Master Guitar SESSION 19 - Soloing “Music is your own experience, your thoughts, your wisdom. If you don't live it, it won't come out of your horn.” ~ Charlie Parker - Legendary Jazz Saxophonist “Don't play what's there, play what's not there.” ~ Miles Davis - Jazz Innovator and Trumpeter “In soloing, there are no wrong notes, just poor choices ” ~ AnonymousEstimated Time to Learn These Concepts - 4 Weeks to a Lifetime Determine what key you are in. This will tell you what major scale you could use to begin making a melody from. Then pick and choose notes from the major scale in tha t key. Ultimately, the chords and the chord tones they represent are"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 101,
      "text": " will tell you what major scale you could use to begin making a melody from. Then pick and choose notes from the major scale in tha t key. Ultimately, the chords and the chord tones they represent are the guide for what notes are going to sound right at any particular point in time. Rock soloing incorporates lots of bends and pentatonic scales. Jazz soloing incorporates lots of color tones. Bluegrass soloing uses lots of sequential sixteenth notes. Blues soloing uses pentatonic scales with blues notes. Once you ha ve the key ,you can begin incorpora ting some of the many finger patterns we have studied in the proper key into your solo (pentatonic scales, scales with blues notes, three note on a string scales, etc.) Be careful, though... Finger patterns alone do not make for a very interesting solo. All of this trial and error improves your ear to better decide which notes work and which notes do not. Be patient with yourself. Everyone sounds bad at first, but slowly you start making better musical choices and more creative melodies."
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 102,
      "text": "Chord Tone Soloing Exercises Session 19 Assignment SESSION 19 99 SoloingLearn & Master Guitar 1. 2. 3. 4. 5. · Practice soloing on Stevie's Groove with the Jam Along CD. (pages 101) · Practice Ear Training Exercises 1, 2, & 3 with the Jam Along CD. (pages 100)"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 103,
      "text": "Jam Along CD #5 Track 10 1.Ear Training Exercises Each example will be played four times. Listen to the phrase in the first measure, then try to play it in the second measure. The first note of each phrase is given. The exercises begin simply then increase in complexity. Look at the chord for hints for the key and the chord tones that may be involved. SESSION 19 100 SoloingLearn & Master Guitar 2. 3.Jam Along CD #5 Track 11 Jam Along CD #5 Track 12"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 104,
      "text": "Stevie’s Groove Practice playing the chord melody as written and practice soloing over the chord changes. There are two sections to this song. The first section (A) will be repeated four times and then the second section (B) will be repeated twice. Slow Blues Rock SESSION 19 101 SoloingLearn & Master Guitar Jam Along CD #5 Track 13"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 105,
      "text": "Chord Formulas and Abbreviations The notes to any chord can be found by using the appropriate formulas and the major scale from the key of the chord. The chart below lists the formulas and abbreviations for almost every chord that you will ever see. A chord can be built from the major scale notes and the correct formula. For example: If the chord is “Cm7”, the formula is 1-b3-5-b7 and the key is “C”. So, when we plug in the right scale tones, the notes for a “Cm7” are C-Eb-G-Bb. Chord Formula Example Triads Major 1-3-5 C, F, G Minor 1-b3-5 Cm,C- Augmented 1-3-#5 Caug, C+ Diminished 1-b3-b5 Cdim, C 7ths Major 7th 1-3-5-7 CM7, Cmaj7, C^7 Minor 7th 1-b3-5-b7 Cm7, C-7 Dominant 7th 1-3-5-b7 C7,F7,G7 Augmented 7th 1-3-#5-b7 Caug7, C+7 Half-Dim. 7th 1-b3-b3-b7 Chalf-dim7, C 7 Diminished 7th 1-b3-b5-bb7 Cdim7, C 7 Other Chords Two Chord 1-2-3-5 C2, F2 Five Chord 1-5 C5, F5 Suspended 1-4-5 Csus Sixth Chord 1-2-5-6 C6, F6 Minor 6th 1-b3-5-6 Cm6 Six-Nine Chord 1-3-5-6-9 C6/9, C Altered Chords ALTERED CHORDS are chords with chord tones that have been adjusted a half step up or down. The note that is to be adjusted is inside a parenthesis. Any altera tion only a pplies to the note tha t is insi"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 105,
      "text": "ERED CHORDS are chords with chord tones that have been adjusted a half step up or down. The note that is to be adjusted is inside a parenthesis. Any altera tion only a pplies to the note tha t is inside the parenthesis. C7(b9) F-11(b5,b9) SESSION 20 102 All The Chords You Need to KnowLearn & Master Guitar SESSION 20 - All The Chords You Need to Know “If I don't practice one day, I know it; two days, the critics know it; three days, the public knows it.” ~ Jascha Heifetz - World Renowned ViolinistEstimated Time to Learn These Concepts - 2 Weeks Chord Formula Example 9ths Major 9th 1-3-5-7-9 CM9, Cmaj9, C Minor 9th 1-b3-5-b7-9 Cm9, C- Dominant 9th 1-3-5-b7-9 C9, F9 Augmented 9th 1-3-#5-b7-9 Caug9, C+ 11ths Minor 11th 1-b3-5-b7-9-11 Cmin, Cm11, C- Dominant 11th 1-3-5-b7-9-11 C11, F11 13ths Major 13th 1-3-5-7-9-13 Cmaj , C^ Minor 13th 1-b3-5-b7-9-13 Cm13, C- Dominant 13th 1-3-5-b7-9-13 C13, C Augmented 13th 1-3-#5-b7-9-13 Caug13, C+ 1. 2.Formula: Chord Tones: Formula: Chord Tones:1 3 5 b7 b9 CEGB b D b 1b 3 b 5 b 7 b 9 1 1 F Ab Cb Eb Gb Bb 5"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 106,
      "text": "Inversions and Alternate Bass Chords INVERSIONS are chords that use another one of the chord tones instead of the root as the lowest note of the chord. Inversions are notated with a slash. The note underneath the slash is the bass note. For example a G/B would indi- cate a G chord with the B as the lowest or bass note. ALTERNATE BASS CHORDS are chords that have a non-chord tone as the lowest or bass note. For example a F/G would indicate an F chord with a G note as the lowest or bass note. Chords SESSION 20 103 All The Chords You Need to KnowLearn & Master Guitar"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 107,
      "text": "What If I Don’t Know A Chord? If you come across a chord that you don't know, you can … 1) Build It - Build your own chord form constructing one from the chord tones used. 2) Look It Up - Research the chord online or with any all-in-one chord encyclopedia book. 3) Simplify it - Remove the color tones and break the chord down to the basic triad or seventh elements. Session 20 Assignment Chord Exercise 1 SESSION 20 104 All The Chords You Need to KnowLearn & Master Guitar · Practice Chord Exercises 1 & 2 with the Jam Along CD. (pages 104-105) · Learn and memorize all of the new chord forms. (page 103) · Play Friend and Funky Groove with the Jam Along CD. (pages 105) Jam Along CD #5 Track 14"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 108,
      "text": "Chord Exercise 2 Friend Strum using the proper chords, then solo in E major. Up Tempo Acoustic Funk y Groo ve Play rhythm using the chords given, then solo in the key of Eb major. Try to use the correct chord tones for each chord when soloing. Medium Funk SESSION 20 105 All The Chords You Need to KnowLearn & Master GuitarJam Along CD #5 Track 15 Jam Along CD #5 Track 16 Jam Along CD #5 Track 17"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 109,
      "text": "Acknowledgments I am thankful to the Lord for the unexpected opportunity to work on this project. I pray that it will be a blessing to those who learn from it as well as to those of us who have labored to provide it. I am thankful and grateful to my wonderful wife, Paulette, without whose constant encouragement this project would not exist. Your patience, wisdom, encouragement and support helped me to work harder and produce more than I ever thought possible. I am a blessed man. Also, I am indebted to her for her much needed professional skills of proofreading, editing, and photography. Thanks to my wonderful kids, David, Daniel, and Timothy who knew Daddy as just the man at the com- puter for months. I pray that the time will be redeemed many times over. To Gabriel Smith, thank you for the incredible opportunity to work with you on this. May the effort poured into this represent but a fraction of the blessing that it will be to those who learn from it as well as to our own lives and families. To Jared and Nathan, thank you for your tireless professional efforts during the making of this project. Thank you to my wonderful parents who faithfully paid for and took me to all those gui"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 109,
      "text": "amilies. To Jared and Nathan, thank you for your tireless professional efforts during the making of this project. Thank you to my wonderful parents who faithfully paid for and took me to all those guitar lessons, even though, at times, I begged to quit. And lastly ,an all-too-la te thank you to Johnny Frisco, my first and best guitar teacher who died during the completion of this project. I first walked into your lesson room, which was no bigger than a walk-in closet, a six year old with a guitar that was too big for me and came out after many years possessing the musical skills that have shaped my entire life. CREDITS Executive Producer: L. Gabriel Smith Producer: Emily Garman Director: Paul Williams Director of Photography: Paul Williams Cameron P owell SESSION 20 106 All The Chords You Need to KnowLearn & Master Guitar Cameral Operators: Bert Elliot Andy Reuter Editors: Paul Williams Cameron Powell Bert Elliot Shelley Boyd Andy Reuter Tyler Torti Script Supervisor: Adria Haley Jamie HolmesBook and Cover Design: Jared McDaniel, Studio430.com Spring Sprang, SpringSprang.com Film Location: Legacy Learning Studios, Nashville, TN Jam Along Band: Steve Krenz Abel Orta Javier Solis Din"
    },
    {
      "source": "Learn-and-Master-Guitar-Lesson-Book.pdf",
      "page": 109,
      "text": " HolmesBook and Cover Design: Jared McDaniel, Studio430.com Spring Sprang, SpringSprang.com Film Location: Legacy Learning Studios, Nashville, TN Jam Along Band: Steve Krenz Abel Orta Javier Solis Dino P astin Garrett Hestia"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 1,
      "text": "Python Tutorial Release 3.7.0 Guido van Rossum and the Python development team September 02, 2018 Python Software Foundation Email: docs@python.org"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 3,
      "text": "CONTENTS 1 Whetting Y our Appetite 3 2 Using the Python Interpreter 5 2.1 Invoking the Interpreter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 2.2 The Interpreter and Its Environment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 3 An Informal Introduction to Python 9 3.1 Using Python as a Calculator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9 3.2 First Steps Towards Programming . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16 4 More Control Flow T ools 19 4.1ifStatements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 4.2forStatements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 4.3 The range() Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20 4.4breakandcontinue Statements, and elseClauses on Loops . . . . . . . . . . . . . . . . . . 21 4.5passStatements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22 4.6 Deﬁning Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22 4.7"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 3,
      "text": " . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22 4.6 Deﬁning Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22 4.7 More on Deﬁning Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24 4.8 Intermezzo: Coding Style . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29 5 Data Structures 31 5.1 More on Lists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31 5.2 The delstatement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35 5.3 Tuples and Sequences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36 5.4 Sets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37 5.5 Dictionaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38 5.6 Looping Techniques . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39 5.7 More on Conditions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40 5."
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 3,
      "text": "ques . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39 5.7 More on Conditions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40 5.8 Comparing Sequences and Other Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40 6 Modules 43 6.1 More on Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44 6.2 Standard Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46 6.3 The dir()Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47 6.4 Packages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48 7 Input and Output 53 7.1 Fancier Output Formatting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53 7.2 Reading and Writing Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57 8 Errors and Exceptions 61 i"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 4,
      "text": "8.1 Syntax Errors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61 8.2 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61 8.3 Handling Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62 8.4 Raising Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64 8.5 User-deﬁned Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65 8.6 Deﬁning Clean-up Actions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66 8.7 Predeﬁned Clean-up Actions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66 9 Classes 69 9.1 A Word About Names and Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69 9.2 Python Scopes and Namespaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69 9.3 A First Look at Classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72 9.4 Random Remarks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75 9.5 Inhe"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 4,
      "text": "sses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72 9.4 Random Remarks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75 9.5 Inheritance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77 9.6 Private Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78 9.7 Odds and Ends . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79 9.8 Iterators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79 9.9 Generators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80 9.10 Generator Expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81 10 Brief T our of the Standard Library 83 10.1 Operating System Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83 10.2 File Wildcards . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83 10.3 Command Line Arguments . . . . . . . . . . . . . . . . . . . . . . . . . . . . "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 4,
      "text": ". 83 10.2 File Wildcards . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83 10.3 Command Line Arguments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84 10.4 Error Output Redirection and Program Termination . . . . . . . . . . . . . . . . . . . . . . . 84 10.5 String Pattern Matching . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84 10.6 Mathematics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84 10.7 Internet Access . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85 10.8 Dates and Times . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85 10.9 Data Compression . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86 10.10 Performance Measurement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86 10.11 Quality Control . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87 10.12 Batteries Included . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 4,
      "text": "l . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87 10.12 Batteries Included . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87 11 Brief T our of the Standard Library — Part II 89 11.1 Output Formatting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89 11.2 Templating . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90 11.3 Working with Binary Data Record Layouts . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91 11.4 Multi-threading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91 11.5 Logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92 11.6 Weak References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93 11.7 Tools for Working with Lists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93 11.8 Decimal Floating Point Arithmetic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94 12 Virtual Environments and Packages 97 12.1 Introduction . . . . . . . ."
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 4,
      "text": ". . . . . . . . 93 11.8 Decimal Floating Point Arithmetic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94 12 Virtual Environments and Packages 97 12.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97 12.2 Creating Virtual Environments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97 12.3 Managing Packages with pip . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98 13 What Now? 101 14 Interactive Input Editing and History Substitution 103 14.1 Tab Completion and History Editing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103 14.2 Alternatives to the Interactive Interpreter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103 ii"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 5,
      "text": "15 Floating Point Arithmetic: Issues and Limitations 105 15.1 Representation Error . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108 16 Appendix 111 16.1 Interactive Mode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111 A Glossary 113 B About these documents 127 B.1 Contributors to the Python Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127 C History and License 129 C.1 History of the software . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129 C.2 Terms and conditions for accessing or otherwise using Python . . . . . . . . . . . . . . . . . 130 C.3 Licenses and Acknowledgements for Incorporated Software . . . . . . . . . . . . . . . . . . . 133 D Copyright 145 Index 147 iii"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 6,
      "text": "iv"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 7,
      "text": "Python Tutorial, Release 3.7.0 Python is an easy to learn, powerful programming language. It has eﬃcient high-level data structures and a simple but eﬀective approach to object-oriented programming. Python’s elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms. The Python interpreter and the extensive standard library are freely available in source or binary form for all major platforms from the Python Web site, https://www.python.org/ , and may be freely distributed. The same site also contains distributions of and pointers to many free third party Python modules, programs and tools, and additional documentation. The Python interpreter is easily extended with new functions and data types implemented in C or C++ (or other languages callable from C). Python is also suitable as an extension language for customizable applications. This tutorial introduces the reader informally to the basic concepts and features of the Python language and system. It helps to have a Python interpreter handy for hands-on experience, but all examples are self-contained, so the tuto"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 7,
      "text": "r informally to the basic concepts and features of the Python language and system. It helps to have a Python interpreter handy for hands-on experience, but all examples are self-contained, so the tutorial can be read oﬀ-line as well. For a description of standard objects and modules, see library-index. reference-index gives a more formal deﬁnition of the language. To write extensions in C or C++, read extending-index and c-api-index. There are also several books covering Python in depth. This tutorial does not attempt to be comprehensive and cover every single feature, or even every commonly used feature. Instead, it introduces many of Python’s most noteworthy features, and will give you a good idea of the language’s ﬂavor and style. After reading it, you will be able to read and write Python modules and programs, and you will be ready to learn more about the various Python library modules described in library-index. The Glossary is also worth going through. CONTENTS 1"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 8,
      "text": "Python Tutorial, Release 3.7.0 2 CONTENTS"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 9,
      "text": "CHAPTER ONE WHETTING YOUR APPETITE If you do much work on computers, eventually you ﬁnd that there’s some task you’d like to automate. For example, you may wish to perform a search-and-replace over a large number of text ﬁles, or rename and rearrange a bunch of photo ﬁles in a complicated way. Perhaps you’d like to write a small custom database, or a specialized GUI application, or a simple game. If you’re a professional software developer, you may have to work with several C/C++/Java libraries but ﬁnd the usual write/compile/test/re-compile cycle is too slow. Perhaps you’re writing a test suite for such a library and ﬁnd writing the testing code a tedious task. Or maybe you’ve written a program that could use an extension language, and you don’t want to design and implement a whole new language for your application. Python is just the language for you. You could write a Unix shell script or Windows batch ﬁles for some of these tasks, but shell scripts are best at moving around ﬁles and changing text data, not well-suited for GUI applications or games. You could write a C/C++/Java program, but it can take a lot of development time to get even a ﬁrst-draft program. Python is simpler"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 9,
      "text": "d changing text data, not well-suited for GUI applications or games. You could write a C/C++/Java program, but it can take a lot of development time to get even a ﬁrst-draft program. Python is simpler to use, available on Windows, Mac OS X, and Unix operating systems, and will help you get the job done more quickly. Python is simple to use, but it is a real programming language, oﬀering much more structure and support for large programs than shell scripts or batch ﬁles can oﬀer. On the other hand, Python also oﬀers much more error checking than C, and, being a very-high-level language , it has high-level data types built in, such as ﬂexible arrays and dictionaries. Because of its more general data types Python is applicable to a much larger problem domain than Awk or even Perl, yet many things are at least as easy in Python as in those languages. Python allows you to split your program into modules that can be reused in other Python programs. It comes with a large collection of standard modules that you can use as the basis of your programs — or as examples to start learning to program in Python. Some of these modules provide things like ﬁle I/O, system calls, sockets, and even int"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 9,
      "text": "d modules that you can use as the basis of your programs — or as examples to start learning to program in Python. Some of these modules provide things like ﬁle I/O, system calls, sockets, and even interfaces to graphical user interface toolkits like Tk. Python is an interpreted language, which can save you considerable time during program development because no compilation and linking is necessary. The interpreter can be used interactively, which makes it easy to experiment with features of the language, to write throw-away programs, or to test functions during bottom-up program development. It is also a handy desk calculator. Python enables programs to be written compactly and readably. Programs written in Python are typically much shorter than equivalent C, C++, or Java programs, for several reasons: •the high-level data types allow you to express complex operations in a single statement; •statement grouping is done by indentation instead of beginning and ending brackets; •no variable or argument declarations are necessary. Python is extensible : if you know how to program in C it is easy to add a new built-in function or module to the interpreter, either to perform critical oper"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 9,
      "text": "e or argument declarations are necessary. Python is extensible : if you know how to program in C it is easy to add a new built-in function or module to the interpreter, either to perform critical operations at maximum speed, or to link Python programs to libraries that may only be available in binary form (such as a vendor-speciﬁc graphics library). Once you 3"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 10,
      "text": "Python Tutorial, Release 3.7.0 are really hooked, you can link the Python interpreter into an application written in C and use it as an extension or command language for that application. By the way, the language is named after the BBC show “Monty Python’s Flying Circus” and has nothing to do with reptiles. Making references to Monty Python skits in documentation is not only allowed, it is encouraged! Now that you are all excited about Python, you’ll want to examine it in some more detail. Since the best way to learn a language is to use it, the tutorial invites you to play with the Python interpreter as you read. Inthenextchapter, themechanicsofusingtheinterpreterareexplained. Thisisrathermundaneinformation, but essential for trying out the examples shown later. The rest of the tutorial introduces various features of the Python language and system through examples, beginning with simple expressions, statements and data types, through functions and modules, and ﬁnally touching upon advanced concepts like exceptions and user-deﬁned classes. 4 Chapter 1. Whetting Your Appetite"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 11,
      "text": "CHAPTER TW O USING THE PYTHON INTERPRETER 2.1 Invoking the Interpreter The Python interpreter is usually installed as /usr/local/bin/python3.7 on those machines where it is available; putting /usr/local/bin in your Unix shell’s search path makes it possible to start it by typing the command: python3.7 to the shell.1Since the choice of the directory where the interpreter lives is an installation option, other places are possible; check with your local Python guru or system administrator. (E.g., /usr/local/python is a popular alternative location.) On Windows machines, the Python installation is usually placed in C:\\Program Files\\Python37\\, though you can change this when you’re running the installer. To add this directory to your path, you can type the following command into the command prompt in a DOS box: set path=%path%;C:\\Program Files\\Python37\\ T yping an end-of-ﬁle character (Control-D on Unix, Control-Z on Windows) at the primary prompt causes the interpreter to exit with a zero exit status. If that doesn’t work, you can exit the interpreter by typing the following command: quit(). The interpreter’s line-editing features include interactive editing, history substitution and c"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 11,
      "text": "exit status. If that doesn’t work, you can exit the interpreter by typing the following command: quit(). The interpreter’s line-editing features include interactive editing, history substitution and code completion on systems that support readline. Perhaps the quickest check to see whether command line editing is supported is typing Control-P to the ﬁrst Python prompt you get. If it beeps, you have command line editing; see Appendix Interactive Input Editing and History Substitution for an introduction to the keys. If nothing appears to happen, or if ^Pis echoed, command line editing isn’t available; you’ll only be able to use backspace to remove characters from the current line. The interpreter operates somewhat like the Unix shell: when called with standard input connected to a tty device, it reads and executes commands interactively; when called with a ﬁle name argument or with a ﬁle as standard input, it reads and executes a scriptfrom that ﬁle. A second way of starting the interpreter is python -c command [arg] ..., which executes the statement(s) in command , analogous to the shell’s -coption. Since Python statements often contain spaces or other characters that are special t"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 11,
      "text": "eter is python -c command [arg] ..., which executes the statement(s) in command , analogous to the shell’s -coption. Since Python statements often contain spaces or other characters that are special to the shell, it is usually advised to quote command in its entirety with single quotes. Some Python modules are also useful as scripts. These can be invoked using python -m module [arg] ..., which executes the source ﬁle for moduleas if you had spelled out its full name on the command line. When a script ﬁle is used, it is sometimes useful to be able to run the script and enter interactive mode afterwards. This can be done by passing -ibefore the script. 1On Unix, the Python 3.x interpreter is by default not installed with the executable named python , so that it does not conﬂict with a simultaneously installed Python 2.x executable. 5"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 12,
      "text": "Python Tutorial, Release 3.7.0 All command line options are described in using-on-general. 2.1.1Argument Passing When known to the interpreter, the script name and additional arguments thereafter are turned into a list of strings and assigned to the argvvariable in the sysmodule. You can access this list by executing import sys. The length of the list is at least one; when no script and no arguments are given, sys.argv[0] is an empty string. When the script name is given as '-'(meaning standard input), sys.argv[0] is set to'-'. When-c command is used,sys.argv[0] is set to '-c'. When-m moduleis used,sys.argv[0] is set to the full name of the located module. Options found after -c command or-m moduleare not consumed by the Python interpreter’s option processing but left in sys.argv for the command or module to handle. 2.1.2Interactive Mode Whencommandsarereadfromatty, theinterpreterissaidtobein interactive mode . Inthismodeitprompts for the next command with the primary prompt , usually three greater-than signs ( >>>); for continuation lines it prompts with the secondary prompt , by default three dots ( ...). The interpreter prints a welcome message stating its version number and a c"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 12,
      "text": "three greater-than signs ( >>>); for continuation lines it prompts with the secondary prompt , by default three dots ( ...). The interpreter prints a welcome message stating its version number and a copyright notice before printing the ﬁrst prompt: $python3.7 Python 3.7 (default, Sep 16 2015, 09:25:04) [GCC 4.8.2] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> Continuation lines are needed when entering a multi-line construct. As an example, take a look at this if statement: >>>the_world_is_flat = True >>> ifthe_world_is_flat: ... print(\"Be careful not to fall off! \") ... Be careful not to fall off! For more on interactive mode, see Interactive Mode . 2.2The Interpreter and Its Environment 2.2.1Source Code Encoding By default, Python source ﬁles are treated as encoded in UTF-8. In that encoding, characters of most languages in the world can be used simultaneously in string literals, identiﬁers and comments — although the standard library only uses ASCII characters for identiﬁers, a convention that any portable code should follow. To display all these characters properly, your editor must recognize that the ﬁle is UTF-8, and it must use a font th"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 12,
      "text": "SCII characters for identiﬁers, a convention that any portable code should follow. To display all these characters properly, your editor must recognize that the ﬁle is UTF-8, and it must use a font that supports all the characters in the ﬁle. To declare an encoding other than the default one, a special comment line should be added as the ﬁrstline of the ﬁle. The syntax is as follows: # -*- coding: encoding -*- where encoding is one of the valid codecssupported by Python. 6 Chapter 2. Using the Python Interpreter"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 13,
      "text": "Python Tutorial, Release 3.7.0 For example, to declare that Windows-1252 encoding is to be used, the ﬁrst line of your source code ﬁle should be: # -*- coding: cp1252 -*- One exception to the ﬁrst line rule is when the source code starts with a UNIX “shebang” line . In this case, the encoding declaration should be added as the second line of the ﬁle. For example: #!/usr/bin/env python3 # -*- coding: cp1252 -*- 2.2. The Interpreter and Its Environment 7"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 14,
      "text": "Python Tutorial, Release 3.7.0 8 Chapter 2. Using the Python Interpreter"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 15,
      "text": "CHAPTER THREE AN INFORMAL INTRODUCTION TO PYTHON In the following examples, input and output are distinguished by the presence or absence of prompts ( >>> and …): to repeat the example, you must type everything after the prompt, when the prompt appears; lines that do not begin with a prompt are output from the interpreter. Note that a secondary prompt on a line by itself in an example means you must type a blank line; this is used to end a multi-line command. Many of the examples in this manual, even those entered at the interactive prompt, include comments. Comments in Python start with the hash character, #, and extend to the end of the physical line. A comment may appear at the start of a line or following whitespace or code, but not within a string literal. A hash character within a string literal is just a hash character. Since comments are to clarify code and are not interpreted by Python, they may be omitted when typing in examples. Some examples: # this is the first comment spam=1# and this is the second comment # ... and now a third! text=\"# This is not a comment because it 's inside quotes. \" 3.1Using Python as a Calculator Let’s try some simple Python commands. Start the"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 15,
      "text": "m=1# and this is the second comment # ... and now a third! text=\"# This is not a comment because it 's inside quotes. \" 3.1Using Python as a Calculator Let’s try some simple Python commands. Start the interpreter and wait for the primary prompt, >>>. (It shouldn’t take long.) 3.1.1Numbers The interpreter acts as a simple calculator: you can type an expression at it and it will write the value. Expression syntax is straightforward: the operators +,-,*and/work just like in most other languages (for example, Pascal or C); parentheses ( ()) can be used for grouping. For example: >>>2+2 4 >>>50-5*6 20 >>>(50-5*6)/4 5.0 >>>8/5# division always returns a floating point number 1.6 The integer numbers (e.g. 2,4,20) have type int, the ones with a fractional part (e.g. 5.0,1.6) have type float. We will see more about numeric types later in the tutorial. 9"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 16,
      "text": "Python Tutorial, Release 3.7.0 Division ( /) always returns a ﬂoat. To do ﬂoor division and get an integer result (discarding any fractional result) you can use the //operator; to calculate the remainder you can use %: >>>17/3# classic division returns a float 5.666666666666667 >>> >>>17//3# floor division discards the fractional part 5 >>>17%3# the % operator returns the remainder of the division 2 >>>5*3+2# result * divisor + remainder 17 With Python, it is possible to use the **operator to calculate powers1: >>>5**2# 5 squared 25 >>>2**7# 2 to the power of 7 128 The equal sign ( =) is used to assign a value to a variable. Afterwards, no result is displayed before the next interactive prompt: >>>width=20 >>>height=5*9 >>>width*height 900 If a variable is not “deﬁned” (assigned a value), trying to use it will give you an error: >>>n# try to access an undefined variable Traceback (most recent call last): File\"<stdin>\" , line1, in <module> NameError : name 'n' is not defined There is full support for ﬂoating point; operators with mixed type operands convert the integer operand to ﬂoating point: >>>4*3.75-1 14.0 In interactive mode, the last printed expression is assigned to the vari"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 16,
      "text": "ll support for ﬂoating point; operators with mixed type operands convert the integer operand to ﬂoating point: >>>4*3.75-1 14.0 In interactive mode, the last printed expression is assigned to the variable _. This means that when you are using Python as a desk calculator, it is somewhat easier to continue calculations, for example: >>>tax=12.5/100 >>>price=100.50 >>>price*tax 12.5625 >>>price+_ 113.0625 >>>round(_,2) 113.06 This variable should be treated as read-only by the user. Don’t explicitly assign a value to it — you would create an independent local variable with the same name masking the built-in variable with its magic behavior. 1Since** has higher precedence than -,-3**2 will be interpreted as -(3**2) and thus result in -9 . T o avoid this and get 9, you can use (-3)**2 . 10 Chapter 3. An Informal Introduction to Python"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 17,
      "text": "Python Tutorial, Release 3.7.0 In addition to intandfloat, Python supports other types of numbers, such as Decimal andFraction . Python also has built-in support for complex numbers, and uses the jorJsuﬃx to indicate the imaginary part (e.g. 3+5j). 3.1.2Strings Besides numbers, Python can also manipulate strings, which can be expressed in several ways. They can be enclosed in single quotes ( '...') or double quotes ( \"...\") with the same result2.\\can be used to escape quotes: >>>'spam eggs '# single quotes 'spam eggs' >>>'doesn \\'t'# use \\' to escape the single quote... \"doesn't\" >>>\"doesn't\"# ...or use double quotes instead \"doesn't\" >>>'\"Yes,\"they said. ' '\"Yes,\" they said.' >>>\"\\\"Yes, \\\"they said. \" '\"Yes,\" they said.' >>>'\"Isn \\'t,\"they said. ' '\"Isn\\'t,\" they said.' In the interactive interpreter, the output string is enclosed in quotes and special characters are escaped with backslashes. While this might sometimes look diﬀerent from the input (the enclosing quotes could change), the two strings are equivalent. The string is enclosed in double quotes if the string contains a single quote and no double quotes, otherwise it is enclosed in single quotes. The print() function prod"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 17,
      "text": "the two strings are equivalent. The string is enclosed in double quotes if the string contains a single quote and no double quotes, otherwise it is enclosed in single quotes. The print() function produces a more readable output, by omitting the enclosing quotes and by printing escaped and special characters: >>>'\"Isn \\'t,\"they said. ' '\"Isn\\'t,\" they said.' >>>print('\"Isn \\'t,\"they said. ') \"Isn't,\" they said. >>>s='First line. \\nSecond line. '# \\n means newline >>>s# without print(), \\n is included in the output 'First line.\\nSecond line.' >>>print(s)# with print(), \\n produces a new line First line. Second line. If you don’t want characters prefaced by \\to be interpreted as special characters, you can use raw strings by adding an rbefore the ﬁrst quote: >>>print('C:\\some \\name')# here \\n means newline! C:\\some ame >>>print(r'C:\\some\\name')# note the r before the quote C:\\some\\name String literals can span multiple lines. One way is using triple-quotes: \"\"\"...\"\"\" or'''...''' . End of lines are automatically included in the string, but it’s possible to prevent this by adding a \\at the end of the line. The following example: 2Unlike other languages, special characters such as \\n hav"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 17,
      "text": "lines are automatically included in the string, but it’s possible to prevent this by adding a \\at the end of the line. The following example: 2Unlike other languages, special characters such as \\n have the same meaning with both single ( '...' ) and double ( \"...\" ) quotes. The only diﬀerence between the two is that within single quotes you don’t need to escape \"(but you have to escape \\' ) and vice versa. 3.1. Using Python as a Calculator 11"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 18,
      "text": "Python Tutorial, Release 3.7.0 print(\"\"\" \\ Usage: thingy [OPTIONS] -h Display this usage message -H hostname Hostname to connect to \"\"\") produces the following output (note that the initial newline is not included): Usage: thingy [OPTIONS] -h Display this usage message -H hostname Hostname to connect to Strings can be concatenated (glued together) with the +operator, and repeated with *: >>># 3 times 'un', followed by 'ium' >>>3*'un'+'ium' 'unununium' Two or more string literals (i.e. the ones enclosed between quotes) next to each other are automatically concatenated. >>>'Py''thon' 'Python' This feature is particularly useful when you want to break long strings: >>>text=('Put several strings within parentheses ' ... 'to have them joined together. ') >>>text 'Put several strings within parentheses to have them joined together.' This only works with two literals though, not with variables or expressions: >>>prefix='Py' >>>prefix'thon'# can't concatenate a variable and a string literal ... SyntaxError: invalid syntax >>>('un'*3)'ium' ... SyntaxError: invalid syntax If you want to concatenate variables or a variable and a literal, use +: >>>prefix+'thon' 'Python' Strings can be indexed"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 18,
      "text": ". SyntaxError: invalid syntax >>>('un'*3)'ium' ... SyntaxError: invalid syntax If you want to concatenate variables or a variable and a literal, use +: >>>prefix+'thon' 'Python' Strings can be indexed(subscripted), with the ﬁrst character having index 0. There is no separate character type; a character is simply a string of size one: >>>word='Python' >>>word[0]# character in position 0 'P' >>>word[5]# character in position 5 'n' Indices may also be negative numbers, to start counting from the right: 12 Chapter 3. An Informal Introduction to Python"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 19,
      "text": "Python Tutorial, Release 3.7.0 >>>word[-1]# last character 'n' >>>word[-2]# second-last character 'o' >>>word[-6] 'P' Note that since -0 is the same as 0, negative indices start from -1. In addition to indexing, slicingis also supported. While indexing is used to obtain individual characters, slicingallows you to obtain substring: >>>word[0:2]# characters from position 0 (included) to 2 (excluded) 'Py' >>>word[2:5]# characters from position 2 (included) to 5 (excluded) 'tho' Note how the start is always included, and the end always excluded. This makes sure that s[:i] + s[i:] is always equal to s: >>>word[:2]+word[2:] 'Python' >>>word[:4]+word[4:] 'Python' Slice indices have useful defaults; an omitted ﬁrst index defaults to zero, an omitted second index defaults to the size of the string being sliced. >>>word[:2]# character from the beginning to position 2 (excluded) 'Py' >>>word[4:]# characters from position 4 (included) to the end 'on' >>>word[-2:]# characters from the second-last (included) to the end 'on' One way to remember how slices work is to think of the indices as pointing betweencharacters, with the left edge of the ﬁrst character numbered 0. Then the right edge of the "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 19,
      "text": "included) to the end 'on' One way to remember how slices work is to think of the indices as pointing betweencharacters, with the left edge of the ﬁrst character numbered 0. Then the right edge of the last character of a string of ncharacters has index n, for example: +---+---+---+---+---+---+ |P|y|t|h|o|n| +---+---+---+---+---+---+ 0123456 -6-5-4-3-2-1 The ﬁrst row of numbers gives the position of the indices 0…6 in the string; the second row gives the corresponding negative indices. The slice from ito jconsists of all characters between the edges labeled i and j, respectively. For non-negative indices, the length of a slice is the diﬀerence of the indices, if both are within bounds. For example, the length of word[1:3] is 2. Attempting to use an index that is too large will result in an error: >>>word[42]# the word only has 6 characters Traceback (most recent call last): File\"<stdin>\" , line1, in <module> IndexError : string index out of range 3.1. Using Python as a Calculator 13"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 20,
      "text": "Python Tutorial, Release 3.7.0 However, out of range slice indexes are handled gracefully when used for slicing: >>>word[4:42] 'on' >>>word[42:] '' Python strings cannot be changed — they are immutable . Therefore, assigning to an indexed position in the string results in an error: >>>word[0]='J' ... TypeError: 'str' object does not support item assignment >>>word[2:]='py' ... TypeError: 'str' object does not support item assignment If you need a diﬀerent string, you should create a new one: >>>'J'+word[1:] 'Jython' >>>word[:2]+'py' 'Pypy' The built-in function len()returns the length of a string: >>>s='supercalifragilisticexpialidocious ' >>>len(s) 34 See also: textseq Strings are examples of sequence types , and support the common operations supported by such types. string-methods Strings support a large number of methods for basic transformations and searching. f-strings String literals that have embedded expressions. formatstrings Information about string formatting with str.format() . old-string-formatting The old formatting operations invoked when strings are the left operand of the % operator are described in more detail here. 3.1.3Lists Python knows a number of compound dat"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 20,
      "text": "() . old-string-formatting The old formatting operations invoked when strings are the left operand of the % operator are described in more detail here. 3.1.3Lists Python knows a number of compound data types, used to group together other values. The most versatile is the list, which can be written as a list of comma-separated values (items) between square brackets. Lists might contain items of diﬀerent types, but usually the items all have the same type. >>>squares =[1,4,9,16,25] >>>squares [1, 4, 9, 16, 25] Like strings (and all other built-in sequence type), lists can be indexed and sliced: >>>squares[ 0]# indexing returns the item 1 >>>squares[ -1] (continues on next page) 14 Chapter 3. An Informal Introduction to Python"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 21,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) 25 >>>squares[ -3:]# slicing returns a new list [9, 16, 25] All slice operations return a new list containing the requested elements. This means that the following slice returns a new (shallow) copy of the list: >>>squares[:] [1, 4, 9, 16, 25] Lists also support operations like concatenation: >>>squares +[36,49,64,81,100] [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] Unlike strings, which are immutable , lists are a mutabletype, i.e. it is possible to change their content: >>>cubes=[1,8,27,65,125]# something's wrong here >>>4**3# the cube of 4 is 64, not 65! 64 >>>cubes[3]=64# replace the wrong value >>>cubes [1, 8, 27, 64, 125] You can also add new items at the end of the list, by using the append() method(we will see more about methods later): >>>cubes.append(216)# add the cube of 6 >>>cubes.append(7**3)# and the cube of 7 >>>cubes [1, 8, 27, 64, 125, 216, 343] Assignment to slices is also possible, and this can even change the size of the list or clear it entirely: >>>letters =['a','b','c','d','e','f','g'] >>>letters ['a', 'b', 'c', 'd', 'e', 'f', 'g'] >>># replace some values >>>letters[ 2:5]=['C','D','E'] >>>letters ['a', "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 21,
      "text": "ize of the list or clear it entirely: >>>letters =['a','b','c','d','e','f','g'] >>>letters ['a', 'b', 'c', 'd', 'e', 'f', 'g'] >>># replace some values >>>letters[ 2:5]=['C','D','E'] >>>letters ['a', 'b', 'C', 'D', 'E', 'f', 'g'] >>># now remove them >>>letters[ 2:5]=[] >>>letters ['a', 'b', 'f', 'g'] >>># clear the list by replacing all the elements with an empty list >>>letters[:] =[] >>>letters [] The built-in function len()also applies to lists: >>>letters =['a','b','c','d'] >>>len(letters) 4 It is possible to nest lists (create lists containing other lists), for example: 3.1. Using Python as a Calculator 15"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 22,
      "text": "Python Tutorial, Release 3.7.0 >>>a=['a','b','c'] >>>n=[1,2,3] >>>x=[a, n] >>>x [['a', 'b', 'c'], [1, 2, 3]] >>>x[0] ['a', 'b', 'c'] >>>x[0][1] 'b' 3.2First Steps Towards Programming Of course, we can use Python for more complicated tasks than adding two and two together. For instance, we can write an initial sub-sequence of the Fibonacci series as follows: >>># Fibonacci series: ...# the sum of two elements defines the next ...a, b=0,1 >>> whilea<10: ... print(a) ... a, b=b, a+b ... 0 1 1 2 3 5 8 This example introduces several new features. •The ﬁrst line contains a multiple assignment : the variables aandbsimultaneously get the new values 0 and 1. On the last line this is used again, demonstrating that the expressions on the right-hand side are all evaluated ﬁrst before any of the assignments take place. The right-hand side expressions are evaluated from the left to the right. •Thewhileloop executes as long as the condition (here: a < 10) remains true. In Python, like in C, any non-zero integer value is true; zero is false. The condition may also be a string or list value, in fact any sequence; anything with a non-zero length is true, empty sequences are false. The test used in "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 22,
      "text": "zero integer value is true; zero is false. The condition may also be a string or list value, in fact any sequence; anything with a non-zero length is true, empty sequences are false. The test used in the example is a simple comparison. The standard comparison operators are written the same as in C:<(less than), >(greater than), ==(equal to), <=(less than or equal to), >=(greater than or equal to) and!=(not equal to). •The bodyoftheloopis indented: indentationisPython’swayofgroupingstatements. Attheinteractive prompt, you have to type a tab or space(s) for each indented line. In practice you will prepare more complicated input for Python with a text editor; all decent text editors have an auto-indent facility. When a compound statement is entered interactively, it must be followed by a blank line to indicate completion (since the parser cannot guess when you have typed the last line). Note that each line within a basic block must be indented by the same amount. •Theprint() function writes the value of the argument(s) it is given. It diﬀers from just writing the expression you want to write (as we did earlier in the calculator examples) in the way it handles multiple arguments, ﬂoati"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 22,
      "text": "es the value of the argument(s) it is given. It diﬀers from just writing the expression you want to write (as we did earlier in the calculator examples) in the way it handles multiple arguments, ﬂoating point quantities, and strings. Strings are printed without quotes, and a space is inserted between items, so you can format things nicely, like this: 16 Chapter 3. An Informal Introduction to Python"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 23,
      "text": "Python Tutorial, Release 3.7.0 >>>i=256*256 >>>print('The value of i is ', i) The value of i is 65536 The keyword argument endcan be used to avoid the newline after the output, or end the output with a diﬀerent string: >>>a, b=0,1 >>> whilea<1000: ... print(a, end=',') ... a, b=b, a+b ... 0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987, 3.2. First Steps Towards Programming 17"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 24,
      "text": "Python Tutorial, Release 3.7.0 18 Chapter 3. An Informal Introduction to Python"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 25,
      "text": "CHAPTER FOUR MORE CONTROL FLOW TOOLS Besides the whilestatement just introduced, Python knows the usual control ﬂow statements known from other languages, with some twists. 4.1 ifStatements Perhaps the most well-known statement type is the ifstatement. For example: >>>x=int(input(\"Please enter an integer: \")) Please enter an integer: 42 >>> ifx<0: ... x=0 ... print('Negative changed to zero ') ... elifx==0: ... print('Zero') ... elifx==1: ... print('Single') ... else: ... print('More') ... More There can be zero or more elifparts, and the elsepart is optional. The keyword ‘ elif’ is short for ‘else if’, and is useful to avoid excessive indentation. An if…elif…elif… sequence is a substitute for the switchorcasestatements found in other languages. 4.2 forStatements Theforstatement in Python diﬀers a bit from what you may be used to in C or Pascal. Rather than always iterating over an arithmetic progression of numbers (like in Pascal), or giving the user the ability to deﬁne both the iteration step and halting condition (as C), Python’s forstatement iterates over the items of any sequence (a list or a string), in the order that they appear in the sequence. For example (no pun intended"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 25,
      "text": "ation step and halting condition (as C), Python’s forstatement iterates over the items of any sequence (a list or a string), in the order that they appear in the sequence. For example (no pun intended): >>># Measure some strings: ...words=['cat','window','defenestrate '] >>> forwinwords: ... print(w,len(w)) ... cat 3 window 6 defenestrate 12 19"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 26,
      "text": "Python Tutorial, Release 3.7.0 If you need to modify the sequence you are iterating over while inside the loop (for example to duplicate selected items), it is recommended that you ﬁrst make a copy. Iterating over a sequence does not implicitly make a copy. The slice notation makes this especially convenient: >>> forwinwords[:]: # Loop over a slice copy of the entire list. ... iflen(w)>6: ... words.insert(0, w) ... >>>words ['defenestrate', 'cat', 'window', 'defenestrate'] Withfor w in words: , the example would attempt to create an inﬁnite list, inserting defenestrate over and over again. 4.3The range()Function If you do need to iterate over a sequence of numbers, the built-in function range() comes in handy. It generates arithmetic progressions: >>> foriinrange(5): ... print(i) ... 0 1 2 3 4 The given end point is never part of the generated sequence; range(10) generates 10 values, the legal indices for items of a sequence of length 10. It is possible to let the range start at another number, or to specify a diﬀerent increment (even negative; sometimes this is called the ‘step’): range(5,10) 5,6,7,8,9 range(0,10,3) 0,3,6,9 range(-10,-100,-30) -10,-40,-70 To iterate over the indic"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 26,
      "text": "r number, or to specify a diﬀerent increment (even negative; sometimes this is called the ‘step’): range(5,10) 5,6,7,8,9 range(0,10,3) 0,3,6,9 range(-10,-100,-30) -10,-40,-70 To iterate over the indices of a sequence, you can combine range() andlen()as follows: >>>a=['Mary','had','a','little','lamb'] >>> foriinrange(len(a)): ... print(i, a[i]) ... 0 Mary 1 had 2 a 3 little 4 lamb In most such cases, however, it is convenient to use the enumerate() function, see Looping T echniques . A strange thing happens if you just print a range: 20 Chapter 4. More Control Flow Tools"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 27,
      "text": "Python Tutorial, Release 3.7.0 >>>print(range(10)) range(0, 10) In many ways the object returned by range() behaves as if it is a list, but in fact it isn’t. It is an object which returns the successive items of the desired sequence when you iterate over it, but it doesn’t really make the list, thus saving space. We say such an object is iterable, that is, suitable as a target for functions and constructs that expect something from which they can obtain successive items until the supply is exhausted. We have seen that theforstatement is such an iterator. The function list()is another; it creates lists from iterables: >>>list(range(5)) [0, 1, 2, 3, 4] Later we will see more functions that return iterables and take iterables as argument. 4.4 breakand continue Statements, and elseClauses on Loops Thebreakstatement, like in C, breaks out of the innermost enclosing fororwhileloop. Loop statements may have an elseclause; it is executed when the loop terminates through exhaustion of the list (with for) or when the condition becomes false (with while), but not when the loop is terminated by abreakstatement. This is exempliﬁed by the following loop, which searches for prime numbers: >>> for"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 27,
      "text": "(with for) or when the condition becomes false (with while), but not when the loop is terminated by abreakstatement. This is exempliﬁed by the following loop, which searches for prime numbers: >>> forninrange(2,10): ... forxinrange(2, n): ... ifn%x==0: ... print(n,'equals', x,'*', n//x) ... break ... else: ... # loop fell through without finding a factor ... print(n,'is a prime number ') ... 2 is a prime number 3 is a prime number 4 equals 2 * 2 5 is a prime number 6 equals 2 * 3 7 is a prime number 8 equals 2 * 4 9 equals 3 * 3 (Yes, this is the correct code. Look closely: the elseclause belongs to the forloop, nottheifstatement.) When used with a loop, the elseclause has more in common with the elseclause of a trystatement than it does that of ifstatements: a trystatement’s elseclause runs when no exception occurs, and a loop’s else clause runs when no breakoccurs. For more on the trystatement and exceptions, see Handling Exceptions . Thecontinue statement, also borrowed from C, continues with the next iteration of the loop: >>> fornum inrange(2,10): ... ifnum%2==0: ... print(\"Found an even number \", num) ... continue ... print(\"Found a number \", num) Found an even number 2 (cont"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 27,
      "text": "inues with the next iteration of the loop: >>> fornum inrange(2,10): ... ifnum%2==0: ... print(\"Found an even number \", num) ... continue ... print(\"Found a number \", num) Found an even number 2 (continues on next page) 4.4. breakand continue Statements, and elseClauses on Loops 21"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 28,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) Found a number 3 Found an even number 4 Found a number 5 Found an even number 6 Found a number 7 Found an even number 8 Found a number 9 4.5 passStatements Thepassstatement does nothing. It can be used when a statement is required syntactically but the program requires no action. For example: >>> while True: ... pass# Busy-wait for keyboard interrupt (Ctrl+C) ... This is commonly used for creating minimal classes: >>> class MyEmptyClass : ... pass ... Another place passcan be used is as a place-holder for a function or conditional body when you are working on new code, allowing you to keep thinking at a more abstract level. The passis silently ignored: >>> definitlog(*args): ... pass# Remember to implement this! ... 4.6Deﬁning Functions We can create a function that writes the Fibonacci series to an arbitrary boundary: >>> deffib(n): # write Fibonacci series up to n ... \"\"\"Print a Fibonacci series up to n.\"\"\" ... a, b=0,1 ... whilea<n: ... print(a, end='') ... a, b=b, a+b ... print() ... >>># Now call the function we just defined: ...fib(2000) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 The keyword defintroduce"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 28,
      "text": ". whilea<n: ... print(a, end='') ... a, b=b, a+b ... print() ... >>># Now call the function we just defined: ...fib(2000) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 The keyword defintroduces a function deﬁnition . It must be followed by the function name and the parenthesized list of formal parameters. The statements that form the body of the function start at the next line, and must be indented. The ﬁrst statement of the function body can optionally be a string literal; this string literal is the function’s documentation string, or docstring . (More about docstrings can be found in the section Documentation 22 Chapter 4. More Control Flow Tools"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 29,
      "text": "Python Tutorial, Release 3.7.0 Strings.) There are tools which use docstrings to automatically produce online or printed documentation, or to let the user interactively browse through code; it’s good practice to include docstrings in code that you write, so make a habit of it. The execution of a function introduces a new symbol table used for the local variables of the function. More precisely, all variable assignments in a function store the value in the local symbol table; whereas variable references ﬁrst look in the local symbol table, then in the local symbol tables of enclosing functions, then in the global symbol table, and ﬁnally in the table of built-in names. Thus, global variables cannot be directly assigned a value within a function (unless named in a globalstatement), although they may be referenced. The actual parameters (arguments) to a function call are introduced in the local symbol table of the called function when it is called; thus, arguments are passed using cal l by value (where the valueis always an object reference , not the value of the object).1When a function calls another function, a new local symbol table is created for that call. A function deﬁnition in"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 29,
      "text": "y value (where the valueis always an object reference , not the value of the object).1When a function calls another function, a new local symbol table is created for that call. A function deﬁnition introduces the function name in the current symbol table. The value of the function name has a type that is recognized by the interpreter as a user-deﬁned function. This value can be assigned to another name which can then also be used as a function. This serves as a general renaming mechanism: >>>fib <function fib at 10042ed0> >>>f=fib >>>f(100) 0 1 1 2 3 5 8 13 21 34 55 89 Coming from other languages, you might object that fibis not a function but a procedure since it doesn’t return a value. In fact, even functions without a returnstatement do return a value, albeit a rather boring one. This value is called None(it’s a built-in name). Writing the value Noneis normally suppressed by the interpreter if it would be the only value written. You can see it if you really want to using print(): >>>fib(0) >>>print(fib(0)) None It is simple to write a function that returns a list of the numbers of the Fibonacci series, instead of printing it: >>> deffib2(n):# return Fibonacci series up to n ... "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 29,
      "text": ">fib(0) >>>print(fib(0)) None It is simple to write a function that returns a list of the numbers of the Fibonacci series, instead of printing it: >>> deffib2(n):# return Fibonacci series up to n ... \"\"\"Return a list containing the Fibonacci series up to n.\"\"\" ... result=[] ... a, b=0,1 ... whilea<n: ... result.append(a) # see below ... a, b=b, a+b ... returnresult ... >>>f100=fib2(100)# call it >>>f100 # write the result [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] This example, as usual, demonstrates some new Python features: •Thereturnstatement returns with a value from a function. returnwithout an expression argument returnsNone. Falling oﬀ the end of a function also returns None. •The statement result.append(a) calls a methodof the list object result. A method is a function that ‘belongs’ to an object and is named obj.methodname , whereobjis some object (this may be an 1Actually , cal l by object reference would be a better description, since if a mutable object is passed, the caller will see any changes the callee makes to it (items inserted into a list). 4.6. Deﬁning Functions 23"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 30,
      "text": "Python Tutorial, Release 3.7.0 expression), and methodname is the name of a method that is deﬁned by the object’s type. Diﬀerent types deﬁne diﬀerent methods. Methods of diﬀerent types may have the same name without causing ambiguity. (It is possible to deﬁne your own object types and methods, using classes, see Classes) The methodappend() shown in the example is deﬁned for list objects; it adds a new element at the end of the list. In this example it is equivalent to result = result + [a] , but more eﬃcient. 4.7More on Deﬁning Functions It is also possible to deﬁne functions with a variable number of arguments. There are three forms, which can be combined. 4.7.1Default Argument Values The most useful form is to specify a default value for one or more arguments. This creates a function that can be called with fewer arguments than it is deﬁned to allow. For example: defask_ok(prompt, retries =4, reminder ='Please try again! '): while True: ok=input(prompt) ifok in('y','ye','yes'): return True ifok in('n','no','nop','nope'): return False retries =retries -1 ifretries <0: raiseValueError ('invalid user response ') print(reminder) This function can be called in several ways: •giving on"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 30,
      "text": "n True ifok in('n','no','nop','nope'): return False retries =retries -1 ifretries <0: raiseValueError ('invalid user response ') print(reminder) This function can be called in several ways: •giving only the mandatory argument: ask_ok('Do you really want to quit?') •giving one of the optional arguments: ask_ok('OK to overwrite the file?', 2) •or even giving all arguments: ask_ok('OK to overwrite the file?', 2, 'Come on, only yes or no!') This example also introduces the inkeyword. This tests whether or not a sequence contains a certain value. The default values are evaluated at the point of function deﬁnition in the deﬁning scope, so that i=5 deff(arg=i): print(arg) i=6 f() will print 5. Important warning: The default value is evaluated only once. This makes a diﬀerence when the default is a mutable object such as a list, dictionary, or instances of most classes. For example, the following function accumulates the arguments passed to it on subsequent calls: 24 Chapter 4. More Control Flow Tools"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 31,
      "text": "Python Tutorial, Release 3.7.0 deff(a, L=[]): L.append(a) returnL print(f(1)) print(f(2)) print(f(3)) This will print [1] [1,2] [1,2,3] If you don’t want the default to be shared between subsequent calls, you can write the function like this instead: deff(a, L=None): ifL is None: L=[] L.append(a) returnL 4.7.2Keyword Arguments Functions can also be called using keyword arguments of the form kwarg=value . For instance, the following function: defparrot(voltage, state ='a stiff', action ='voom',type='Norwegian Blue '): print(\"-- This parrot wouldn 't\", action, end ='') print(\"if you put \", voltage, \"volts through it. \") print(\"-- Lovely plumage, the \",type) print(\"-- It's\", state, \"!\") accepts one required argument ( voltage) and three optional arguments ( state,action, andtype). This function can be called in any of the following ways: parrot(1000) # 1 positional argument parrot(voltage =1000) # 1 keyword argument parrot(voltage =1000000, action ='VOOOOOM') # 2 keyword arguments parrot(action ='VOOOOOM', voltage =1000000) # 2 keyword arguments parrot('a million ','bereft of life ','jump') # 3 positional arguments parrot('a thousand ', state='pushing up the daisies ')# 1 positional, "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 31,
      "text": "action ='VOOOOOM', voltage =1000000) # 2 keyword arguments parrot('a million ','bereft of life ','jump') # 3 positional arguments parrot('a thousand ', state='pushing up the daisies ')# 1 positional, 1 keyword but all the following calls would be invalid: parrot() # required argument missing parrot(voltage =5.0,'dead')# non-keyword argument after a keyword argument parrot(110, voltage =220)# duplicate value for the same argument parrot(actor ='John Cleese ')# unknown keyword argument In a function call, keyword arguments must follow positional arguments. All the keyword arguments passed must match one of the arguments accepted by the function (e.g. actoris not a valid argument for theparrotfunction), and their order is not important. This also includes non-optional arguments (e.g. parrot(voltage=1000) is valid too). No argument may receive a value more than once. Here’s an example that fails due to this restriction: 4.7. More on Deﬁning Functions 25"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 32,
      "text": "Python Tutorial, Release 3.7.0 >>> deffunction (a): ... pass ... >>>function( 0, a=0) Traceback (most recent call last): File\"<stdin>\" , line1, in <module> TypeError : function() got multiple values for keyword argument 'a' When a ﬁnal formal parameter of the form **nameis present, it receives a dictionary (see typesmapping) containing all keyword arguments except for those corresponding to a formal parameter. This may be combined with a formal parameter of the form *name(described in the next subsection) which receives a tuple containing the positional arguments beyond the formal parameter list. ( *namemust occur before **name.) For example, if we deﬁne a function like this: defcheeseshop (kind,*arguments, **keywords): print(\"-- Do you have any \", kind, \"?\") print(\"-- I'm sorry, we 're all out of \", kind) forarg inarguments: print(arg) print(\"-\"*40) forkw inkeywords: print(kw,\":\", keywords[kw]) It could be called like this: cheeseshop( \"Limburger \",\"It's very runny, sir. \", \"It's really very, VERY runny, sir. \", shopkeeper =\"Michael Palin \", client=\"John Cleese \", sketch=\"Cheese Shop Sketch \") and of course it would print: -- Do you have any Limburger ? -- I'm sorry, we're all out"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 32,
      "text": "ly very, VERY runny, sir. \", shopkeeper =\"Michael Palin \", client=\"John Cleese \", sketch=\"Cheese Shop Sketch \") and of course it would print: -- Do you have any Limburger ? -- I'm sorry, we're all out of Limburger It's very runny, sir. It's really very, VERY runny, sir. ---------------------------------------- shopkeeper : Michael Palin client : John Cleese sketch : Cheese Shop Sketch Note that the order in which the keyword arguments are printed is guaranteed to match the order in which they were provided in the function call. 4.7.3Arbitrary Argument Lists Finally, the least frequently used option is to specify that a function can be called with an arbitrary number of arguments. These arguments will be wrapped up in a tuple (see T uples and Sequences ). Before the variable number of arguments, zero or more normal arguments may occur. defwrite_multiple_items (file, separator, *args): file.write(separator .join(args)) Normally, these variadic arguments will be last in the list of formal parameters, because they scoop up all remaining input arguments that are passed to the function. Any formal parameters which occur after 26 Chapter 4. More Control Flow Tools"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 33,
      "text": "Python Tutorial, Release 3.7.0 the*argsparameter are ‘keyword-only’ arguments, meaning that they can only be used as keywords rather than positional arguments. >>> defconcat(*args, sep =\"/\"): ... returnsep.join(args) ... >>>concat(\"earth\",\"mars\",\"venus\") 'earth/mars/venus' >>>concat(\"earth\",\"mars\",\"venus\", sep=\".\") 'earth.mars.venus' 4.7.4Unpacking Argument Lists The reverse situation occurs when the arguments are already in a list or tuple but need to be unpacked for a function call requiring separate positional arguments. For instance, the built-in range() function expects separate startand stoparguments. If they are not available separately, write the function call with the *-operator to unpack the arguments out of a list or tuple: >>>list(range(3,6)) # normal call with separate arguments [3, 4, 5] >>>args=[3,6] >>>list(range(*args)) # call with arguments unpacked from a list [3, 4, 5] In the same fashion, dictionaries can deliver keyword arguments with the **-operator: >>> defparrot(voltage, state ='a stiff', action ='voom'): ... print(\"-- This parrot wouldn 't\", action, end ='') ... print(\"if you put \", voltage, \"volts through it. \", end='') ... print(\"E's\", state, \"!\") ... >>"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 33,
      "text": "t(voltage, state ='a stiff', action ='voom'): ... print(\"-- This parrot wouldn 't\", action, end ='') ... print(\"if you put \", voltage, \"volts through it. \", end='') ... print(\"E's\", state, \"!\") ... >>>d={\"voltage\":\"four million \",\"state\":\"bleedin'demised\",\"action\":\"VOOM\"} >>>parrot(**d) -- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised ! 4.7.5Lambda Expressions Small anonymous functions can be created with the lambdakeyword. This function returns the sum of its two arguments: lambda a, b: a+b . Lambda functions can be used wherever function objects are required. They are syntactically restricted to a single expression. Semantically, they are just syntactic sugar for a normal function deﬁnition. Like nested function deﬁnitions, lambda functions can reference variables from the containing scope: >>> defmake_incrementor (n): ... return lambdax: x+n ... >>>f=make_incrementor( 42) >>>f(0) 42 >>>f(1) 43 The above example uses a lambda expression to return a function. Another use is to pass a small function as an argument: 4.7. More on Deﬁning Functions 27"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 34,
      "text": "Python Tutorial, Release 3.7.0 >>>pairs=[(1,'one'), (2,'two'), (3,'three'), (4,'four')] >>>pairs.sort(key =lambdapair: pair[ 1]) >>>pairs [(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')] 4.7.6Documentation Strings Here are some conventions about the content and formatting of documentation strings. The ﬁrst line should always be a short, concise summary of the object’s purpose. For brevity, it should not explicitly state the object’s name or type, since these are available by other means (except if the name happens to be a verb describing a function’s operation). This line should begin with a capital letter and end with a period. If there are more lines in the documentation string, the second line should be blank, visually separating the summary from the rest of the description. The following lines should be one or more paragraphs describing the object’s calling conventions, its side eﬀects, etc. The Python parser does not strip indentation from multi-line string literals in Python, so tools that process documentation have to strip indentation if desired. This is done using the following convention. The ﬁrst non-blank line afterthe ﬁrst line of the string determines the amount of"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 34,
      "text": "so tools that process documentation have to strip indentation if desired. This is done using the following convention. The ﬁrst non-blank line afterthe ﬁrst line of the string determines the amount of indentation for the entire documentation string. (We can’t use the ﬁrst line since it is generally adjacent to the string’s opening quotes so its indentation is not apparent in the string literal.) Whitespace “equivalent” to this indentation is then stripped from the start of all lines of the string. Lines that are indented less should not occur, but if they occur all their leading whitespace should be stripped. Equivalence of whitespace should be tested after expansion of tabs (to 8 spaces, normally). Here is an example of a multi-line docstring: >>> defmy_function (): ... \"\"\"Do nothing, but document it. ... ... No, really, it doesn't do anything. ... \"\"\" ... pass ... >>>print(my_function .__doc__) Do nothing, but document it. No, really, it doesn't do anything. 4.7.7Function Annotations Function annotations are completely optional metadata information about the types used by user-deﬁned functions (see PEP 3107 and PEP 484 for more information). Annotations are stored in the __annota"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 34,
      "text": " Function annotations are completely optional metadata information about the types used by user-deﬁned functions (see PEP 3107 and PEP 484 for more information). Annotations are stored in the __annotations__ attribute of the function as a dictionary and have no eﬀect on any other part of the function. Parameter annotations are deﬁned by a colon after the parameter name, followed by an expression evaluating to the value of the annotation. Return annotations are deﬁned by a literal->, followed by an expression, between the parameter list and the colon denoting the end of the def statement. The following example has a positional argument, a keyword argument, and the return value annotated: >>> deff(ham:str, eggs: str='eggs')->str: ... print(\"Annotations: \", f.__annotations__ ) (continues on next page) 28 Chapter 4. More Control Flow Tools"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 35,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) ... print(\"Arguments: \", ham, eggs) ... returnham+'and'+eggs ... >>>f('spam') Annotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class 'str'>} Arguments: spam eggs 'spam and eggs' 4.8Intermezzo: Coding Style Now that you are about to write longer, more complex pieces of Python, it is a good time to talk about coding style . Most languages can be written (or more concise, formatted ) in diﬀerent styles; some are more readable than others. Making it easy for others to read your code is always a good idea, and adopting a nice coding style helps tremendously for that. For Python, PEP 8 has emerged as the style guide that most projects adhere to; it promotes a very readable and eye-pleasing coding style. Every Python developer should read it at some point; here are the most important points extracted for you: •Use 4-space indentation, and no tabs. 4 spaces are a good compromise between small indentation (allows greater nesting depth) and large indentation (easier to read). Tabs introduce confusion, and are best left out. •Wrap lines so that they don’t exceed 79 characters. This helps users with small displa"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 35,
      "text": " greater nesting depth) and large indentation (easier to read). Tabs introduce confusion, and are best left out. •Wrap lines so that they don’t exceed 79 characters. This helps users with small displays and makes it possible to have several code ﬁles side-by-side on larger displays. •Use blank lines to separate functions and classes, and larger blocks of code inside functions. •When possible, put comments on a line of their own. •Use docstrings. •Use spaces around operators and after commas, but not directly inside bracketing constructs: a = f(1, 2) + g(3, 4) . •Name your classes and functions consistently; the convention is to use CamelCase for classes and lower_case_with_underscores for functions and methods. Always use selfas the name for the ﬁrst method argument (see A First Look at Classes for more on classes and methods). •Don’t use fancy encodings if your code is meant to be used in international environments. Python’s default, UTF-8, or even plain ASCII work best in any case. •Likewise, don’t use non-ASCII characters in identiﬁers if there is only the slightest chance people speaking a diﬀerent language will read or maintain the code. 4.8. Intermezzo: Coding Style 29"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 36,
      "text": "Python Tutorial, Release 3.7.0 30 Chapter 4. More Control Flow Tools"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 37,
      "text": "CHAPTER FIVE DATA STRUCTURES This chapter describes some things you’ve learned about already in more detail, and adds some new things as well. 5.1More on Lists The list data type has some more methods. Here are all of the methods of list objects: list. append(x) Add an item to the end of the list. Equivalent to a[len(a):] = [x] . list. extend(iterable) Extend the list by appending all the items from the iterable. Equivalent to a[len(a):] = iterable . list. insert(i,x) Insert an item at a given position. The ﬁrst argument is the index of the element before which to insert, so a.insert(0, x) inserts at the front of the list, and a.insert(len(a), x) is equivalent to a.append(x) . list. remove(x) Remove the ﬁrst item from the list whose value is equal to x. It raises a ValueError if there is no such item. list. pop([i]) Removetheitematthegivenpositioninthelist, andreturnit. Ifnoindexisspeciﬁed, a.pop() removes and returns the last item in the list. (The square brackets around the iin the method signature denote that the parameter is optional, not that you should type square brackets at that position. You will see this notation frequently in the Python Library Reference.) list. clear() "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 37,
      "text": "ethod signature denote that the parameter is optional, not that you should type square brackets at that position. You will see this notation frequently in the Python Library Reference.) list. clear() Remove all items from the list. Equivalent to del a[:] . list. index(x[,start [,end ] ]) Return zero-based index in the list of the ﬁrst item whose value is equal to x. Raises a ValueError if there is no such item. The optional arguments startand endare interpreted as in the slice notation and are used to limit the search to a particular subsequence of the list. The returned index is computed relative to the beginning of the full sequence rather than the startargument. list. count(x) Return the number of times xappears in the list. list. sort(key=None ,reverse=F alse ) Sort the items of the list in place (the arguments can be used for sort customization, see sorted() for their explanation). 31"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 38,
      "text": "Python Tutorial, Release 3.7.0 list. reverse() Reverse the elements of the list in place. list. copy() Return a shallow copy of the list. Equivalent to a[:]. An example that uses most of the list methods: >>>fruits=['orange','apple','pear','banana','kiwi','apple','banana'] >>>fruits.count('apple') 2 >>>fruits.count('tangerine ') 0 >>>fruits.index('banana') 3 >>>fruits.index('banana',4)# Find next banana starting a position 4 6 >>>fruits.reverse() >>>fruits ['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange'] >>>fruits.append('grape') >>>fruits ['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape'] >>>fruits.sort() >>>fruits ['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear'] >>>fruits.pop() 'pear' You might have noticed that methods like insert,removeorsortthat only modify the list have no return value printed – they return the default None.1This is a design principle for all mutable data structures in Python. 5.1.1Using Lists as Stacks The list methods make it very easy to use a list as a stack, where the last element added is the ﬁrst element retrieved (“last-in, ﬁrst-out”). To add an item to the top of the stack, use append() "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 38,
      "text": "cks The list methods make it very easy to use a list as a stack, where the last element added is the ﬁrst element retrieved (“last-in, ﬁrst-out”). To add an item to the top of the stack, use append() . To retrieve an item from the top of the stack, use pop()without an explicit index. For example: >>>stack=[3,4,5] >>>stack.append(6) >>>stack.append(7) >>>stack [3, 4, 5, 6, 7] >>>stack.pop() 7 >>>stack [3, 4, 5, 6] >>>stack.pop() 6 >>>stack.pop() 5 >>>stack [3, 4] 1Other languages may return the mutated object, which allows method chaining, such as d->insert(\"a\")->remove(\"b\")->sort(); . 32 Chapter 5. Data Structures"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 39,
      "text": "Python Tutorial, Release 3.7.0 5.1.2Using Lists as Queues It is also possible to use a list as a queue, where the ﬁrst element added is the ﬁrst element retrieved (“ﬁrst-in, ﬁrst-out”); however, lists are not eﬃcient for this purpose. While appends and pops from the end of list are fast, doing inserts or pops from the beginning of a list is slow (because all of the other elements have to be shifted by one). To implement a queue, use collections.deque which was designed to have fast appends and pops from both ends. For example: >>> from collections importdeque >>>queue=deque([\"Eric\",\"John\",\"Michael\"]) >>>queue.append(\"Terry\") # Terry arrives >>>queue.append(\"Graham\") # Graham arrives >>>queue.popleft() # The first to arrive now leaves 'Eric' >>>queue.popleft() # The second to arrive now leaves 'John' >>>queue # Remaining queue in order of arrival deque(['Michael', 'Terry', 'Graham']) 5.1.3List Comprehensions List comprehensions provide a concise way to create lists. Common applications are to make new lists where each element is the result of some operations applied to each member of another sequence or iterable, or to create a subsequence of those elements that satisfy a certain co"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 39,
      "text": "are to make new lists where each element is the result of some operations applied to each member of another sequence or iterable, or to create a subsequence of those elements that satisfy a certain condition. For example, assume we want to create a list of squares, like: >>>squares =[] >>> forxinrange(10): ... squares.append(x **2) ... >>>squares [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] Note that this creates (or overwrites) a variable named xthat still exists after the loop completes. We can calculate the list of squares without any side eﬀects using: squares =list(map(lambdax: x**2,range(10))) or, equivalently: squares =[x**2 forxinrange(10)] which is more concise and readable. A list comprehension consists of brackets containing an expression followed by a forclause, then zero or morefororifclauses. The result will be a new list resulting from evaluating the expression in the context of theforandifclauses which follow it. For example, this listcomp combines the elements of two lists if they are not equal: >>>[(x, y) forxin[1,2,3]fory in[3,1,4] ifx!=y] [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)] and it’s equivalent to: 5.1. More on Lists 33"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 40,
      "text": "Python Tutorial, Release 3.7.0 >>>combs=[] >>> forxin[1,2,3]: ... foryin[3,1,4]: ... ifx!=y: ... combs.append((x, y)) ... >>>combs [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)] Note how the order of the forandifstatements is the same in both these snippets. If the expression is a tuple (e.g. the (x, y)in the previous example), it must be parenthesized. >>>vec=[-4,-2,0,2,4] >>># create a new list with the values doubled >>>[x*2 forxinvec] [-8, -4, 0, 4, 8] >>># filter the list to exclude negative numbers >>>[x forx invec ifx>=0] [0, 2, 4] >>># apply a function to all the elements >>>[abs(x) forxinvec] [4, 2, 0, 2, 4] >>># call a method on each element >>>freshfruit =['banana','loganberry ','passion fruit '] >>>[weapon.strip() forweapon infreshfruit] ['banana', 'loganberry', 'passion fruit'] >>># create a list of 2-tuples like (number, square) >>>[(x, x**2)forxinrange(6)] [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)] >>># the tuple must be parenthesized, otherwise an error is raised >>>[x, x**2 forx inrange(6)] File \"<stdin>\", line 1, in <module> [x, x**2 for x in range(6)] ^ SyntaxError: invalid syntax >>># flatten a list using a listcomp with two 'for' >>>vec=[[1,2,"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 40,
      "text": "r is raised >>>[x, x**2 forx inrange(6)] File \"<stdin>\", line 1, in <module> [x, x**2 for x in range(6)] ^ SyntaxError: invalid syntax >>># flatten a list using a listcomp with two 'for' >>>vec=[[1,2,3], [4,5,6], [7,8,9]] >>>[num forelem invec fornum inelem] [1, 2, 3, 4, 5, 6, 7, 8, 9] List comprehensions can contain complex expressions and nested functions: >>> from math importpi >>>[str(round(pi, i)) foriinrange(1,6)] ['3.1', '3.14', '3.142', '3.1416', '3.14159'] 5.1.4Nested List Comprehensions The initial expression in a list comprehension can be any arbitrary expression, including another list com- prehension. Consider the following example of a 3x4 matrix implemented as a list of 3 lists of length 4: >>>matrix=[ ... [1,2,3,4], ... [5,6,7,8], (continues on next page) 34 Chapter 5. Data Structures"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 41,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) ... [9,10,11,12], ...] The following list comprehension will transpose rows and columns: >>>[[row[i] forrow inmatrix] fori inrange(4)] [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]] As we saw in the previous section, the nested listcomp is evaluated in the context of the forthat follows it, so this example is equivalent to: >>>transposed =[] >>> foriinrange(4): ... transposed .append([row[i] forrow inmatrix]) ... >>>transposed [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]] which, in turn, is the same as: >>>transposed =[] >>> foriinrange(4): ... # the following 3 lines implement the nested listcomp ... transposed_row =[] ... forrow inmatrix: ... transposed_row .append(row[i]) ... transposed .append(transposed_row) ... >>>transposed [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]] In the real world, you should prefer built-in functions to complex ﬂow statements. The zip()function would do a great job for this use case: >>>list(zip(*matrix)) [(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)] See Unpacking Argument Lists for details on the asterisk in this line. 5.2The delstatement There is a way to remove an item from a list"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 41,
      "text": "st(zip(*matrix)) [(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)] See Unpacking Argument Lists for details on the asterisk in this line. 5.2The delstatement There is a way to remove an item from a list given its index instead of its value: the delstatement. This diﬀers from the pop()method which returns a value. The delstatement can also be used to remove slices from a list or clear the entire list (which we did earlier by assignment of an empty list to the slice). For example: >>>a=[-1,1,66.25,333,333,1234.5] >>> dela[0] >>>a [1, 66.25, 333, 333, 1234.5] >>> dela[2:4] >>>a [1, 66.25, 1234.5] >>> dela[:] (continues on next page) 5.2. The delstatement 35"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 42,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) >>>a [] delcan also be used to delete entire variables: >>> dela Referencing the name ahereafter is an error (at least until another value is assigned to it). We’ll ﬁnd other uses fordellater. 5.3Tuples and Sequences We saw that lists and strings have many common properties, such as indexing and slicing operations. They are two examples of sequence data types (see typesseq). Since Python is an evolving language, other sequence data types may be added. There is also another standard sequence data type: the tuple. A tuple consists of a number of values separated by commas, for instance: >>>t=12345,54321,'hello!' >>>t[0] 12345 >>>t (12345, 54321, 'hello!') >>># Tuples may be nested: ...u=t, (1,2,3,4,5) >>>u ((12345, 54321, 'hello!'), (1, 2, 3, 4, 5)) >>># Tuples are immutable: ...t[0]=88888 Traceback (most recent call last): File\"<stdin>\" , line1, in <module> TypeError : 'tuple' object does not support item assignment >>># but they can contain mutable objects: ...v=([1,2,3], [3,2,1]) >>>v ([1, 2, 3], [3, 2, 1]) As you see, on output tuples are always enclosed in parentheses, so that nested tuples are interpreted correctly; "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 42,
      "text": "they can contain mutable objects: ...v=([1,2,3], [3,2,1]) >>>v ([1, 2, 3], [3, 2, 1]) As you see, on output tuples are always enclosed in parentheses, so that nested tuples are interpreted correctly; they may be input with or without surrounding parentheses, although often parentheses are necessary anyway (if the tuple is part of a larger expression). It is not possible to assign to the individual items of a tuple, however it is possible to create tuples which contain mutable objects, such as lists. Though tuples may seem similar to lists, they are often used in diﬀerent situations and for diﬀerent purposes. Tuples are immutable , and usually contain a heterogeneous sequence of elements that are accessed via unpacking (see later in this section) or indexing (or even by attribute in the case of namedtuples ). Lists are mutable, and their elements are usually homogeneous and are accessed by iterating over the list. A special problem is the construction of tuples containing 0 or 1 items: the syntax has some extra quirks to accommodate these. Empty tuples are constructed by an empty pair of parentheses; a tuple with one item is constructed by following a value with a comma (it is not s"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 42,
      "text": "the syntax has some extra quirks to accommodate these. Empty tuples are constructed by an empty pair of parentheses; a tuple with one item is constructed by following a value with a comma (it is not suﬃcient to enclose a single value in parentheses). Ugly, but eﬀective. For example: >>>empty=() >>>singleton ='hello',# <-- note trailing comma >>>len(empty) (continues on next page) 36 Chapter 5. Data Structures"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 43,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) 0 >>>len(singleton) 1 >>>singleton ('hello',) The statement t = 12345, 54321, 'hello!' is an example of tuple packing : the values 12345,54321and 'hello!' are packed together in a tuple. The reverse operation is also possible: >>>x, y, z =t This is called, appropriately enough, sequence unpacking and works for any sequence on the right-hand side. Sequence unpacking requires that there are as many variables on the left side of the equals sign as there are elements in the sequence. Note that multiple assignment is really just a combination of tuple packing and sequence unpacking. 5.4Sets Python also includes a data type for sets. A set is an unordered collection with no duplicate elements. Basic uses include membership testing and eliminating duplicate entries. Set objects also support mathematical operations like union, intersection, diﬀerence, and symmetric diﬀerence. Curly braces or the set()function can be used to create sets. Note: to create an empty set you have to use set(), not{}; the latter creates an empty dictionary, a data structure that we discuss in the next section. Here is a brief demonstration: >>>basket={"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 43,
      "text": "ets. Note: to create an empty set you have to use set(), not{}; the latter creates an empty dictionary, a data structure that we discuss in the next section. Here is a brief demonstration: >>>basket={'apple','orange','apple','pear','orange','banana'} >>>print(basket) # show that duplicates have been removed {'orange', 'banana', 'pear', 'apple'} >>>'orange' inbasket # fast membership testing True >>>'crabgrass ' inbasket False >>># Demonstrate set operations on unique letters from two words ... >>>a=set('abracadabra ') >>>b=set('alacazam ') >>>a # unique letters in a {'a', 'r', 'b', 'c', 'd'} >>>a-b # letters in a but not in b {'r', 'd', 'b'} >>>a|b # letters in a or b or both {'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'} >>>a&b # letters in both a and b {'a', 'c'} >>>a^b # letters in a or b but not both {'r', 'd', 'b', 'm', 'z', 'l'} Similarly to list comprehensions , set comprehensions are also supported: >>>a={x forxin'abracadabra 'ifx not in'abc'} >>>a {'r', 'd'} 5.4. Sets 37"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 44,
      "text": "Python Tutorial, Release 3.7.0 5.5Dictionaries Another useful data type built into Python is the dictionary (see typesmapping). Dictionaries are sometimes found in other languages as “associative memories” or “associative arrays”. Unlike sequences, which are indexed by a range of numbers, dictionaries are indexed by keys, which can be any immutable type; strings and numbers can always be keys. Tuples can be used as keys if they contain only strings, numbers, or tuples; if a tuple contains any mutable object either directly or indirectly, it cannot be used as a key. You can’t use lists as keys, since lists can be modiﬁed in place using index assignments, slice assignments, or methods like append() andextend() . It is best to think of a dictionary as a set of key: value pairs, with the requirement that the keys are unique (within one dictionary). A pair of braces creates an empty dictionary: {}. Placing a comma-separated list of key:value pairs within the braces adds initial key:value pairs to the dictionary; this is also the way dictionaries are written on output. The main operations on a dictionary are storing a value with some key and extracting the value given the key. It is also"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 44,
      "text": "irs to the dictionary; this is also the way dictionaries are written on output. The main operations on a dictionary are storing a value with some key and extracting the value given the key. It is also possible to delete a key:value pair with del. If you store using a key that is already in use, the old value associated with that key is forgotten. It is an error to extract a value using a non-existent key. Performing list(d) on a dictionary returns a list of all the keys used in the dictionary, in insertion order (if you want it sorted, just use sorted(d) instead). To check whether a single key is in the dictionary, use theinkeyword. Here is a small example using a dictionary: >>>tel={'jack':4098,'sape':4139} >>>tel['guido']=4127 >>>tel {'jack': 4098, 'sape': 4139, 'guido': 4127} >>>tel['jack'] 4098 >>> deltel['sape'] >>>tel['irv']=4127 >>>tel {'jack': 4098, 'guido': 4127, 'irv': 4127} >>>list(tel) ['jack', 'guido', 'irv'] >>>sorted(tel) ['guido', 'irv', 'jack'] >>>'guido' intel True >>>'jack'not intel False Thedict()constructor builds dictionaries directly from sequences of key-value pairs: >>>dict([('sape',4139), ('guido',4127), ('jack',4098)]) {'sape': 4139, 'guido': 4127, 'jack'"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 44,
      "text": ">'jack'not intel False Thedict()constructor builds dictionaries directly from sequences of key-value pairs: >>>dict([('sape',4139), ('guido',4127), ('jack',4098)]) {'sape': 4139, 'guido': 4127, 'jack': 4098} In addition, dict comprehensions can be used to create dictionaries from arbitrary key and value expressions: >>>{x: x**2 forx in(2,4,6)} {2: 4, 4: 16, 6: 36} When the keys are simple strings, it is sometimes easier to specify pairs using keyword arguments: >>>dict(sape=4139, guido=4127, jack=4098) {'sape': 4139, 'guido': 4127, 'jack': 4098} 38 Chapter 5. Data Structures"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 45,
      "text": "Python Tutorial, Release 3.7.0 5.6Looping Techniques When looping through dictionaries, the key and corresponding value can be retrieved at the same time using theitems() method. >>>knights ={'gallahad ':'the pure ','robin':'the brave '} >>> fork, v inknights.items(): ... print(k, v) ... gallahad the pure robin the brave When looping through a sequence, the position index and corresponding value can be retrieved at the same time using the enumerate() function. >>> fori, v inenumerate (['tic','tac','toe']): ... print(i, v) ... 0 tic 1 tac 2 toe To loop over two or more sequences at the same time, the entries can be paired with the zip()function. >>>questions =['name','quest','favorite color '] >>>answers =['lancelot ','the holy grail ','blue'] >>> forq, a inzip(questions, answers): ... print('What is your {0}? It is {1}.'.format(q, a)) ... What is your name? It is lancelot. What is your quest? It is the holy grail. What is your favorite color? It is blue. To loop over a sequence in reverse, ﬁrst specify the sequence in a forward direction and then call the reversed() function. >>> foriinreversed (range(1,10,2)): ... print(i) ... 9 7 5 3 1 To loop over a sequence in sorted order, use"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 45,
      "text": "rse, ﬁrst specify the sequence in a forward direction and then call the reversed() function. >>> foriinreversed (range(1,10,2)): ... print(i) ... 9 7 5 3 1 To loop over a sequence in sorted order, use the sorted() function which returns a new sorted list while leaving the source unaltered. >>>basket=['apple','orange','apple','pear','orange','banana'] >>> forfinsorted(set(basket)): ... print(f) ... apple banana orange pear 5.6. Looping Techniques 39"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 46,
      "text": "Python Tutorial, Release 3.7.0 It is sometimes tempting to change a list while you are looping over it; however, it is often simpler and safer to create a new list instead. >>> import math >>>raw_data =[56.2,float('NaN'),51.7,55.3,52.5,float('NaN'),47.8] >>>filtered_data =[] >>> forvalue inraw_data: ... if notmath.isnan(value): ... filtered_data .append(value) ... >>>filtered_data [56.2, 51.7, 55.3, 52.5, 47.8] 5.7More on Conditions The conditions used in whileandifstatements can contain any operators, not just comparisons. The comparison operators inandnot incheck whether a value occurs (does not occur) in a sequence. The operators isandis notcompare whether two objects are really the same object; this only matters for mutable objects like lists. All comparison operators have the same priority, which is lower than that of all numerical operators. Comparisons can be chained. For example, a < b == c tests whether ais less than band moreover bequals c. Comparisons may be combined using the Boolean operators andandor, and the outcome of a comparison (or of any other Boolean expression) may be negated with not. These have lower priorities than comparison operators; between them, nothas"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 46,
      "text": "he Boolean operators andandor, and the outcome of a comparison (or of any other Boolean expression) may be negated with not. These have lower priorities than comparison operators; between them, nothas the highest priority and orthe lowest, so that A and not B or C is equivalent to (A and (not B)) or C . As always, parentheses can be used to express the desired composition. The Boolean operators andandorare so-called short-circuit operators: their arguments are evaluated from left to right, and evaluation stops as soon as the outcome is determined. For example, if AandCare true butBis false,A and B and C does not evaluate the expression C. When used as a general value and not as a Boolean, the return value of a short-circuit operator is the last evaluated argument. It is possible to assign the result of a comparison or other Boolean expression to a variable. For example, >>>string1, string2, string3 ='','Trondheim ','Hammer Dance ' >>>non_null =string1 orstring2 orstring3 >>>non_null 'Trondheim' Note that in Python, unlike C, assignment cannot occur inside expressions. C programmers may grumble about this, but it avoids a common class of problems encountered in C programs: typing =i"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 46,
      "text": "rondheim' Note that in Python, unlike C, assignment cannot occur inside expressions. C programmers may grumble about this, but it avoids a common class of problems encountered in C programs: typing =in an expression when==was intended. 5.8Comparing Sequences and Other Types Sequence objects may be compared to other objects with the same sequence type. The comparison uses lex- icographical ordering: ﬁrst the ﬁrst two items are compared, and if they diﬀer this determines the outcome of the comparison; if they are equal, the next two items are compared, and so on, until either sequence is exhausted. If two items to be compared are themselves sequences of the same type, the lexicographical com- parison is carried out recursively. If all items of two sequences compare equal, the sequences are considered equal. If one sequence is an initial sub-sequence of the other, the shorter sequence is the smaller (lesser) 40 Chapter 5. Data Structures"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 47,
      "text": "Python Tutorial, Release 3.7.0 one. Lexicographical ordering for strings uses the Unicode code point number to order individual characters. Some examples of comparisons between sequences of the same type: (1,2,3) <(1,2,4) [1,2,3] <[1,2,4] 'ABC'<'C'<'Pascal'<'Python' (1,2,3,4) <(1,2,4) (1,2) <(1,2,-1) (1,2,3) ==(1.0,2.0,3.0) (1,2, ('aa','ab'))<(1,2, ('abc','a'),4) Note that comparing objects of diﬀerent types with <or>is legal provided that the objects have appropriate comparison methods. For example, mixed numeric types are compared according to their numeric value, so 0 equals 0.0, etc. Otherwise, rather than providing an arbitrary ordering, the interpreter will raise a TypeError exception. 5.8. Comparing Sequences and Other Types 41"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 48,
      "text": "Python Tutorial, Release 3.7.0 42 Chapter 5. Data Structures"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 49,
      "text": "CHAPTER SIX MODULES If you quit from the Python interpreter and enter it again, the deﬁnitions you have made (functions and variables) are lost. Therefore, if you want to write a somewhat longer program, you are better oﬀ using a text editor to prepare the input for the interpreter and running it with that ﬁle as input instead. This is known as creating a script. As your program gets longer, you may want to split it into several ﬁles for easier maintenance. You may also want to use a handy function that you’ve written in several programs without copying its deﬁnition into each program. To support this, Python has a way to put deﬁnitions in a ﬁle and use them in a script or in an interactive instance of the interpreter. Such a ﬁle is called a module; deﬁnitions from a module can be imported into othermodules orintothe mainmodule(the collectionof variablesthat youhaveaccessto ina scriptexecuted at the top level and in calculator mode). A module is a ﬁle containing Python deﬁnitions and statements. The ﬁle name is the module name with the suﬃx .pyappended. Within a module, the module’s name (as a string) is available as the value of the global variable __name__ . For instance, use you"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 49,
      "text": "tatements. The ﬁle name is the module name with the suﬃx .pyappended. Within a module, the module’s name (as a string) is available as the value of the global variable __name__ . For instance, use your favorite text editor to create a ﬁle called fibo.py in the current directory with the following contents: # Fibonacci numbers module deffib(n): # write Fibonacci series up to n a, b=0,1 whilea<n: print(a, end='') a, b=b, a+b print() deffib2(n):# return Fibonacci series up to n result=[] a, b=0,1 whilea<n: result.append(a) a, b=b, a+b returnresult Now enter the Python interpreter and import this module with the following command: >>> import fibo This does not enter the names of the functions deﬁned in fibodirectly in the current symbol table; it only enters the module name fibothere. Using the module name you can access the functions: >>>fibo.fib(1000) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 >>>fibo.fib2(100) (continues on next page) 43"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 50,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] >>>fibo.__name__ 'fibo' If you intend to use a function often you can assign it to a local name: >>>fib=fibo.fib >>>fib(500) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 6.1More on Modules A module can contain executable statements as well as function deﬁnitions. These statements are intended to initialize the module. They are executed only the ﬁrsttime the module name is encountered in an import statement.1(They are also run if the ﬁle is executed as a script.) Each module has its own private symbol table, which is used as the global symbol table by all functions deﬁned in the module. Thus, the author of a module can use global variables in the module without worrying about accidental clashes with a user’s global variables. On the other hand, if you know what you are doing you can touch a module’s global variables with the same notation used to refer to its functions, modname.itemname . Modules can import other modules. It is customary but not required to place all importstatements at the beginning of a module (or script, for that matter). The imported module names are placed in the"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 50,
      "text": " Modules can import other modules. It is customary but not required to place all importstatements at the beginning of a module (or script, for that matter). The imported module names are placed in the importing module’s global symbol table. There is a variant of the importstatement that imports names from a module directly into the importing module’s symbol table. For example: >>> from fibo importfib, fib2 >>>fib(500) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 This does not introduce the module name from which the imports are taken in the local symbol table (so in the example, fibois not deﬁned). There is even a variant to import all names that a module deﬁnes: >>> from fibo import* >>>fib(500) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 This imports all names except those beginning with an underscore ( _). In most cases Python programmers do not use this facility since it introduces an unknown set of names into the interpreter, possibly hiding some things you have already deﬁned. Note that in general the practice of importing *from a module or package is frowned upon, since it often causes poorly readable code. However, it is okay to use it to save typing in interactive sessions. If th"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 50,
      "text": " in general the practice of importing *from a module or package is frowned upon, since it often causes poorly readable code. However, it is okay to use it to save typing in interactive sessions. If the module name is followed by as, then the name following asis bound directly to the imported module. >>> import fibo as fib >>>fib.fib(500) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 1In fact function deﬁnitions are also ‘statements’ that are ‘executed’; the execution of a module-level function deﬁnition enters the function name in the module’s global symbol table. 44 Chapter 6. Modules"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 51,
      "text": "Python Tutorial, Release 3.7.0 This is eﬀectively importing the module in the same way that import fibo will do, with the only diﬀerence of it being available as fib. It can also be used when utilising fromwith similar eﬀects: >>> from fibo importfib asfibonacci >>>fibonacci( 500) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 Note: For eﬃciency reasons, each module is only imported once per interpreter session. Therefore, if you change your modules, you must restart the interpreter – or, if it’s just one module you want to test interactively, use importlib.reload() , e.g.import importlib; importlib.reload(modulename) . 6.1.1Executing modules as scripts When you run a Python module with python fibo .py<arguments > the code in the module will be executed, just as if you imported it, but with the __name__ set to\"__main__\" . That means that by adding this code at the end of your module: if__name__ ==\"__main__ \": import sys fib(int(sys.argv[1])) you can make the ﬁle usable as a script as well as an importable module, because the code that parses the command line only runs if the module is executed as the “main” ﬁle: $python fibo.py 50 0 1 1 2 3 5 8 13 21 34 If the module is imported, the cod"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 51,
      "text": " an importable module, because the code that parses the command line only runs if the module is executed as the “main” ﬁle: $python fibo.py 50 0 1 1 2 3 5 8 13 21 34 If the module is imported, the code is not run: >>> import fibo >>> This is often used either to provide a convenient user interface to a module, or for testing purposes (running the module as a script executes a test suite). 6.1.2The Module Search Path When a module named spamis imported, the interpreter ﬁrst searches for a built-in module with that name. If not found, it then searches for a ﬁle named spam.py in a list of directories given by the variable sys.path . sys.path is initialized from these locations: •The directory containing the input script (or the current directory when no ﬁle is speciﬁed). •PYTHONPATH (a list of directory names, with the same syntax as the shell variable PATH). •The installation-dependent default. Note:On ﬁle systems which support symlinks, the directory containing the input script is calculated after the symlink is followed. In other words the directory containing the symlink is notadded to the module 6.1. More on Modules 45"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 52,
      "text": "Python Tutorial, Release 3.7.0 search path. After initialization, Python programs can modify sys.path . The directory containing the script being run is placed at the beginning of the search path, ahead of the standard library path. This means that scripts in that directory will be loaded instead of modules of the same name in the library directory. This is an error unless the replacement is intended. See section Standard Modules for more information. 6.1.3“Compiled” Python ﬁles To speed up loading modules, Python caches the compiled version of each module in the __pycache__ directory under the name module.version.pyc, where the version encodes the format of the compiled ﬁle; itgenerallycontainsthePythonversionnumber. Forexample, inCPythonrelease3.3thecompiledversionof spam.py would be cached as __pycache__/spam.cpython-33.pyc . This naming convention allows compiled modules from diﬀerent releases and diﬀerent versions of Python to coexist. Python checks the modiﬁcation date of the source against the compiled version to see if it’s out of date and needs to be recompiled. This is a completely automatic process. Also, the compiled modules are platform-independent, so the same library"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 52,
      "text": "rce against the compiled version to see if it’s out of date and needs to be recompiled. This is a completely automatic process. Also, the compiled modules are platform-independent, so the same library can be shared among systems with diﬀerent architectures. Python does not check the cache in two circumstances. First, it always recompiles and does not store the result for the module that’s loaded directly from the command line. Second, it does not check the cache if there is no source module. To support a non-source (compiled only) distribution, the compiled module must be in the source directory, and there must not be a source module. Some tips for experts: •You can use the -Oor-OOswitches on the Python command to reduce the size of a compiled module. The-Oswitchremovesassertstatements, the -OOswitchremovesbothassertstatementsand__doc__ strings. Since some programs may rely on having these available, you should only use this option if you know what you’re doing. “Optimized” modules have an opt-tag and are usually smaller. Future releases may change the eﬀects of optimization. •A program doesn’t run any faster when it is read from a .pycﬁle than when it is read from a .pyﬁle; the on"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 52,
      "text": "e an opt-tag and are usually smaller. Future releases may change the eﬀects of optimization. •A program doesn’t run any faster when it is read from a .pycﬁle than when it is read from a .pyﬁle; the only thing that’s faster about .pycﬁles is the speed with which they are loaded. •The module compileall can create .pyc ﬁles for all modules in a directory. •There is more detail on this process, including a ﬂow chart of the decisions, in PEP 3147 . 6.2Standard Modules Python comes with a library of standard modules, described in a separate document, the Python Library Reference (“Library Reference” hereafter). Some modules are built into the interpreter; these provide access to operations that are not part of the core of the language but are nevertheless built in, either for eﬃciency or to provide access to operating system primitives such as system calls. The set of such modules is a conﬁguration option which also depends on the underlying platform. For example, the winregmodule is only provided on Windows systems. One particular module deserves some attention: sys, which is built into every Python interpreter. The variables sys.ps1 andsys.ps2 deﬁne the strings used as primary and seco"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 52,
      "text": "ovided on Windows systems. One particular module deserves some attention: sys, which is built into every Python interpreter. The variables sys.ps1 andsys.ps2 deﬁne the strings used as primary and secondary prompts: >>> import sys >>>sys.ps1 '>>> ' >>>sys.ps2 '... ' (continues on next page) 46 Chapter 6. Modules"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 53,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) >>>sys.ps1='C>' C> print('Yuck!') Yuck! C> These two variables are only deﬁned if the interpreter is in interactive mode. The variable sys.path is a list of strings that determines the interpreter’s search path for modules. It is initialized to a default path taken from the environment variable PYTHONPATH , or from a built-in default if PYTHONPATH is not set. You can modify it using standard list operations: >>> import sys >>>sys.path.append('/ufs/guido/lib/python ') 6.3The dir()Function The built-in function dir()is used to ﬁnd out which names a module deﬁnes. It returns a sorted list of strings: >>> import fibo,sys >>>dir(fibo) ['__name__', 'fib', 'fib2'] >>>dir(sys) ['__displayhook__', '__doc__', '__excepthook__', '__loader__', '__name__', '__package__', '__stderr__', '__stdin__', '__stdout__', '_clear_type_cache', '_current_frames', '_debugmallocstats', '_getframe', '_home', '_mercurial', '_xoptions', 'abiflags', 'api_version', 'argv', 'base_exec_prefix', 'base_prefix', 'builtin_module_names', 'byteorder', 'call_tracing', 'callstats', 'copyright', 'displayhook', 'dont_write_bytecode', 'exc_info', 'excepthook', 'exec_"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 53,
      "text": "rsion', 'argv', 'base_exec_prefix', 'base_prefix', 'builtin_module_names', 'byteorder', 'call_tracing', 'callstats', 'copyright', 'displayhook', 'dont_write_bytecode', 'exc_info', 'excepthook', 'exec_prefix', 'executable', 'exit', 'flags', 'float_info', 'float_repr_style', 'getcheckinterval', 'getdefaultencoding', 'getdlopenflags', 'getfilesystemencoding', 'getobjects', 'getprofile', 'getrecursionlimit', 'getrefcount', 'getsizeof', 'getswitchinterval', 'gettotalrefcount', 'gettrace', 'hash_info', 'hexversion', 'implementation', 'int_info', 'intern', 'maxsize', 'maxunicode', 'meta_path', 'modules', 'path', 'path_hooks', 'path_importer_cache', 'platform', 'prefix', 'ps1', 'setcheckinterval', 'setdlopenflags', 'setprofile', 'setrecursionlimit', 'setswitchinterval', 'settrace', 'stderr', 'stdin', 'stdout', 'thread_info', 'version', 'version_info', 'warnoptions'] Without arguments, dir()lists the names you have deﬁned currently: >>>a=[1,2,3,4,5] >>> import fibo >>>fib=fibo.fib >>>dir() ['__builtins__', '__name__', 'a', 'fib', 'fibo', 'sys'] Note that it lists all types of names: variables, modules, functions, etc. dir()does not list the names of built-in functions and variables. If you "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 53,
      "text": "builtins__', '__name__', 'a', 'fib', 'fibo', 'sys'] Note that it lists all types of names: variables, modules, functions, etc. dir()does not list the names of built-in functions and variables. If you want a list of those, they are deﬁned in the standard module builtins : 6.3. The dir()Function 47"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 54,
      "text": "Python Tutorial, Release 3.7.0 >>> import builtins >>>dir(builtins) ['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning', 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FileExistsError', 'FileNotFoundError', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError', 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'User"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 54,
      "text": "Error', 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'ZeroDivisionError', '_', '__build_class__', '__debug__', '__doc__', '__import__', '__name__', '__package__', 'abs', 'all', 'any', 'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip'] 6.4Packages PackagesareawayofstructuringPython’smodulenamespacebyusing“dottedmodulenames”. Forexample, the module name A.Bdesignates a submodule named Bin a package named A. Just like th"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 54,
      "text": "vars', 'zip'] 6.4Packages PackagesareawayofstructuringPython’smodulenamespacebyusing“dottedmodulenames”. Forexample, the module name A.Bdesignates a submodule named Bin a package named A. Just like the use of modules saves the authors of diﬀerent modules from having to worry about each other’s global variable names, the use of dotted module names saves the authors of multi-module packages like NumPy or Pillow from having to worry about each other’s module names. Suppose you want to design a collection of modules (a “package”) for the uniform handling of sound ﬁles and sound data. There are many diﬀerent sound ﬁle formats (usually recognized by their extension, for example: .wav,.aiff,.au), so you may need to create and maintain a growing collection of modules for the conversion between the various ﬁle formats. There are also many diﬀerent operations you might want to perform on sound data (such as mixing, adding echo, applying an equalizer function, creating an artiﬁcial stereo eﬀect), so in addition you will be writing a never-ending stream of modules to perform these operations. Here’s a possible structure for your package (expressed in terms of a hierarchical ﬁlesystem): sound/ "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 54,
      "text": " so in addition you will be writing a never-ending stream of modules to perform these operations. Here’s a possible structure for your package (expressed in terms of a hierarchical ﬁlesystem): sound/ Top-level package __init__.py Initialize the sound package formats/ Subpackage for file format conversions __init__.py wavread.py wavwrite.py (continues on next page) 48 Chapter 6. Modules"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 55,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) aiffread.py aiffwrite.py auread.py auwrite.py ... effects/ Subpackage for sound effects __init__.py echo.py surround.py reverse.py ... filters/ Subpackage for filters __init__.py equalizer.py vocoder.py karaoke.py ... When importing the package, Python searches through the directories on sys.path looking for the package subdirectory. The__init__.py ﬁles are required to make Python treat the directories as containing packages; this is done to prevent directories with a common name, such as string, from unintentionally hiding valid modules that occur later on the module search path. In the simplest case, __init__.py can just be an empty ﬁle, but it can also execute initialization code for the package or set the __all__ variable, described later. Users of the package can import individual modules from the package, for example: import sound .effects .echo This loads the submodule sound.effects.echo . It must be referenced with its full name. sound.effects.echo.echofilter( input, output, delay =0.7, atten=4) An alternative way of importing the submodule is: from sound .effects importecho This also loads the submodule echo, an"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 55,
      "text": "ts full name. sound.effects.echo.echofilter( input, output, delay =0.7, atten=4) An alternative way of importing the submodule is: from sound .effects importecho This also loads the submodule echo, and makes it available without its package preﬁx, so it can be used as follows: echo.echofilter( input, output, delay =0.7, atten=4) Yet another variation is to import the desired function or variable directly: from sound .effects .echo importechofilter Again, this loads the submodule echo, but this makes its function echofilter() directly available: echofilter( input, output, delay =0.7, atten=4) Note that when using from package import item , the item can be either a submodule (or subpackage) of the package, or some other name deﬁned in the package, like a function, class or variable. The import statement ﬁrst tests whether the item is deﬁned in the package; if not, it assumes it is a module and attempts to load it. If it fails to ﬁnd it, an ImportError exception is raised. Contrarily, when using syntax like import item.subitem.subsubitem , each item except for the last must be a package; the last item can be a module or a package but can’t be a class or function or variable deﬁned 6.4"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 55,
      "text": "n using syntax like import item.subitem.subsubitem , each item except for the last must be a package; the last item can be a module or a package but can’t be a class or function or variable deﬁned 6.4. Packages 49"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 56,
      "text": "Python Tutorial, Release 3.7.0 in the previous item. 6.4.1Importing * From a Package Now what happens when the user writes from sound.effects import * ? Ideally, one would hope that this somehow goes out to the ﬁlesystem, ﬁnds which submodules are present in the package, and imports them all. This could take a long time and importing sub-modules might have unwanted side-eﬀects that should only happen when the sub-module is explicitly imported. Theonlysolutionisforthepackageauthortoprovideanexplicitindexofthepackage. The importstatement uses the following convention: if a package’s __init__.py code deﬁnes a list named __all__, it is taken to be the list of module names that should be imported when from package import * is encountered. It is up to the package author to keep this list up-to-date when a new version of the package is released. Package authors may also decide not to support it, if they don’t see a use for importing * from their package. For example, the ﬁle sound/effects/__init__.py could contain the following code: __all__ =[\"echo\",\"surround \",\"reverse\"] This would mean that from sound.effects import * would import the three named submodules of the soundpackage. If__all"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 56,
      "text": "nit__.py could contain the following code: __all__ =[\"echo\",\"surround \",\"reverse\"] This would mean that from sound.effects import * would import the three named submodules of the soundpackage. If__all__ isnotdeﬁned, thestatement from sound.effects import * does notimportallsubmodulesfrom the package sound.effects into the current namespace; it only ensures that the package sound.effects has been imported (possibly running any initialization code in __init__.py ) and then imports whatever names are deﬁned in the package. This includes any names deﬁned (and submodules explicitly loaded) by __init__.py . It also includes any submodules of the package that were explicitly loaded by previous import statements. Consider this code: import sound .effects .echo import sound .effects .surround from sound .effects import* In this example, the echoandsurround modules are imported in the current namespace because they are deﬁned in the sound.effects package when the from...import statement is executed. (This also works when__all__ is deﬁned.) Although certain modules are designed to export only names that follow certain patterns when you use import * , it is still considered bad practice in pro"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 56,
      "text": "ted. (This also works when__all__ is deﬁned.) Although certain modules are designed to export only names that follow certain patterns when you use import * , it is still considered bad practice in production code. Remember, there is nothing wrong with using from Package import specific_submodule ! In fact, this is the recommended notation unless the importing module needs to use submodules with the same name from diﬀerent packages. 6.4.2Intra-package References When packages are structured into subpackages (as with the soundpackage in the example), you can use absolute imports to refer to submodules of siblings packages. For example, if the module sound.filters. vocoder needs to use the echomodule in the sound.effects package, it can use from sound.effects import echo . You can also write relative imports, with the from module import name form of import statement. These imports use leading dots to indicate the current and parent packages involved in the relative import. From thesurround module for example, you might use: 50 Chapter 6. Modules"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 57,
      "text": "Python Tutorial, Release 3.7.0 from .importecho from .. importformats from ..filters importequalizer Note that relative imports are based on the name of the current module. Since the name of the main module is always \"__main__\" , modules intended for use as the main module of a Python application must always use absolute imports. 6.4.3Packages in Multiple Directories Packages support one more special attribute, __path__ . This is initialized to be a list containing the name of the directory holding the package’s __init__.py before the code in that ﬁle is executed. This variable can be modiﬁed; doing so aﬀects future searches for modules and subpackages contained in the package. While this feature is not often needed, it can be used to extend the set of modules found in a package. 6.4. Packages 51"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 58,
      "text": "Python Tutorial, Release 3.7.0 52 Chapter 6. Modules"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 59,
      "text": "CHAPTER SEVEN INPUT AND OUTPUT There are several ways to present the output of a program; data can be printed in a human-readable form, or written to a ﬁle for future use. This chapter will discuss some of the possibilities. 7.1Fancier Output Formatting So far we’ve encountered two ways of writing values: expression statements and the print() function. (A third way is using the write() method of ﬁle objects; the standard output ﬁle can be referenced as sys.stdout . See the Library Reference for more information on this.) Often you’ll want more control over the formatting of your output than simply printing space-separated values. There are several ways to format output. •To use formatted string literals , begin a string with forFbefore the opening quotation mark or triple quotation mark. Inside this string, you can write a Python expression between {and}characters that can refer to variables or literal values. >>>year=2016; event ='Referendum ' >>>f'Results of the {year}{event}' 'Results of the 2016 Referendum' •Thestr.format() method of strings requires more manual eﬀort. You’ll still use {and}to mark where a variable will be substituted and can provide detailed formatting directi"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 59,
      "text": "ts of the 2016 Referendum' •Thestr.format() method of strings requires more manual eﬀort. You’ll still use {and}to mark where a variable will be substituted and can provide detailed formatting directives, but you’ll also need to provide the information to be formatted. >>>yes_votes =42_572_654 ; no_votes =43_132_495 >>>percentage =yes_votes /(yes_votes +no_votes) >>>'{:-9}YES votes {:2.2%}'.format(yes_votes, percentage) ' 42572654 YES votes 49.67%' •Finally, you can do all the string handling yourself by using string slicing and concatenation operations to create any layoutyou can imagine. The string type has some methods that perform useful operations for padding strings to a given column width. When you don’t need fancy output but just want a quick display of some variables for debugging purposes, you can convert any value to a string with the repr()orstr()functions. Thestr()function is meant to return representations of values which are fairly human-readable, while repr()ismeanttogeneraterepresentationswhichcanbereadbytheinterpreter(orwillforcea SyntaxError if there is no equivalent syntax). For objects which don’t have a particular representation for human con- sumption, str()w"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 59,
      "text": "neraterepresentationswhichcanbereadbytheinterpreter(orwillforcea SyntaxError if there is no equivalent syntax). For objects which don’t have a particular representation for human con- sumption, str()will return the same value as repr(). Many values, such as numbers or structures like lists and dictionaries, have the same representation using either function. Strings, in particular, have two distinct representations. Some examples: 53"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 60,
      "text": "Python Tutorial, Release 3.7.0 >>>s='Hello, world. ' >>>str(s) 'Hello, world.' >>>repr(s) \"'Hello, world.'\" >>>str(1/7) '0.14285714285714285' >>>x=10*3.25 >>>y=200*200 >>>s='The value of x is '+repr(x)+', and y is '+repr(y)+'...' >>>print(s) The value of x is 32.5, and y is 40000... >>># The repr() of a string adds string quotes and backslashes: ...hello='hello, world \\n' >>>hellos=repr(hello) >>>print(hellos) 'hello, world\\n' >>># The argument to repr() may be any Python object: ...repr((x, y, ( 'spam','eggs'))) \"(32.5, 40000, ('spam', 'eggs'))\" Thestringmodule contains a Template class that oﬀers yet another way to substitute values into strings, using placeholders like $xand replacing them with values from a dictionary, but oﬀers much less control of the formatting. 7.1.1Formatted String Literals Formatted string literals (also called f-strings for short) let you include the value of Python expressions inside a string by preﬁxing the string with forFand writing expressions as {expression} . An optional format speciﬁer can follow the expression. This allows greater control over how the value is formatted. The following example rounds pi to three places after the decimal: >>> impo"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 60,
      "text": "ssion} . An optional format speciﬁer can follow the expression. This allows greater control over how the value is formatted. The following example rounds pi to three places after the decimal: >>> import math >>>print(f'The value of pi is approximately {math.pi:.3f} .') Passing an integer after the ':'will cause that ﬁeld to be a minimum number of characters wide. This is useful for making columns line up. >>>table={'Sjoerd':4127,'Jack':4098,'Dcab':7678} >>> forname, phone intable.items(): ... print(f'{name:10} ==>{phone:10d} ') ... Sjoerd ==> 4127 Jack ==> 4098 Dcab ==> 7678 Other modiﬁers can be used to convert the value before it is formatted. '!a'appliesascii(),'!s'applies str(), and'!r'appliesrepr(): >>>animals ='eels' >>>print(f'My hovercraft is full of {animals} .') My hovercraft is full of eels. >>>print('My hovercraft is full of {animals !r}. ') My hovercraft is full of 'eels'. For a reference on these format speciﬁcations, see the reference guide for the formatspec. 54 Chapter 7. Input and Output"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 61,
      "text": "Python Tutorial, Release 3.7.0 7.1.2The String format() Method Basic usage of the str.format() method looks like this: >>>print('We are the {}who say \"{}!\"'.format('knights','Ni')) We are the knights who say \"Ni!\" The brackets and characters within them (called format ﬁelds) are replaced with the objects passed into the str.format() method. A number in the brackets can be used to refer to the position of the object passed into thestr.format() method. >>>print('{0}and{1}'.format('spam','eggs')) spam and eggs >>>print('{1}and{0}'.format('spam','eggs')) eggs and spam If keyword arguments are used in the str.format() method, their values are referred to by using the name of the argument. >>>print('This{food}is{adjective} .'.format( ... food='spam', adjective ='absolutely horrible ')) This spam is absolutely horrible. Positional and keyword arguments can be arbitrarily combined: >>>print('The story of {0},{1}, and{other}.'.format('Bill','Manfred', other='Georg')) The story of Bill, Manfred, and Georg. If you have a really long format string that you don’t want to split up, it would be nice if you could reference the variables to be formatted by name instead of by position. This can be d"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 61,
      "text": " and Georg. If you have a really long format string that you don’t want to split up, it would be nice if you could reference the variables to be formatted by name instead of by position. This can be done by simply passing the dict and using square brackets '[]'to access the keys >>>table={'Sjoerd':4127,'Jack':4098,'Dcab':8637678} >>>print('Jack:{0[Jack]:d} ; Sjoerd: {0[Sjoerd]:d} ;' ... 'Dcab:{0[Dcab]:d} '.format(table)) Jack: 4098; Sjoerd: 4127; Dcab: 8637678 This could also be done by passing the table as keyword arguments with the ‘**’ notation. >>>table={'Sjoerd':4127,'Jack':4098,'Dcab':8637678} >>>print('Jack:{Jack:d} ; Sjoerd: {Sjoerd:d} ; Dcab: {Dcab:d} '.format(**table)) Jack: 4098; Sjoerd: 4127; Dcab: 8637678 This is particularly useful in combination with the built-in function vars(), which returns a dictionary containing all local variables. As an example, the following lines produce a tidily-aligned set of columns giving integers and their squares and cubes: >>> forxinrange(1,11): ... print('{0:2d}{1:3d}{2:4d}'.format(x, x *x, x*x*x)) ... 1 1 1 2 4 8 3 9 27 4 16 64 5 25 125 (continues on next page) 7.1. Fancier Output Formatting 55"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 62,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) 6 36 216 7 49 343 8 64 512 9 81 729 10 100 1000 For a complete overview of string formatting with str.format() , see formatstrings. 7.1.3Manual String Formatting Here’s the same table of squares and cubes, formatted manually: >>> forxinrange(1,11): ... print(repr(x).rjust(2),repr(x*x).rjust(3), end='') ... # Note use of 'end' on previous line ... print(repr(x*x*x).rjust(4)) ... 1 1 1 2 4 8 3 9 27 4 16 64 5 25 125 6 36 216 7 49 343 8 64 512 9 81 729 10 100 1000 (Note that the one space between each column was added by the way print() works: it always adds spaces between its arguments.) Thestr.rjust() method of string objects right-justiﬁes a string in a ﬁeld of a given width by padding it with spaces on the left. There are similar methods str.ljust() andstr.center() . These methods do not write anything, they just return a new string. If the input string is too long, they don’t truncate it, but return it unchanged; this will mess up your column lay-out but that’s usually better than the alternative, which would be lying about a value. (If you really want truncation you can always add a slice operation, as inx.ljust(n)[:n]"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 62,
      "text": "mess up your column lay-out but that’s usually better than the alternative, which would be lying about a value. (If you really want truncation you can always add a slice operation, as inx.ljust(n)[:n] .) There is another method, str.zfill() , which pads a numeric string on the left with zeros. It understands about plus and minus signs: >>>'12'.zfill(5) '00012' >>>'-3.14'.zfill(7) '-003.14' >>>'3.14159265359 '.zfill(5) '3.14159265359' 7.1.4Old string formatting The%operator can also be used for string formatting. It interprets the left argument much like a sprintf() - style format string to be applied to the right argument, and returns the string resulting from this formatting operation. For example: 56 Chapter 7. Input and Output"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 63,
      "text": "Python Tutorial, Release 3.7.0 >>> import math >>>print('The value of pi is approximately %5.3f.'%math.pi) The value of pi is approximately 3.142. More information can be found in the old-string-formatting section. 7.2Reading and Writing Files open()returns a ﬁle object , and is most commonly used with two arguments: open(filename, mode) . >>>f=open('workfile ','w') The ﬁrst argument is a string containing the ﬁlename. The second argument is another string containing a few characters describing the way in which the ﬁle will be used. modecan be'r'when the ﬁle will only be read, 'w'for only writing (an existing ﬁle with the same name will be erased), and 'a'opens the ﬁle for appending; any data written to the ﬁle is automatically added to the end. 'r+'opens the ﬁle for both reading and writing. The modeargument is optional; 'r'will be assumed if it’s omitted. Normally, ﬁles are opened in text mode , that means, you read and write strings from and to the ﬁle, which are encoded in a speciﬁc encoding. If encoding is not speciﬁed, the default is platform dependent (see open()). 'b'appended to the mode opens the ﬁle in binary mode : now the data is read and written in the form of bytes ob"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 63,
      "text": "c encoding. If encoding is not speciﬁed, the default is platform dependent (see open()). 'b'appended to the mode opens the ﬁle in binary mode : now the data is read and written in the form of bytes objects. This mode should be used for all ﬁles that don’t contain text. In text mode, the default when reading is to convert platform-speciﬁc line endings ( \\non Unix, \\r\\non Windows) to just \\n. When writing in text mode, the default is to convert occurrences of \\nback to platform-speciﬁc line endings. This behind-the-scenes modiﬁcation to ﬁle data is ﬁne for text ﬁles, but will corrupt binary data like that in JPEGorEXEﬁles. Be very careful to use binary mode when reading and writing such ﬁles. It is good practice to use the withkeyword when dealing with ﬁle objects. The advantage is that the ﬁle is properly closed after its suite ﬁnishes, even if an exception is raised at some point. Using withis also much shorter than writing equivalent try-finally blocks: >>> withopen('workfile ')asf: ... read_data =f.read() >>>f.closed True If you’re not using the withkeyword, then you should call f.close() to close the ﬁle and immediately free up any system resources used by it. If you don’t expli"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 63,
      "text": ".. read_data =f.read() >>>f.closed True If you’re not using the withkeyword, then you should call f.close() to close the ﬁle and immediately free up any system resources used by it. If you don’t explicitly close a ﬁle, Python’s garbage collector will eventually destroy the object and close the open ﬁle for you, but the ﬁle may stay open for a while. Another risk is that diﬀerent Python implementations will do this clean-up at diﬀerent times. After a ﬁle object is closed, either by a withstatement or by calling f.close() , attempts to use the ﬁle object will automatically fail. >>>f.close() >>>f.read() Traceback (most recent call last): File\"<stdin>\" , line1, in <module> ValueError : I/O operation on closed file. 7.2.1Methods of File Objects The rest of the examples in this section will assume that a ﬁle object called fhas already been created. 7.2. Reading and Writing Files 57"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 64,
      "text": "Python Tutorial, Release 3.7.0 To read a ﬁle’s contents, call f.read(size) , which reads some quantity of data and returns it as a string (in text mode) or bytes object (in binary mode). sizeis an optional numeric argument. When sizeis omitted or negative, the entire contents of the ﬁle will be read and returned; it’s your problem if the ﬁle is twice as large as your machine’s memory. Otherwise, at most sizebytes are read and returned. If the end of the ﬁle has been reached, f.read() will return an empty string ( ''). >>>f.read() 'This is the entire file.\\n' >>>f.read() '' f.readline() reads a single line from the ﬁle; a newline character ( \\n) is left at the end of the string, and is only omitted on the last line of the ﬁle if the ﬁle doesn’t end in a newline. This makes the return value unambiguous; if f.readline() returns an empty string, the end of the ﬁle has been reached, while a blank line is represented by '\\n', a string containing only a single newline. >>>f.readline() 'This is the first line of the file.\\n' >>>f.readline() 'Second line of the file\\n' >>>f.readline() '' For reading lines from a ﬁle, you can loop over the ﬁle object. This is memory eﬃcient, fast, and leads "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 64,
      "text": "s the first line of the file.\\n' >>>f.readline() 'Second line of the file\\n' >>>f.readline() '' For reading lines from a ﬁle, you can loop over the ﬁle object. This is memory eﬃcient, fast, and leads to simple code: >>> forline inf: ... print(line, end ='') ... This is the first line of the file. Second line of the file If you want to read all the lines of a ﬁle in a list you can also use list(f) orf.readlines() . f.write(string) writes the contents of stringto the ﬁle, returning the number of characters written. >>>f.write('This is a test \\n') 15 Other types of objects need to be converted – either to a string (in text mode) or a bytes object (in binary mode) – before writing them: >>>value=('the answer ',42) >>>s=str(value) # convert the tuple to string >>>f.write(s) 18 f.tell() returns an integer giving the ﬁle object’s current position in the ﬁle represented as number of bytes from the beginning of the ﬁle when in binary mode and an opaque number when in text mode. To change the ﬁle object’s position, use f.seek(offset, from_what) . The position is computed from adding oﬀsetto a reference point; the reference point is selected by the from_what argument. A from_what value of 0 m"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 64,
      "text": "e object’s position, use f.seek(offset, from_what) . The position is computed from adding oﬀsetto a reference point; the reference point is selected by the from_what argument. A from_what value of 0 measures from the beginning of the ﬁle, 1 uses the current ﬁle position, and 2 uses the end of the ﬁle as the reference point. from_what can be omitted and defaults to 0, using the beginning of the ﬁle as the reference point. >>>f=open('workfile ','rb+') >>>f.write(b'0123456789abcdef ') (continues on next page) 58 Chapter 7. Input and Output"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 65,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) 16 >>>f.seek(5)# Go to the 6th byte in the file 5 >>>f.read(1) b'5' >>>f.seek(-3,2)# Go to the 3rd byte before the end 13 >>>f.read(1) b'd' In text ﬁles (those opened without a bin the mode string), only seeks relative to the beginning of the ﬁle are allowed (the exception being seeking to the very ﬁle end with seek(0, 2) ) and the only valid oﬀsetvalues are those returned from the f.tell() , or zero. Any other oﬀsetvalue produces undeﬁned behaviour. File objects have some additional methods, such as isatty() andtruncate() which are less frequently used; consult the Library Reference for a complete guide to ﬁle objects. 7.2.2Saving structured data with json Strings can easily be written to and read from a ﬁle. Numbers take a bit more eﬀort, since the read() method only returns strings, which will have to be passed to a function like int(), which takes a string like '123'and returns its numeric value 123. When you want to save more complex data types like nested lists and dictionaries, parsing and serializing by hand becomes complicated. Rather than having users constantly writing and debugging code to save complicated da"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 65,
      "text": "e more complex data types like nested lists and dictionaries, parsing and serializing by hand becomes complicated. Rather than having users constantly writing and debugging code to save complicated data types to ﬁles, Python allows you to use the popular data interchange format called JSON (JavaScript Object Notation) . The standard module called jsoncan take Python data hierarchies, and convert them to string represen- tations; this process is called serializing . Reconstructing the data from the string representation is called deserializing . Between serializing and deserializing, the string representing the object may have been stored in a ﬁle or data, or sent over a network connection to some distant machine. Note: The JSON format is commonly used by modern applications to allow for data exchange. Many programmers are already familiar with it, which makes it a good choice for interoperability. If you have an object x, you can view its JSON string representation with a simple line of code: >>> import json >>>json.dumps([1,'simple','list']) '[1, \"simple\", \"list\"]' Another variant of the dumps() function, called dump(), simply serializes the object to a text ﬁle. So iffis atext ﬁl"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 65,
      "text": "f code: >>> import json >>>json.dumps([1,'simple','list']) '[1, \"simple\", \"list\"]' Another variant of the dumps() function, called dump(), simply serializes the object to a text ﬁle. So iffis atext ﬁleobject opened for writing, we can do this: json.dump(x, f) To decode the object again, if fis a text ﬁleobject which has been opened for reading: x=json.load(f) This simple serialization technique can handle lists and dictionaries, but serializing arbitrary class instances in JSON requires a bit of extra eﬀort. The reference for the jsonmodule contains an explanation of this. See also: pickle- the pickle module 7.2. Reading and Writing Files 59"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 66,
      "text": "Python Tutorial, Release 3.7.0 Contrary to JSON,pickleis a protocol which allows the serialization of arbitrarily complex Python objects. As such, it is speciﬁc to Python and cannot be used to communicate with applications written in other languages. It is also insecure by default: deserializing pickle data coming from an untrusted source can execute arbitrary code, if the data was crafted by a skilled attacker. 60 Chapter 7. Input and Output"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 67,
      "text": "CHAPTER EIGHT ERRORS AND EXCEPTIONS Until now error messages haven’t been more than mentioned, but if you have tried out the examples you have probably seen some. There are (at least) two distinguishable kinds of errors: syntax errors and exceptions . 8.1Syntax Errors Syntax errors, also known as parsing errors, are perhaps the most common kind of complaint you get while you are still learning Python: >>> while Trueprint('Hello world ') File\"<stdin>\" , line1 while Trueprint('Hello world ') ^ SyntaxError : invalid syntax The parser repeats the oﬀending line and displays a little ‘arrow’ pointing at the earliest point in the line where the error was detected. The error is caused by (or at least detected at) the token preceding the arrow: in the example, the error is detected at the function print(), since a colon ( ':') is missing before it. File name and line number are printed so you know where to look in case the input came from a script. 8.2Exceptions Even if a statement or expression is syntactically correct, it may cause an error when an attempt is made to execute it. Errors detected during execution are called exceptions and are not unconditionally fatal: you will soon learn h"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 67,
      "text": "n is syntactically correct, it may cause an error when an attempt is made to execute it. Errors detected during execution are called exceptions and are not unconditionally fatal: you will soon learn how to handle them in Python programs. Most exceptions are not handled by programs, however, and result in error messages as shown here: >>>10*(1/0) Traceback (most recent call last): File\"<stdin>\" , line1, in <module> ZeroDivisionError : division by zero >>>4+spam*3 Traceback (most recent call last): File\"<stdin>\" , line1, in <module> NameError : name 'spam' is not defined >>>'2'+2 Traceback (most recent call last): File\"<stdin>\" , line1, in <module> TypeError : Can't convert 'int' object to str implicitly 61"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 68,
      "text": "Python Tutorial, Release 3.7.0 The last line of the error message indicates what happened. Exceptions come in diﬀerent types, and the type is printed as part of the message: the types in the example are ZeroDivisionError ,NameError and TypeError . The string printed as the exception type is the name of the built-in exception that occurred. This is true for all built-in exceptions, but need not be true for user-deﬁned exceptions (although it is a useful convention). Standard exception names are built-in identiﬁers (not reserved keywords). The rest of the line provides detail based on the type of exception and what caused it. The preceding part of the error message shows the context where the exception happened, in the form of a stack traceback. In general it contains a stack traceback listing source lines; however, it will not display lines read from standard input. bltin-exceptions lists the built-in exceptions and their meanings. 8.3Handling Exceptions It is possible to write programs that handle selected exceptions. Look at the following example, which asks the user for input until a valid integer has been entered, but allows the user to interrupt the program (using Control-C or "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 68,
      "text": " that handle selected exceptions. Look at the following example, which asks the user for input until a valid integer has been entered, but allows the user to interrupt the program (using Control-C or whatever the operating system supports); note that a user-generated interruption is signalled by raising the KeyboardInterrupt exception. >>> while True: ... try: ... x=int(input(\"Please enter a number: \")) ... break ... exceptValueError : ... print(\"Oops! That was no valid number. Try again... \") ... Thetrystatement works as follows. •First, the try clause (the statement(s) between the tryandexceptkeywords) is executed. •If no exception occurs, the except clause is skipped and execution of the trystatement is ﬁnished. •If an exception occurs during execution of the try clause, the rest of the clause is skipped. Then if its type matches the exception named after the exceptkeyword, the except clause is executed, and then execution continues after the trystatement. •If an exception occurs which does not match the exception named in the except clause, it is passed on to outertrystatements; if no handler is found, it is an unhandled exception and execution stops with a message as shown abo"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 68,
      "text": "ich does not match the exception named in the except clause, it is passed on to outertrystatements; if no handler is found, it is an unhandled exception and execution stops with a message as shown above. Atrystatement may have more than one except clause, to specify handlers for diﬀerent exceptions. At most one handler will be executed. Handlers only handle exceptions that occur in the corresponding try clause, not in other handlers of the same trystatement. An except clause may name multiple exceptions as a parenthesized tuple, for example: ... except(RuntimeError ,TypeError ,NameError ): ... pass A class in an exceptclause is compatible with an exception if it is the same class or a base class thereof (but not the other way around — an except clause listing a derived class is not compatible with a base class). For example, the following code will print B, C, D in that order: class B(Exception ): pass (continues on next page) 62 Chapter 8. Errors and Exceptions"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 69,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) class C(B): pass class D(C): pass forcls in[B, C, D]: try: raisecls() exceptD: print(\"D\") exceptC: print(\"C\") exceptB: print(\"B\") Note that if the except clauses were reversed (with except B ﬁrst), it would have printed B, B, B — the ﬁrst matching except clause is triggered. The last except clause may omit the exception name(s), to serve as a wildcard. Use this with extreme caution, since it is easy to mask a real programming error in this way! It can also be used to print an error message and then re-raise the exception (allowing a caller to handle the exception as well): import sys try: f=open('myfile.txt ') s=f.readline() i=int(s.strip()) exceptOSError aserr: print(\"OS error: {0}\".format(err)) exceptValueError : print(\"Could not convert data to an integer. \") except: print(\"Unexpected error: \", sys.exc_info()[ 0]) raise Thetry…exceptstatement has an optional else clause , which, when present, must follow all except clauses. It is useful for code that must be executed if the try clause does not raise an exception. For example: forarg insys.argv[1:]: try: f=open(arg,'r') exceptOSError: print('cannot open ', arg) else: p"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 69,
      "text": "s. It is useful for code that must be executed if the try clause does not raise an exception. For example: forarg insys.argv[1:]: try: f=open(arg,'r') exceptOSError: print('cannot open ', arg) else: print(arg,'has',len(f.readlines()), 'lines') f.close() The use of the elseclause is better than adding additional code to the tryclause because it avoids acciden- tally catching an exception that wasn’t raised by the code being protected by the try…exceptstatement. When an exception occurs, it may have an associated value, also known as the exception’s argument . The presence and type of the argument depend on the exception type. The except clause may specify a variable after the exception name. The variable is bound to an exception instance with the arguments stored in instance.args . For convenience, the exception instance deﬁnes __str__() so the arguments can be printed directly without having to reference .args. One may also 8.3. Handling Exceptions 63"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 70,
      "text": "Python Tutorial, Release 3.7.0 instantiate an exception ﬁrst before raising it and add any attributes to it as desired. >>> try: ... raiseException ('spam','eggs') ... exceptException asinst: ... print(type(inst)) # the exception instance ... print(inst.args) # arguments stored in .args ... print(inst) # __str__ allows args to be printed directly, ... # but may be overridden in exception subclasses ... x, y=inst.args # unpack args ... print('x =', x) ... print('y =', y) ... <class 'Exception'> ('spam', 'eggs') ('spam', 'eggs') x = spam y = eggs If an exception has arguments, they are printed as the last part (‘detail’) of the message for unhandled exceptions. Exception handlers don’t just handle exceptions if they occur immediately in the try clause, but also if they occur inside functions that are called (even indirectly) in the try clause. For example: >>> defthis_fails (): ... x=1/0 ... >>> try: ... this_fails() ... exceptZeroDivisionError aserr: ... print('Handling run-time error: ', err) ... Handling run-time error: division by zero 8.4Raising Exceptions Theraisestatement allows the programmer to force a speciﬁed exception to occur. For example: >>> raiseNameError ('HiThere') "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 70,
      "text": "', err) ... Handling run-time error: division by zero 8.4Raising Exceptions Theraisestatement allows the programmer to force a speciﬁed exception to occur. For example: >>> raiseNameError ('HiThere') Traceback (most recent call last): File\"<stdin>\" , line1, in <module> NameError : HiThere Thesoleargumentto raiseindicatestheexceptiontoberaised. Thismustbeeitheranexceptioninstanceor an exception class (a class that derives from Exception ). If an exception class is passed, it will be implicitly instantiated by calling its constructor with no arguments: raiseValueError # shorthand for 'raise ValueError()' If you need to determine whether an exception was raised but don’t intend to handle it, a simpler form of theraisestatement allows you to re-raise the exception: >>> try: ... raiseNameError ('HiThere') ... exceptNameError : (continues on next page) 64 Chapter 8. Errors and Exceptions"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 71,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) ... print('An exception flew by! ') ... raise ... An exception flew by! Traceback (most recent call last): File\"<stdin>\" , line2, in <module> NameError : HiThere 8.5User-deﬁned Exceptions Programs may name their own exceptions by creating a new exception class (see Classesfor more about Python classes). Exceptions should typically be derived from the Exception class, either directly or indi- rectly. Exception classes can be deﬁned which do anything any other class can do, but are usually kept simple, often only oﬀering a number of attributes that allow information about the error to be extracted by handlers for the exception. When creating a module that can raise several distinct errors, a common practice is to create a base class for exceptions deﬁned by that module, and subclass that to create speciﬁc exception classes for diﬀerent error conditions: class Error(Exception ): \"\"\"Base class for exceptions in this module.\"\"\" pass class InputError (Error): \"\"\"Exception raised for errors in the input. Attributes: expression -- input expression in which the error occurred message -- explanation of the error \"\"\" def__init__ (s"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 71,
      "text": "ass class InputError (Error): \"\"\"Exception raised for errors in the input. Attributes: expression -- input expression in which the error occurred message -- explanation of the error \"\"\" def__init__ (self, expression, message): self.expression =expression self.message =message class TransitionError (Error): \"\"\"Raised when an operation attempts a state transition that's not allowed. Attributes: previous -- state at beginning of transition next -- attempted new state message -- explanation of why the specific transition is not allowed \"\"\" def__init__ (self, previous, next, message): self.previous =previous self.next=next self.message =message Mostexceptionsaredeﬁnedwithnamesthatendin“Error,”similartothenamingofthestandardexceptions. Many standard modules deﬁne their own exceptions to report errors that may occur in functions they deﬁne. More information on classes is presented in chapter Classes. 8.5. User-deﬁned Exceptions 65"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 72,
      "text": "Python Tutorial, Release 3.7.0 8.6Deﬁning Clean-up Actions Thetrystatement has another optional clause which is intended to deﬁne clean-up actions that must be executed under all circumstances. For example: >>> try: ... raiseKeyboardInterrupt ... finally: ... print('Goodbye, world! ') ... Goodbye, world! KeyboardInterrupt Traceback (most recent call last): File\"<stdin>\" , line2, in <module> A ﬁnal ly clause is always executed before leaving the trystatement, whether an exception has occurred or not. When an exception has occurred in the tryclause and has not been handled by an exceptclause (or it has occurred in an exceptorelseclause), it is re-raised after the finally clause has been executed. The finally clause is also executed “on the way out” when any other clause of the trystatement is left via a break,continue orreturnstatement. A more complicated example: >>> defdivide(x, y): ... try: ... result=x/y ... exceptZeroDivisionError : ... print(\"division by zero! \") ... else: ... print(\"result is \", result) ... finally: ... print(\"executing finally clause \") ... >>>divide(2,1) result is 2.0 executing finally clause >>>divide(2,0) division by zero! executing finally clause >>>divid"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 72,
      "text": "t(\"result is \", result) ... finally: ... print(\"executing finally clause \") ... >>>divide(2,1) result is 2.0 executing finally clause >>>divide(2,0) division by zero! executing finally clause >>>divide(\"2\",\"1\") executing finally clause Traceback (most recent call last): File\"<stdin>\" , line1, in <module> File\"<stdin>\" , line3, in divide TypeError : unsupported operand type(s) for /: 'str' and 'str' As you can see, the finally clause is executed in any event. The TypeError raised by dividing two strings is not handled by the exceptclause and therefore re-raised after the finally clause has been executed. In real world applications, the finally clause is useful for releasing external resources (such as ﬁles or network connections), regardless of whether the use of the resource was successful. 8.7Predeﬁned Clean-up Actions Some objects deﬁne standard clean-up actions to be undertaken when the object is no longer needed, regard- less of whether or not the operation using the object succeeded or failed. Look at the following example, which tries to open a ﬁle and print its contents to the screen. 66 Chapter 8. Errors and Exceptions"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 73,
      "text": "Python Tutorial, Release 3.7.0 forline inopen(\"myfile.txt \"): print(line, end =\"\") The problem with this code is that it leaves the ﬁle open for an indeterminate amount of time after this part of the code has ﬁnished executing. This is not an issue in simple scripts, but can be a problem for larger applications. The withstatement allows objects like ﬁles to be used in a way that ensures they are always cleaned up promptly and correctly. withopen(\"myfile.txt \") asf: forline inf: print(line, end =\"\") After the statement is executed, the ﬁle fis always closed, even if a problem was encountered while pro- cessing the lines. Objects which, like ﬁles, provide predeﬁned clean-up actions will indicate this in their documentation. 8.7. Predeﬁned Clean-up Actions 67"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 74,
      "text": "Python Tutorial, Release 3.7.0 68 Chapter 8. Errors and Exceptions"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 75,
      "text": "CHAPTER NINE CLASSES Classes provide a means of bundling data and functionality together. Creating a new class creates a new type of object, allowing new instances of that type to be made. Each class instance can have attributes attached to it for maintaining its state. Class instances can also have methods (deﬁned by its class) for modifying its state. Compared with other programming languages, Python’s class mechanism adds classes with a minimum of new syntax and semantics. It is a mixture of the class mechanisms found in C++ and Modula-3. Python classes provide all the standard features of Object Oriented Programming: the class inheritance mechanism allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name. Objects can contain arbitrary amounts and kinds of data. As is true for modules, classes partake of the dynamic nature of Python: they are created at runtime, and can be modiﬁed further after creation. In C++ terminology, normally class members (including the data members) are public(except see below Private V ariables ), and all member functions are virtual. As in M"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 75,
      "text": " modiﬁed further after creation. In C++ terminology, normally class members (including the data members) are public(except see below Private V ariables ), and all member functions are virtual. As in Modula-3, there are no shorthands for referencing the object’s members from its methods: the method function is declared with an explicit ﬁrst argumentrepresentingtheobject, whichisprovidedimplicitlybythecall. AsinSmalltalk, classesthemselves are objects. This provides semantics for importing and renaming. Unlike C++ and Modula-3, built-in types can be used as base classes for extension by the user. Also, like in C++, most built-in operators with special syntax (arithmetic operators, subscripting etc.) can be redeﬁned for class instances. (Lacking universally accepted terminology to talk about classes, I will make occasional use of Smalltalk and C++ terms. I would use Modula-3 terms, since its object-oriented semantics are closer to those of Python than C++, but I expect that few readers have heard of it.) 9.1A Word About Names and Objects Objects have individuality, and multiple names (in multiple scopes) can be bound to the same object. This is known as aliasing in other languages. Th"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 75,
      "text": "ve heard of it.) 9.1A Word About Names and Objects Objects have individuality, and multiple names (in multiple scopes) can be bound to the same object. This is known as aliasing in other languages. This is usually not appreciated on a ﬁrst glance at Python, and can be safely ignored when dealing with immutable basic types (numbers, strings, tuples). However, aliasing has a possibly surprising eﬀect on the semantics of Python code involving mutable objects such as lists, dictionaries, and most other types. This is usually used to the beneﬁt of the program, since aliases behave like pointers in some respects. For example, passing an object is cheap since only a pointer is passed by the implementation; and if a function modiﬁes an object passed as an argument, the caller will see the change — this eliminates the need for two diﬀerent argument passing mechanisms as in Pascal. 9.2Python Scopes and Namespaces Before introducing classes, I ﬁrst have to tell you something about Python’s scope rules. Class deﬁnitions play some neat tricks with namespaces, and you need to know how scopes and namespaces work to fully 69"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 76,
      "text": "Python Tutorial, Release 3.7.0 understand what’s going on. Incidentally, knowledge about this subject is useful for any advanced Python programmer. Let’s begin with some deﬁnitions. A namespace is a mapping from names to objects. Most namespaces are currently implemented as Python dictionaries, but that’s normally not noticeable in any way (except for performance), and it may change in the future. Examples of namespaces are: the set of built-in names (containing functions such as abs(), and built-in exception names); the global names in a module; and the local names in a function invocation. In a sense the set of attributes of an object also form a namespace. The important thing to know about namespaces is that there is absolutely no relation between names in diﬀerent namespaces; for instance, two diﬀerent modules may both deﬁne a function maximize without confusion — users of the modules must preﬁx it with the module name. By the way, I use the word attribute for any name following a dot — for example, in the expression z. real,realis an attribute of the object z. Strictly speaking, references to names in modules are attribute references: in the expression modname.funcname ,modnam"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 76,
      "text": "dot — for example, in the expression z. real,realis an attribute of the object z. Strictly speaking, references to names in modules are attribute references: in the expression modname.funcname ,modname is a module object and funcname is an attribute of it. In this case there happens to be a straightforward mapping between the module’s attributes and the global names deﬁned in the module: they share the same namespace!1 Attributes may be read-only or writable. In the latter case, assignment to attributes is possible. Module attributes are writable: you can write modname.the_answer = 42 . Writable attributes may also be deleted with thedelstatement. For example, del modname.the_answer will remove the attribute the_answer from the object named by modname. Namespaces are created at diﬀerent moments and have diﬀerent lifetimes. The namespace containing the built-in names is created when the Python interpreter starts up, and is never deleted. The global namespace for a module is created when the module deﬁnition is read in; normally, module namespaces also last until the interpreter quits. The statements executed by the top-level invocation of the interpreter, either read from a script ﬁ"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 76,
      "text": " the module deﬁnition is read in; normally, module namespaces also last until the interpreter quits. The statements executed by the top-level invocation of the interpreter, either read from a script ﬁle or interactively, are considered part of a module called __main__ , so they have their own global namespace. (The built-in names actually also live in a module; this is called builtins .) The local namespace for a function is created when the function is called, and deleted when the function returns or raises an exception that is not handled within the function. (Actually, forgetting would be a better way to describe what actually happens.) Of course, recursive invocations each have their own local namespace. AscopeisatextualregionofaPythonprogramwhereanamespaceisdirectlyaccessible. “Directlyaccessible” here means that an unqualiﬁed reference to a name attempts to ﬁnd the name in the namespace. Although scopes are determined statically, they are used dynamically. At any time during execution, there are at least three nested scopes whose namespaces are directly accessible: •the innermost scope, which is searched ﬁrst, contains the local names •the scopes of any enclosing functions, w"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 76,
      "text": "ution, there are at least three nested scopes whose namespaces are directly accessible: •the innermost scope, which is searched ﬁrst, contains the local names •the scopes of any enclosing functions, which are searched starting with the nearest enclosing scope, contains non-local, but also non-global names •the next-to-last scope contains the current module’s global names •the outermost scope (searched last) is the namespace containing built-in names Ifanameisdeclaredglobal, thenallreferencesandassignmentsgodirectlytothemiddlescopecontainingthe module’s global names. To rebind variables found outside of the innermost scope, the nonlocal statement can be used; if not declared nonlocal, those variables are read-only (an attempt to write to such a variable will simply create a newlocal variable in the innermost scope, leaving the identically named outer variable unchanged). 1Except for one thing. Module objects have a secret read-only attribute called __dict__ which returns the dictionary used to implement the module’s namespace; the name __dict__ is an attribute but not a global name. Obviously , using this violates the abstraction of namespace implementation, and should be restricted"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 76,
      "text": "used to implement the module’s namespace; the name __dict__ is an attribute but not a global name. Obviously , using this violates the abstraction of namespace implementation, and should be restricted to things like post-mortem debuggers. 70 Chapter 9. Classes"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 77,
      "text": "Python Tutorial, Release 3.7.0 Usually, the local scope references the local names of the (textually) current function. Outside functions, the local scope references the same namespace as the global scope: the module’s namespace. Class deﬁnitions place yet another namespace in the local scope. It is important to realize that scopes are determined textually: the global scope of a function deﬁned in a module is that module’s namespace, no matter from where or by what alias the function is called. On the other hand, the actual search for names is done dynamically, at run time — however, the language deﬁnition is evolving towards static name resolution, at “compile” time, so don’t rely on dynamic name resolution! (In fact, local variables are already determined statically.) A special quirk of Python is that – if no globalstatement is in eﬀect – assignments to names always go into the innermost scope. Assignments do not copy data — they just bind names to objects. The same is true for deletions: the statement del xremoves the binding of xfrom the namespace referenced by the local scope. In fact, all operations that introduce new names use the local scope: in particular, importstatements"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 77,
      "text": "ions: the statement del xremoves the binding of xfrom the namespace referenced by the local scope. In fact, all operations that introduce new names use the local scope: in particular, importstatements and function deﬁnitions bind the module or function name in the local scope. Theglobalstatement can be used to indicate that particular variables live in the global scope and should be rebound there; the nonlocal statement indicates that particular variables live in an enclosing scope and should be rebound there. 9.2.1Scopes and Namespaces Example This is an example demonstrating how to reference the diﬀerent scopes and namespaces, and how global andnonlocal aﬀect variable binding: defscope_test (): defdo_local (): spam=\"local spam \" defdo_nonlocal (): nonlocal spam spam=\"nonlocal spam \" defdo_global (): globalspam spam=\"global spam \" spam=\"test spam \" do_local() print(\"After local assignment: \", spam) do_nonlocal() print(\"After nonlocal assignment: \", spam) do_global() print(\"After global assignment: \", spam) scope_test() print(\"In global scope: \", spam) The output of the example code is: After local assignment: test spam After nonlocal assignment: nonlocal spam After global assignme"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 77,
      "text": "l assignment: \", spam) scope_test() print(\"In global scope: \", spam) The output of the example code is: After local assignment: test spam After nonlocal assignment: nonlocal spam After global assignment: nonlocal spam In global scope: global spam Note how the localassignment (which is default) didn’t change scope_test ’s binding of spam. Thenonlocal assignment changed scope_test ’s binding of spam, and the globalassignment changed the module-level binding. 9.2. Python Scopes and Namespaces 71"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 78,
      "text": "Python Tutorial, Release 3.7.0 You can also see that there was no previous binding for spambefore the globalassignment. 9.3A First Look at Classes Classes introduce a little bit of new syntax, three new object types, and some new semantics. 9.3.1Class Deﬁnition Syntax The simplest form of class deﬁnition looks like this: class ClassName : <statement -1> . . . <statement -N> Class deﬁnitions, like function deﬁnitions ( defstatements) must be executed before they have any eﬀect. (You could conceivably place a class deﬁnition in a branch of an ifstatement, or inside a function.) In practice, the statements inside a class deﬁnition will usually be function deﬁnitions, but other statements are allowed, and sometimes useful — we’ll come back to this later. The function deﬁnitions inside a class normally have a peculiar form of argument list, dictated by the calling conventions for methods — again, this is explained later. When a class deﬁnition is entered, a new namespace is created, and used as the local scope — thus, all assignments to local variables go into this new namespace. In particular, function deﬁnitions bind the name of the new function here. When a class deﬁnition is left no"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 78,
      "text": "d as the local scope — thus, all assignments to local variables go into this new namespace. In particular, function deﬁnitions bind the name of the new function here. When a class deﬁnition is left normally (via the end), a class object is created. This is basically a wrapper around the contents of the namespace created by the class deﬁnition; we’ll learn more about class objects in the next section. The original local scope (the one in eﬀect just before the class deﬁnition was entered) is reinstated, and the class object is bound here to the class name given in the class deﬁnition header (ClassName in the example). 9.3.2Class Objects Class objects support two kinds of operations: attribute references and instantiation. Attribute references use the standard syntax used for all attribute references in Python: obj.name . Valid attribute names are all the names that were in the class’s namespace when the class object was created. So, if the class deﬁnition looked like this: class MyClass: \"\"\"A simple example class\"\"\" i=12345 deff(self): return'hello world ' thenMyClass.i andMyClass.f are valid attribute references, returning an integer and a function object, respectively. Class attrib"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 78,
      "text": " \"\"\"A simple example class\"\"\" i=12345 deff(self): return'hello world ' thenMyClass.i andMyClass.f are valid attribute references, returning an integer and a function object, respectively. Class attributes can also be assigned to, so you can change the value of MyClass.i by assign- ment.__doc__ is also a valid attribute, returning the docstring belonging to the class: \"A simple example class\". 72 Chapter 9. Classes"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 79,
      "text": "Python Tutorial, Release 3.7.0 Class instantiation uses function notation. Just pretend that the class object is a parameterless function that returns a new instance of the class. For example (assuming the above class): x=MyClass() creates a new instance of the class and assigns this object to the local variable x. The instantiation operation (“calling” a class object) creates an empty object. Many classes like to create objects with instances customized to a speciﬁc initial state. Therefore a class may deﬁne a special method named__init__() , like this: def__init__ (self): self.data=[] When a class deﬁnes an __init__() method, class instantiation automatically invokes __init__() for the newly-created class instance. So in this example, a new, initialized instance can be obtained by: x=MyClass() Of course, the __init__() method may have arguments for greater ﬂexibility. In that case, arguments given to the class instantiation operator are passed on to __init__() . For example, >>> class Complex: ... def__init__ (self, realpart, imagpart): ... self.r=realpart ... self.i=imagpart ... >>>x=Complex( 3.0,-4.5) >>>x.r, x.i (3.0, -4.5) 9.3.3Instance Objects Now what can we do with instanc"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 79,
      "text": "s Complex: ... def__init__ (self, realpart, imagpart): ... self.r=realpart ... self.i=imagpart ... >>>x=Complex( 3.0,-4.5) >>>x.r, x.i (3.0, -4.5) 9.3.3Instance Objects Now what can we do with instance objects? The only operations understood by instance objects are attribute references. There are two kinds of valid attribute names, data attributes and methods. data attributes correspond to “instance variables” in Smalltalk, and to “data members” in C++. Data attributes need not be declared; like local variables, they spring into existence when they are ﬁrst assigned to. For example, if xis the instance of MyClass created above, the following piece of code will print the value16, without leaving a trace: x.counter =1 whilex.counter <10: x.counter =x.counter *2 print(x.counter) delx.counter The other kind of instance attribute reference is a method. A method is a function that “belongs to” an object. (In Python, the term method is not unique to class instances: other object types can have methods as well. For example, list objects have methods called append, insert, remove, sort, and so on. However, in the following discussion, we’ll use the term method exclusively to mean methods of"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 79,
      "text": "e methods as well. For example, list objects have methods called append, insert, remove, sort, and so on. However, in the following discussion, we’ll use the term method exclusively to mean methods of class instance objects, unless explicitly stated otherwise.) Valid method names of an instance object depend on its class. By deﬁnition, all attributes of a class that are function objects deﬁne corresponding methods of its instances. So in our example, x.fis a valid method reference, since MyClass.f is a function, but x.iis not, since MyClass.i is not. But x.fis not the same thing asMyClass.f — it is a method object , not a function object. 9.3. A First Look at Classes 73"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 80,
      "text": "Python Tutorial, Release 3.7.0 9.3.4Method Objects Usually, a method is called right after it is bound: x.f() In theMyClass example, this will return the string 'hello world' . However, it is not necessary to call a method right away: x.fis a method object, and can be stored away and called at a later time. For example: xf=x.f while True: print(xf()) will continue to print hello world until the end of time. What exactly happens when a method is called? You may have noticed that x.f()was called without an argument above, even though the function deﬁnition for f()speciﬁed an argument. What happened to the argument? Surely Python raises an exception when a function that requires an argument is called without any — even if the argument isn’t actually used… Actually, you may have guessed the answer: the special thing about methods is that the instance object is passed as the ﬁrst argument of the function. In our example, the call x.f()is exactly equivalent to MyClass. f(x). In general, calling a method with a list of narguments is equivalent to calling the corresponding function with an argument list that is created by inserting the method’s instance object before the ﬁrst argument. If "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 80,
      "text": "ing a method with a list of narguments is equivalent to calling the corresponding function with an argument list that is created by inserting the method’s instance object before the ﬁrst argument. If you still don’t understand how methods work, a look at the implementation can perhaps clarify matters. When a non-data attribute of an instance is referenced, the instance’s class is searched. If the name denotes a valid class attribute that is a function object, a method object is created by packing (pointers to) the instance object and the function object just found together in an abstract object: this is the method object. When the method object is called with an argument list, a new argument list is constructed from the instance object and the argument list, and the function object is called with this new argument list. 9.3.5Class and Instance Variables Generally speaking, instance variables are for data unique to each instance and class variables are for at- tributes and methods shared by all instances of the class: class Dog: kind='canine' # class variable shared by all instances def__init__ (self, name): self.name=name # instance variable unique to each instance >>>d=Dog('Fido')"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 80,
      "text": "d by all instances of the class: class Dog: kind='canine' # class variable shared by all instances def__init__ (self, name): self.name=name # instance variable unique to each instance >>>d=Dog('Fido') >>>e=Dog('Buddy') >>>d.kind # shared by all dogs 'canine' >>>e.kind # shared by all dogs 'canine' >>>d.name # unique to d 'Fido' >>>e.name # unique to e 'Buddy' 74 Chapter 9. Classes"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 81,
      "text": "Python Tutorial, Release 3.7.0 As discussed in A W ord About Names and Objects , shared data can have possibly surprising eﬀects with involving mutable objects such as lists and dictionaries. For example, the trickslist in the following code should not be used as a class variable because just a single list would be shared by all Doginstances: class Dog: tricks=[] # mistaken use of a class variable def__init__ (self, name): self.name=name defadd_trick (self, trick): self.tricks.append(trick) >>>d=Dog('Fido') >>>e=Dog('Buddy') >>>d.add_trick( 'roll over ') >>>e.add_trick( 'play dead ') >>>d.tricks # unexpectedly shared by all dogs ['roll over ','play dead '] Correct design of the class should use an instance variable instead: class Dog: def__init__ (self, name): self.name=name self.tricks=[]# creates a new empty list for each dog defadd_trick (self, trick): self.tricks.append(trick) >>>d=Dog('Fido') >>>e=Dog('Buddy') >>>d.add_trick( 'roll over ') >>>e.add_trick( 'play dead ') >>>d.tricks ['roll over '] >>>e.tricks ['play dead '] 9.4Random Remarks Data attributes override method attributes with the same name; to avoid accidental name conﬂicts, which may cause hard-to-ﬁnd bugs in large"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 81,
      "text": " ['roll over '] >>>e.tricks ['play dead '] 9.4Random Remarks Data attributes override method attributes with the same name; to avoid accidental name conﬂicts, which may cause hard-to-ﬁnd bugs in large programs, it is wise to use some kind of convention that minimizes the chance of conﬂicts. Possible conventions include capitalizing method names, preﬁxing data attribute names with a small unique string (perhaps just an underscore), or using verbs for methods and nouns for data attributes. Data attributes may be referenced by methods as well as by ordinary users (“clients”) of an object. In other words, classes are not usable to implement pure abstract data types. In fact, nothing in Python makes it possible to enforce data hiding — it is all based upon convention. (On the other hand, the Python implementation, written in C, can completely hide implementation details and control access to an object if necessary; this can be used by extensions to Python written in C.) Clients should use data attributes with care — clients may mess up invariants maintained by the methods 9.4. Random Remarks 75"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 82,
      "text": "Python Tutorial, Release 3.7.0 by stamping on their data attributes. Note that clients may add data attributes of their own to an instance object without aﬀecting the validity of the methods, as long as name conﬂicts are avoided — again, a naming convention can save a lot of headaches here. There is no shorthand for referencing data attributes (or other methods!) from within methods. I ﬁnd that this actually increases the readability of methods: there is no chance of confusing local variables and instance variables when glancing through a method. Often, the ﬁrst argument of a method is called self. This is nothing more than a convention: the name selfhas absolutely no special meaning to Python. Note, however, that by not following the convention your code may be less readable to other Python programmers, and it is also conceivable that a class browser program might be written that relies upon such a convention. Any function object that is a class attribute deﬁnes a method for instances of that class. It is not necessary that the function deﬁnition is textually enclosed in the class deﬁnition: assigning a function object to a local variable in the class is also ok. For example: # Fu"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 82,
      "text": " of that class. It is not necessary that the function deﬁnition is textually enclosed in the class deﬁnition: assigning a function object to a local variable in the class is also ok. For example: # Function defined outside the class deff1(self, x, y): returnmin(x, x+y) class C: f=f1 defg(self): return'hello world ' h=g Nowf,gandhare all attributes of class Cthat refer to function objects, and consequently they are all methods of instances of C—hbeing exactly equivalent to g. Note that this practice usually only serves to confuse the reader of a program. Methods may call other methods by using method attributes of the selfargument: class Bag: def__init__ (self): self.data=[] defadd(self, x): self.data.append(x) defaddtwice (self, x): self.add(x) self.add(x) Methods may reference global names in the same way as ordinary functions. The global scope associated with a method is the module containing its deﬁnition. (A class is never used as a global scope.) While one rarely encounters a good reason for using global data in a method, there are many legitimate uses of the global scope: for one thing, functions and modules imported into the global scope can be used by methods, as well as fu"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 82,
      "text": " reason for using global data in a method, there are many legitimate uses of the global scope: for one thing, functions and modules imported into the global scope can be used by methods, as well as functions and classes deﬁned in it. Usually, the class containing the method is itself deﬁned in this global scope, and in the next section we’ll ﬁnd some good reasons why a method would want to reference its own class. Each value is an object, and therefore has a class(also called its type). It is stored as object.__class__ . 76 Chapter 9. Classes"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 83,
      "text": "Python Tutorial, Release 3.7.0 9.5Inheritance Of course, a language feature would not be worthy of the name “class” without supporting inheritance. The syntax for a derived class deﬁnition looks like this: class DerivedClassName (BaseClassName): <statement -1> . . . <statement -N> The name BaseClassName must be deﬁned in a scope containing the derived class deﬁnition. In place of a base class name, other arbitrary expressions are also allowed. This can be useful, for example, when the base class is deﬁned in another module: class DerivedClassName (modname .BaseClassName): Execution of a derived class deﬁnition proceeds the same as for a base class. When the class object is constructed, the base class is remembered. This is used for resolving attribute references: if a requested attribute is not found in the class, the search proceeds to look in the base class. This rule is applied recursively if the base class itself is derived from some other class. There’snothingspecialaboutinstantiationofderivedclasses: DerivedClassName() createsanewinstanceof the class. Method references are resolved as follows: the corresponding class attribute is searched, descending down the chain of base cl"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 83,
      "text": "tionofderivedclasses: DerivedClassName() createsanewinstanceof the class. Method references are resolved as follows: the corresponding class attribute is searched, descending down the chain of base classes if necessary, and the method reference is valid if this yields a function object. Derived classes may override methods of their base classes. Because methods have no special privileges when calling other methods of the same object, a method of a base class that calls another method deﬁned in the same base class may end up calling a method of a derived class that overrides it. (For C++ programmers: all methods in Python are eﬀectively virtual.) An overriding method in a derived class may in fact want to extend rather than simply replace the base class method of the same name. There is a simple way to call the base class method directly: just call BaseClassName.methodname(self, arguments) . This is occasionally useful to clients as well. (Note that this only works if the base class is accessible as BaseClassName in the global scope.) Python has two built-in functions that work with inheritance: •Useisinstance() to check an instance’s type: isinstance(obj, int) will beTrueonly ifobj"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 83,
      "text": "accessible as BaseClassName in the global scope.) Python has two built-in functions that work with inheritance: •Useisinstance() to check an instance’s type: isinstance(obj, int) will beTrueonly ifobj. __class__ isintor some class derived from int. •Useissubclass() to check class inheritance: issubclass(bool, int) isTruesinceboolis a subclass ofint. However, issubclass(float, int) isFalsesincefloatis not a subclass of int. 9.5.1Multiple Inheritance Python supports a form of multiple inheritance as well. A class deﬁnition with multiple base classes looks like this: class DerivedClassName (Base1, Base2, Base3): <statement -1> . . . <statement -N> 9.5. Inheritance 77"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 84,
      "text": "Python Tutorial, Release 3.7.0 For most purposes, in the simplest cases, you can think of the search for attributes inherited from a parent class as depth-ﬁrst, left-to-right, not searching twice in the same class where there is an overlap in the hier- archy. Thus, if an attribute is not found in DerivedClassName , it is searched for in Base1, then (recursively) in the base classes of Base1, and if it was not found there, it was searched for in Base2, and so on. In fact, it is slightly more complex than that; the method resolution order changes dynamically to support cooperative calls to super(). This approach is known in some other multiple-inheritance languages as call-next-method and is more powerful than the super call found in single-inheritance languages. Dynamic ordering is necessary because all cases of multiple inheritance exhibit one or more diamond re- lationships (where at least one of the parent classes can be accessed through multiple paths from the bottommost class). For example, all classes inherit from object, so any case of multiple inheritance provides more than one path to reach object. To keep the base classes from being accessed more than once, the dynamic alg"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 84,
      "text": " example, all classes inherit from object, so any case of multiple inheritance provides more than one path to reach object. To keep the base classes from being accessed more than once, the dynamic algorithm linearizes the search order in a way that preserves the left-to-right order- ing speciﬁed in each class, that calls each parent only once, and that is monotonic (meaning that a class can be subclassed without aﬀecting the precedence order of its parents). Taken together, these properties make it possible to design reliable and extensible classes with multiple inheritance. For more detail, see https://www.python.org/download/releases/2.3/mro/ . 9.6Private Variables “Private” instance variables that cannot be accessed except from inside an object don’t exist in Python. However, there is a convention that is followed by most Python code: a name preﬁxed with an underscore (e.g._spam) should be treated as a non-public part of the API (whether it is a function, a method or a data member). It should be considered an implementation detail and subject to change without notice. Since there is a valid use-case for class-private members (namely to avoid name clashes of names with names deﬁn"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 84,
      "text": " It should be considered an implementation detail and subject to change without notice. Since there is a valid use-case for class-private members (namely to avoid name clashes of names with names deﬁned by subclasses), there is limited support for such a mechanism, called name mangling . Any identiﬁer of the form __spam(at least two leading underscores, at most one trailing underscore) is textually replaced with_classname__spam , whereclassname is the current class name with leading underscore(s) stripped. This mangling is done without regard to the syntactic position of the identiﬁer, as long as it occurs within the deﬁnition of a class. Name mangling is helpful for letting subclasses override methods without breaking intraclass method calls. For example: class Mapping: def__init__ (self, iterable): self.items_list =[] self.__update(iterable) defupdate(self, iterable): foritem initerable: self.items_list .append(item) __update =update # private copy of original update() method class MappingSubclass (Mapping): defupdate(self, keys, values): # provides new signature for update() # but does not break __init__() foritem inzip(keys, values): self.items_list .append(item) Note that the "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 84,
      "text": "appingSubclass (Mapping): defupdate(self, keys, values): # provides new signature for update() # but does not break __init__() foritem inzip(keys, values): self.items_list .append(item) Note that the mangling rules are designed mostly to avoid accidents; it still is possible to access or modify a variable that is considered private. This can even be useful in special circumstances, such as in the debugger. 78 Chapter 9. Classes"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 85,
      "text": "Python Tutorial, Release 3.7.0 Notice that code passed to exec()oreval()does not consider the classname of the invoking class to be the current class; this is similar to the eﬀect of the globalstatement, the eﬀect of which is likewise restricted to code that is byte-compiled together. The same restriction applies to getattr() ,setattr() anddelattr() , as well as when referencing __dict__ directly. 9.7Odds and Ends Sometimes it is useful to have a data type similar to the Pascal “record” or C “struct”, bundling together a few named data items. An empty class deﬁnition will do nicely: class Employee : pass john=Employee() # Create an empty employee record # Fill the fields of the record john.name='John Doe ' john.dept='computer lab ' john.salary=1000 A piece of Python code that expects a particular abstract data type can often be passed a class that emulates the methods of that data type instead. For instance, if you have a function that formats some data from a ﬁle object, you can deﬁne a class with methods read()andreadline() that get the data from a string buﬀer instead, and pass it as an argument. Instance method objects have attributes, too: m.__self__ is the instance object wit"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 85,
      "text": " a class with methods read()andreadline() that get the data from a string buﬀer instead, and pass it as an argument. Instance method objects have attributes, too: m.__self__ is the instance object with the method m(), and m.__func__ is the function object corresponding to the method. 9.8Iterators By now you have probably noticed that most container objects can be looped over using a forstatement: forelement in[1,2,3]: print(element) forelement in(1,2,3): print(element) forkey in{'one':1,'two':2}: print(key) forchar in\"123\": print(char) forline inopen(\"myfile.txt \"): print(line, end ='') This style of access is clear, concise, and convenient. The use of iterators pervades and uniﬁes Python. Behind the scenes, the forstatement calls iter()on the container object. The function returns an iterator object that deﬁnes the method __next__() which accesses elements in the container one at a time. When there are no more elements, __next__() raises aStopIteration exception which tells the forloop to terminate. You can call the __next__() method using the next()built-in function; this example shows how it all works: >>>s='abc' >>>it=iter(s) >>>it (continues on next page) 9.7. Odds and Ends 79"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 86,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) <iterator object at 0x00A1DB50> >>>next(it) 'a' >>>next(it) 'b' >>>next(it) 'c' >>>next(it) Traceback (most recent call last): File\"<stdin>\" , line1, in <module> next(it) StopIteration Having seen the mechanics behind the iterator protocol, it is easy to add iterator behavior to your classes. Deﬁne an __iter__() method which returns an object with a __next__() method. If the class deﬁnes __next__() , then__iter__() can just return self: class Reverse: \"\"\"Iterator for looping over a sequence backwards.\"\"\" def__init__ (self, data): self.data=data self.index=len(data) def__iter__ (self): returnself def__next__ (self): ifself.index==0: raiseStopIteration self.index=self.index-1 returnself.data[self.index] >>>rev=Reverse( 'spam') >>>iter(rev) <__main__.Reverse object at 0x00A1DB50> >>> forchar inrev: ... print(char) ... m a p s 9.9Generators Generator s are a simple and powerful tool for creating iterators. They are written like regular functions but use theyieldstatement whenever they want to return data. Each time next()is called on it, the generator resumes where it left oﬀ (it remembers all the data values and which state"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 86,
      "text": "regular functions but use theyieldstatement whenever they want to return data. Each time next()is called on it, the generator resumes where it left oﬀ (it remembers all the data values and which statement was last executed). An example shows that generators can be trivially easy to create: defreverse(data): forindex inrange(len(data)-1,-1,-1): yielddata[index] 80 Chapter 9. Classes"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 87,
      "text": "Python Tutorial, Release 3.7.0 >>> forchar inreverse( 'golf'): ... print(char) ... f l o g Anything that can be done with generators can also be done with class-based iterators as described in the previous section. What makes generators so compact is that the __iter__() and__next__() methods are created automatically. Another key feature is that the local variables and execution state are automatically saved between calls. This made the function easier to write and much more clear than an approach using instance variables like self.index andself.data . In addition to automatic method creation and saving program state, when generators terminate, they au- tomatically raise StopIteration . In combination, these features make it easy to create iterators with no more eﬀort than writing a regular function. 9.10Generator Expressions Some simple generators can be coded succinctly as expressions using a syntax similar to list comprehensions but with parentheses instead of square brackets. These expressions are designed for situations where the gen- erator is used right away by an enclosing function. Generator expressions are more compact but less versatile than full generator deﬁnitions and"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 87,
      "text": " expressions are designed for situations where the gen- erator is used right away by an enclosing function. Generator expressions are more compact but less versatile than full generator deﬁnitions and tend to be more memory friendly than equivalent list comprehensions. Examples: >>>sum(i*i foriinrange(10)) # sum of squares 285 >>>xvec=[10,20,30] >>>yvec=[7,5,3] >>>sum(x*y forx,y inzip(xvec, yvec)) # dot product 260 >>> from math importpi, sin >>>sine_table ={x: sin(x *pi/180) forxinrange(0,91)} >>>unique_words =set(word forline inpage forword inline.split()) >>>valedictorian =max((student .gpa, student .name) forstudent ingraduates) >>>data='golf' >>>list(data[i] fori inrange(len(data)-1,-1,-1)) ['f', 'l', 'o', 'g'] 9.10. Generator Expressions 81"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 88,
      "text": "Python Tutorial, Release 3.7.0 82 Chapter 9. Classes"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 89,
      "text": "CHAPTER TEN BRIEF TOUR OF THE STANDARD LIBRARY 10.1Operating System Interface Theosmodule provides dozens of functions for interacting with the operating system: >>> import os >>>os.getcwd() # Return the current working directory 'C:\\\\Python37' >>>os.chdir('/server/accesslogs ')# Change current working directory >>>os.system('mkdir today ')# Run the command mkdir in the system shell 0 Be sure to use the import os style instead of from os import * . This will keep os.open() from shadowing the built-in open()function which operates much diﬀerently. The built-in dir()andhelp()functions are useful as interactive aids for working with large modules like os: >>> import os >>>dir(os) <returns a list of all module functions> >>>help(os) <returns an extensive manual page created from the module's docstrings> For daily ﬁle and directory management tasks, the shutilmodule provides a higher level interface that is easier to use: >>> import shutil >>>shutil.copyfile( 'data.db','archive.db ') 'archive.db' >>>shutil.move('/build/executables ','installdir ') 'installdir' 10.2File Wildcards Theglobmodule provides a function for making ﬁle lists from directory wildcard searches: >>> import glob >>>g"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 89,
      "text": "ve.db' >>>shutil.move('/build/executables ','installdir ') 'installdir' 10.2File Wildcards Theglobmodule provides a function for making ﬁle lists from directory wildcard searches: >>> import glob >>>glob.glob('*.py') ['primes.py', 'random.py', 'quote.py'] 83"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 90,
      "text": "Python Tutorial, Release 3.7.0 10.3Command Line Arguments Common utility scripts often need to process command line arguments. These arguments are stored in the sysmodule’s argvattribute as a list. For instance the following output results from running python demo.py one two three at the command line: >>> import sys >>>print(sys.argv) ['demo.py', 'one', 'two', 'three'] Thegetoptmodule processes sys.argv using the conventions of the Unix getopt() function. More powerful and ﬂexible command line processing is provided by the argparse module. 10.4Error Output Redirection and Program Termination Thesysmodule also has attributes for stdin,stdout, and stderr. The latter is useful for emitting warnings and error messages to make them visible even when stdouthas been redirected: >>>sys.stderr.write('Warning, log file not found starting a new one \\n') Warning, log file not found starting a new one The most direct way to terminate a script is to use sys.exit() . 10.5String Pattern Matching Theremodule provides regular expression tools for advanced string processing. For complex matching and manipulation, regular expressions oﬀer succinct, optimized solutions: >>> import re >>>re.findall( r'\\"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 90,
      "text": "module provides regular expression tools for advanced string processing. For complex matching and manipulation, regular expressions oﬀer succinct, optimized solutions: >>> import re >>>re.findall( r'\\bf[a-z]* ','which foot or hand fell fastest ') ['foot', 'fell', 'fastest'] >>>re.sub(r'(\\b[a-z]+) \\1',r'\\1','cat in the the hat ') 'cat in the hat' When only simple capabilities are needed, string methods are preferred because they are easier to read and debug: >>>'tea for too '.replace( 'too','two') 'tea for two' 10.6Mathematics Themathmodule gives access to the underlying C library functions for ﬂoating point math: >>> import math >>>math.cos(math .pi/4) 0.70710678118654757 >>>math.log(1024,2) 10.0 Therandommodule provides tools for making random selections: 84 Chapter 10. Brief Tour of the Standard Library"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 91,
      "text": "Python Tutorial, Release 3.7.0 >>> import random >>>random.choice([ 'apple','pear','banana']) 'apple' >>>random.sample(range(100),10)# sampling without replacement [30, 83, 16, 4, 8, 81, 41, 50, 18, 33] >>>random.random() # random float 0.17970987693706186 >>>random.randrange( 6)# random integer chosen from range(6) 4 Thestatistics module calculates basic statistical properties (the mean, median, variance, etc.) of numeric data: >>> import statistics >>>data=[2.75,1.75,1.25,0.25,0.5,1.25,3.5] >>>statistics .mean(data) 1.6071428571428572 >>>statistics .median(data) 1.25 >>>statistics .variance(data) 1.3720238095238095 The SciPy project < https://scipy.org > has many other modules for numerical computations. 10.7Internet Access There are a number of modules for accessing the internet and processing internet protocols. Two of the simplest are urllib.request for retrieving data from URLs and smtplib for sending mail: >>> from urllib .request importurlopen >>> withurlopen( 'http://tycho.usno.navy.mil/cgi-bin/timer.pl ')asresponse: ... forline inresponse: ... line=line.decode('utf-8')# Decoding the binary data to text. ... if'EST'inline or'EDT' inline:# look for Eastern Time ... print(li"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 91,
      "text": "o.navy.mil/cgi-bin/timer.pl ')asresponse: ... forline inresponse: ... line=line.decode('utf-8')# Decoding the binary data to text. ... if'EST'inline or'EDT' inline:# look for Eastern Time ... print(line) <BR>Nov. 25, 09:43:32 PM EST >>> import smtplib >>>server=smtplib.SMTP('localhost ') >>>server.sendmail( 'soothsayer@example.org ','jcaesar@example.org ', ...\"\"\"To: jcaesar@example.org ...From: soothsayer@example.org ... ...Beware the Ides of March. ...\"\"\") >>>server.quit() (Note that the second example needs a mailserver running on localhost.) 10.8Dates and Times Thedatetime module supplies classes for manipulating dates and times in both simple and complex ways. While date and time arithmetic is supported, the focus of the implementation is on eﬃcient member extrac- 10.7. Internet Access 85"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 92,
      "text": "Python Tutorial, Release 3.7.0 tion for output formatting and manipulation. The module also supports objects that are timezone aware. >>># dates are easily constructed and formatted >>> from datetime importdate >>>now=date.today() >>>now datetime.date(2003, 12, 2) >>>now.strftime( \"%m-%d-%y.%d%b%Y is a%A on the %dday of%B.\") '12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.' >>># dates support calendar arithmetic >>>birthday =date(1964,7,31) >>>age=now-birthday >>>age.days 14368 10.9Data Compression Common data archiving and compression formats are directly supported by modules including: zlib,gzip, bz2,lzma,zipfile andtarfile. >>> import zlib >>>s=b'witch which has which witches wrist watch ' >>>len(s) 41 >>>t=zlib.compress(s) >>>len(t) 37 >>>zlib.decompress(t) b'witch which has which witches wrist watch' >>>zlib.crc32(s) 226805979 10.10Performance Measurement Some Python users develop a deep interest in knowing the relative performance of diﬀerent approaches to the same problem. Python provides a measurement tool that answers those questions immediately. For example, it may be tempting to use the tuple packing and unpacking feature instead of the tradi- tional approa"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 92,
      "text": "problem. Python provides a measurement tool that answers those questions immediately. For example, it may be tempting to use the tuple packing and unpacking feature instead of the tradi- tional approach to swapping arguments. The timeitmodule quickly demonstrates a modest performance advantage: >>> from timeit importTimer >>>Timer('t=a; a=b; b=t ','a=1; b=2 ').timeit() 0.57535828626024577 >>>Timer('a,b = b,a ','a=1; b=2 ').timeit() 0.54962537085770791 Incontrastto timeit’sﬁnelevelofgranularity, the profile andpstatsmodulesprovidetoolsforidentifying time critical sections in larger blocks of code. 86 Chapter 10. Brief Tour of the Standard Library"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 93,
      "text": "Python Tutorial, Release 3.7.0 10.11Quality Control One approach for developing high quality software is to write tests for each function as it is developed and to run those tests frequently during the development process. Thedoctest module provides a tool for scanning a module and validating tests embedded in a program’s docstrings. Test construction is as simple as cutting-and-pasting a typical call along with its results into the docstring. This improves the documentation by providing the user with an example and it allows the doctest module to make sure the code remains true to the documentation: defaverage(values): \"\"\"Computes the arithmetic mean of a list of numbers. >>> print(average([20, 30, 70])) 40.0 \"\"\" returnsum(values) /len(values) import doctest doctest.testmod() # automatically validate the embedded tests Theunittest module is not as eﬀortless as the doctest module, but it allows a more comprehensive set of tests to be maintained in a separate ﬁle: import unittest class TestStatisticalFunctions (unittest .TestCase): deftest_average (self): self.assertEqual(average([ 20,30,70]),40.0) self.assertEqual( round(average([ 1,5,7]),1),4.3) withself.assertRaises( ZeroDivision"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 93,
      "text": "TestStatisticalFunctions (unittest .TestCase): deftest_average (self): self.assertEqual(average([ 20,30,70]),40.0) self.assertEqual( round(average([ 1,5,7]),1),4.3) withself.assertRaises( ZeroDivisionError ): average([]) withself.assertRaises( TypeError ): average( 20,30,70) unittest .main() # Calling from the command line invokes all tests 10.12Batteries Included Python has a “batteries included” philosophy. This is best seen through the sophisticated and robust capabilities of its larger packages. For example: •Thexmlrpc.client andxmlrpc.server modules make implementing remote procedure calls into an almost trivial task. Despite the modules names, no direct knowledge or handling of XML is needed. •Theemailpackage is a library for managing email messages, including MIME and other RFC 2822 - based message documents. Unlike smtplib andpoplibwhich actually send and receive messages, the email package has a complete toolset for building or decoding complex message structures (including attachments) and for implementing internet encoding and header protocols. •Thejsonpackage provides robust support for parsing this popular data interchange format. The csv module supports direct reading"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 93,
      "text": "tachments) and for implementing internet encoding and header protocols. •Thejsonpackage provides robust support for parsing this popular data interchange format. The csv module supports direct reading and writing of ﬁles in Comma-Separated Value format, commonly sup- ported by databases and spreadsheets. XML processing is supported by the xml.etree.ElementTree , xml.dom andxml.sax packages. Together, these modules and packages greatly simplify data inter- change between Python applications and other tools. 10.11. Quality Control 87"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 94,
      "text": "Python Tutorial, Release 3.7.0 •Thesqlite3 module is a wrapper for the SQLite database library, providing a persistent database that can be updated and accessed using slightly nonstandard SQL syntax. •Internationalization is supported by a number of modules including gettext,locale, and the codecs package. 88 Chapter 10. Brief Tour of the Standard Library"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 95,
      "text": "CHAPTER ELEVEN BRIEF TOUR OF THE STANDARD LIBRARY — PART II This second tour covers more advanced modules that support professional programming needs. These mod- ules rarely occur in small scripts. 11.1Output Formatting Thereprlib module provides a version of repr()customized for abbreviated displays of large or deeply nested containers: >>> import reprlib >>>reprlib.repr(set('supercalifragilisticexpialidocious ')) \"{'a', 'c', 'd', 'e', 'f', 'g', ...}\" Thepprintmodule oﬀers more sophisticated control over printing both built-in and user deﬁned objects in a way that is readable by the interpreter. When the result is longer than one line, the “pretty printer” adds line breaks and indentation to more clearly reveal data structure: >>> import pprint >>>t=[[[['black','cyan'],'white', ['green','red']], [['magenta', ... 'yellow'],'blue']]] ... >>>pprint.pprint(t, width =30) [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta', 'yellow'], 'blue']]] Thetextwrap module formats paragraphs of text to ﬁt a given screen width: >>> import textwrap >>>doc=\"\"\"The wrap() method is just like fill() except that it returns ...a list of strings instead of one big string with newlines to separat"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 95,
      "text": "s of text to ﬁt a given screen width: >>> import textwrap >>>doc=\"\"\"The wrap() method is just like fill() except that it returns ...a list of strings instead of one big string with newlines to separate ...the wrapped lines. \"\"\" ... >>>print(textwrap .fill(doc, width =40)) The wrap() method is just like fill() except that it returns a list of strings instead of one big string with newlines to separate the wrapped lines. Thelocalemodule accesses a database of culture speciﬁc data formats. The grouping attribute of locale’s format function provides a direct way of formatting numbers with group separators: 89"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 96,
      "text": "Python Tutorial, Release 3.7.0 >>> import locale >>>locale.setlocale(locale .LC_ALL, 'English_United States.1252 ') 'English_United States.1252' >>>conv=locale.localeconv() # get a mapping of conventions >>>x=1234567.8 >>>locale.format(\"%d\", x, grouping =True) '1,234,567' >>>locale.format_string( \"%s%.*f\", (conv[ 'currency_symbol '], ... conv['frac_digits '], x), grouping =True) '$1,234,567.80' 11.2Templating Thestringmodule includes a versatile Template class with a simpliﬁed syntax suitable for editing by end-users. This allows users to customize their applications without having to alter the application. The format uses placeholder names formed by $with valid Python identiﬁers (alphanumeric characters and underscores). Surrounding the placeholder with braces allows it to be followed by more alphanumeric letters with no intervening spaces. Writing $$creates a single escaped $: >>> from string importTemplate >>>t=Template( '${village} folk send $$10 to $cause. ') >>>t.substitute(village ='Nottingham ', cause='the ditch fund ') 'Nottinghamfolk send $10 to the ditch fund.' Thesubstitute() method raises a KeyError when a placeholder is not supplied in a dictionary or a keyword argume"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 96,
      "text": "ge ='Nottingham ', cause='the ditch fund ') 'Nottinghamfolk send $10 to the ditch fund.' Thesubstitute() method raises a KeyError when a placeholder is not supplied in a dictionary or a keyword argument. For mail-merge style applications, user supplied data may be incomplete and the safe_substitute() method may be more appropriate — it will leave placeholders unchanged if data is missing: >>>t=Template( 'Return the $item to $owner. ') >>>d=dict(item='unladen swallow ') >>>t.substitute(d) Traceback (most recent call last): ... KeyError : 'owner' >>>t.safe_substitute(d) 'Return the unladen swallow to $owner.' Template subclasses can specify a custom delimiter. For example, a batch renaming utility for a photo browser may elect to use percent signs for placeholders such as the current date, image sequence number, or ﬁle format: >>> import time,os .path >>>photofiles =['img_1074.jpg ','img_1076.jpg ','img_1077.jpg '] >>> class BatchRename (Template): ... delimiter ='%' >>>fmt=input('Enter rename style ( %d-date%n-seqnum %f-format): ') Enter rename style (%d-date %n-seqnum %f-format): Ashley_%n%f >>>t=BatchRename(fmt) >>>date=time.strftime( '%d%b%y') >>> fori, filename inenumerate (phot"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 96,
      "text": "rename style ( %d-date%n-seqnum %f-format): ') Enter rename style (%d-date %n-seqnum %f-format): Ashley_%n%f >>>t=BatchRename(fmt) >>>date=time.strftime( '%d%b%y') >>> fori, filename inenumerate (photofiles): ... base, ext =os.path.splitext(filename) ... newname =t.substitute(d =date, n=i, f=ext) (continues on next page) 90 Chapter 11. Brief Tour of the Standard Library — Part II"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 97,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) ... print('{0}-->{1}'.format(filename, newname)) img_1074.jpg --> Ashley_0.jpg img_1076.jpg --> Ashley_1.jpg img_1077.jpg --> Ashley_2.jpg Another application for templating is separating program logic from the details of multiple output formats. This makes it possible to substitute custom templates for XML ﬁles, plain text reports, and HTML web reports. 11.3Working with Binary Data Record Layouts Thestructmodule provides pack()andunpack() functions for working with variable length binary record formats. The following example shows how to loop through header information in a ZIP ﬁle without using thezipfile module. Pack codes \"H\"and\"I\"represent two and four byte unsigned numbers respectively. The\"<\"indicates that they are standard size and in little-endian byte order: import struct withopen('myfile.zip ','rb')asf: data=f.read() start=0 foriinrange(3): # show the first 3 file headers start+=14 fields=struct.unpack('<IIIHH', data[start:start +16]) crc32, comp_size, uncomp_size, filenamesize, extra_size =fields start+=16 filename =data[start:start +filenamesize] start+=filenamesize extra=data[start:start +extra_size] print("
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 97,
      "text": "ata[start:start +16]) crc32, comp_size, uncomp_size, filenamesize, extra_size =fields start+=16 filename =data[start:start +filenamesize] start+=filenamesize extra=data[start:start +extra_size] print(filename, hex(crc32), comp_size, uncomp_size) start+=extra_size +comp_size # skip to the next header 11.4Multi-threading Threading is a technique for decoupling tasks which are not sequentially dependent. Threads can be used to improve the responsiveness of applications that accept user input while other tasks run in the background. A related use case is running I/O in parallel with computations in another thread. The following code shows how the high level threading module can run tasks in background while the main program continues to run: import threading ,zipfile class AsyncZip (threading .Thread): def__init__ (self, infile, outfile): threading .Thread.__init__ (self) self.infile=infile self.outfile =outfile (continues on next page) 11.3. Working with Binary Data Record Layouts 91"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 98,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) defrun(self): f=zipfile.ZipFile( self.outfile, 'w', zipfile .ZIP_DEFLATED) f.write(self.infile) f.close() print('Finished background zip of: ',self.infile) background =AsyncZip( 'mydata.txt ','myarchive.zip ') background .start() print('The main program continues to run in foreground. ') background .join() # Wait for the background task to finish print('Main program waited until background was done. ') The principal challenge of multi-threaded applications is coordinating threads that share data or other resources. To that end, the threading module provides a number of synchronization primitives including locks, events, condition variables, and semaphores. While those tools are powerful, minor design errors can result in problems that are diﬃcult to reproduce. So, the preferred approach to task coordination is to concentrate all access to a resource in a single thread and then use the queuemodule to feed that thread with requests from other threads. Applications using Queueobjects for inter-thread communication and coordination are easier to design, more readable, and more reliable. 11.5Logging Thelogging module oﬀers a "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 98,
      "text": "uests from other threads. Applications using Queueobjects for inter-thread communication and coordination are easier to design, more readable, and more reliable. 11.5Logging Thelogging module oﬀers a full featured and ﬂexible logging system. At its simplest, log messages are sent to a ﬁle or to sys.stderr : import logging logging.debug('Debugging information ') logging.info('Informational message ') logging.warning( 'Warning:config file %snot found ','server.conf ') logging.error('Error occurred ') logging.critical( 'Critical error -- shutting down ') This produces the following output: WARNING:root:Warning:config file server.conf not found ERROR:root:Error occurred CRITICAL:root:Critical error -- shutting down By default, informational and debugging messages are suppressed and the output is sent to standard er- ror. Other output options include routing messages through email, datagrams, sockets, or to an HTTP Server. New ﬁlters can select diﬀerent routing based on message priority: DEBUG,INFO,WARNING,ERROR, and CRITICAL . TheloggingsystemcanbeconﬁgureddirectlyfromPythonorcanbeloadedfromausereditableconﬁguration ﬁle for customized logging without altering the application. 92 Chapte"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 98,
      "text": "BUG,INFO,WARNING,ERROR, and CRITICAL . TheloggingsystemcanbeconﬁgureddirectlyfromPythonorcanbeloadedfromausereditableconﬁguration ﬁle for customized logging without altering the application. 92 Chapter 11. Brief Tour of the Standard Library — Part II"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 99,
      "text": "Python Tutorial, Release 3.7.0 11.6Weak References Python does automatic memory management (reference counting for most objects and garbage col lection to eliminate cycles). The memory is freed shortly after the last reference to it has been eliminated. This approach works ﬁne for most applications but occasionally there is a need to track objects only as long as they are being used by something else. Unfortunately, just tracking them creates a reference that makes them permanent. The weakref module provides tools for tracking objects without creating a reference. When the object is no longer needed, it is automatically removed from a weakref table and a callback is triggered for weakref objects. Typical applications include caching objects that are expensive to create: >>> import weakref, gc >>> class A: ... def__init__ (self, value): ... self.value=value ... def__repr__ (self): ... returnstr(self.value) ... >>>a=A(10) # create a reference >>>d=weakref.WeakValueDictionary() >>>d['primary']=a # does not create a reference >>>d['primary'] # fetch the object if it is still alive 10 >>> dela # remove the one reference >>>gc.collect() # run garbage collection right away 0 >>>d['primary"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 99,
      "text": "ary']=a # does not create a reference >>>d['primary'] # fetch the object if it is still alive 10 >>> dela # remove the one reference >>>gc.collect() # run garbage collection right away 0 >>>d['primary'] # entry was automatically removed Traceback (most recent call last): File\"<stdin>\" , line1, in <module> d['primary'] # entry was automatically removed File\"C:/python37/lib/weakref.py\" , line46, in __getitem__ o=self.data[key]() KeyError : 'primary' 11.7Tools for Working with Lists Many data structure needs can be met with the built-in list type. However, sometimes there is a need for alternative implementations with diﬀerent performance trade-oﬀs. Thearraymodule providesan array() object that is likea list that stores only homogeneous data and stores it more compactly. The following example shows an array of numbers stored as two byte unsigned binary numbers (typecode \"H\") rather than the usual 16 bytes per entry for regular lists of Python int objects: >>> from array importarray >>>a=array('H', [4000,10,700,22222]) >>>sum(a) 26932 >>>a[1:3] array('H', [10, 700]) Thecollections module provides a deque() object that is like a list with faster appends and pops from the left side but s"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 99,
      "text": "rray('H', [4000,10,700,22222]) >>>sum(a) 26932 >>>a[1:3] array('H', [10, 700]) Thecollections module provides a deque() object that is like a list with faster appends and pops from the left side but slower lookups in the middle. These objects are well suited for implementing queues and breadth ﬁrst tree searches: 11.6. Weak References 93"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 100,
      "text": "Python Tutorial, Release 3.7.0 >>> from collections importdeque >>>d=deque([\"task1\",\"task2\",\"task3\"]) >>>d.append(\"task4\") >>>print(\"Handling \", d.popleft()) Handling task1 unsearched =deque([starting_node]) defbreadth_first_search (unsearched): node=unsearched .popleft() formingen_moves(node): ifis_goal(m): returnm unsearched .append(m) In addition to alternative list implementations, the library also oﬀers other tools such as the bisectmodule with functions for manipulating sorted lists: >>> import bisect >>>scores=[(100,'perl'), (200,'tcl'), (400,'lua'), (500,'python')] >>>bisect.insort(scores, ( 300,'ruby')) >>>scores [(100, 'perl'), (200, 'tcl'), (300, 'ruby'), (400, 'lua'), (500, 'python')] Theheapqmodule provides functions for implementing heaps based on regular lists. The lowest valued entry is always kept at position zero. This is useful for applications which repeatedly access the smallest element but do not want to run a full list sort: >>> from heapq importheapify, heappop, heappush >>>data=[1,3,5,7,9,2,4,6,8,0] >>>heapify(data) # rearrange the list into heap order >>>heappush(data, -5) # add a new entry >>>[heappop(data) foriinrange(3)]# fetch the three smallest entrie"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 100,
      "text": " heappush >>>data=[1,3,5,7,9,2,4,6,8,0] >>>heapify(data) # rearrange the list into heap order >>>heappush(data, -5) # add a new entry >>>[heappop(data) foriinrange(3)]# fetch the three smallest entries [-5, 0, 1] 11.8Decimal Floating Point Arithmetic Thedecimal module oﬀers a Decimal datatype for decimal ﬂoating point arithmetic. Compared to the built-infloatimplementation of binary ﬂoating point, the class is especially helpful for •ﬁnancial applications and other uses which require exact decimal representation, •control over precision, •control over rounding to meet legal or regulatory requirements, •tracking of signiﬁcant decimal places, or •applications where the user expects the results to match calculations done by hand. For example, calculating a 5% tax on a 70 cent phone charge gives diﬀerent results in decimal ﬂoating point and binary ﬂoating point. The diﬀerence becomes signiﬁcant if the results are rounded to the nearest cent: >>> from decimal import* >>>round(Decimal( '0.70')*Decimal( '1.05'),2) Decimal('0.74') >>>round(.70*1.05,2) 0.73 94 Chapter 11. Brief Tour of the Standard Library — Part II"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 101,
      "text": "Python Tutorial, Release 3.7.0 TheDecimal result keeps a trailing zero, automatically inferring four place signiﬁcance from multiplicands with two place signiﬁcance. Decimal reproduces mathematics as done by hand and avoids issues that can arise when binary ﬂoating point cannot exactly represent decimal quantities. Exact representation enables the Decimal class to perform modulo calculations and equality tests that are unsuitable for binary ﬂoating point: >>>Decimal( '1.00')%Decimal( '.10') Decimal('0.00') >>>1.00%0.10 0.09999999999999995 >>>sum([Decimal( '0.1')]*10)==Decimal( '1.0') True >>>sum([0.1]*10)==1.0 False Thedecimal module provides arithmetic with as much precision as needed: >>>getcontext() .prec=36 >>>Decimal( 1)/Decimal( 7) Decimal('0.142857142857142857142857142857142857') 11.8. Decimal Floating Point Arithmetic 95"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 102,
      "text": "Python Tutorial, Release 3.7.0 96 Chapter 11. Brief Tour of the Standard Library — Part II"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 103,
      "text": "CHAPTER TWELVE VIRTUAL ENVIRONMENTS AND PACKAGES 12.1Introduction Python applications will often use packages and modules that don’t come as part of the standard library. Applications will sometimes need a speciﬁc version of a library, because the application may require that a particular bug has been ﬁxed or the application may be written using an obsolete version of the library’s interface. This means it may not be possible for one Python installation to meet the requirements of every application. If application A needs version 1.0 of a particular module but application B needs version 2.0, then the requirements are in conﬂict and installing either version 1.0 or 2.0 will leave one application unable to run. The solution for this problem is to create a virtual environment , a self-contained directory tree that contains a Python installation for a particular version of Python, plus a number of additional packages. Diﬀerentapplicationscanthenusediﬀerentvirtualenvironments. Toresolvetheearlierexampleofconﬂicting requirements, application A can have its own virtual environment with version 1.0 installed while application B has another virtual environment with version 2.0. If applicat"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 103,
      "text": "earlierexampleofconﬂicting requirements, application A can have its own virtual environment with version 1.0 installed while application B has another virtual environment with version 2.0. If application B requires a library be upgraded to version 3.0, this will not aﬀect application A’s environment. 12.2Creating Virtual Environments The module used to create and manage virtual environments is called venv.venvwill usually install the most recent version of Python that you have available. If you have multiple versions of Python on your system, you can select a speciﬁc Python version by running python3 or whichever version you want. To create a virtual environment, decide upon a directory where you want to place it, and run the venv module as a script with the directory path: python3 -m venv tutorial -env This will create the tutorial-env directory if it doesn’t exist, and also create directories inside it containing a copy of the Python interpreter, the standard library, and various supporting ﬁles. Once you’ve created a virtual environment, you may activate it. On Windows, run: tutorial -env\\Scripts\\activate .bat On Unix or MacOS, run: source tutorial -env/bin/activate 97"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 104,
      "text": "Python Tutorial, Release 3.7.0 (This script is written for the bash shell. If you use the cshor fishshells, there are alternate activate.csh andactivate.fish scripts you should use instead.) Activating the virtual environment will change your shell’s prompt to show what virtual environment you’re using, and modify the environment so that running pythonwill get you that particular version and instal- lation of Python. For example: $source~/envs/tutorial-env/bin/activate (tutorial-env )$ python Python3.5.1(default, May 62016,10:59:36) ... >>> import sys >>> sys.path ['','/usr/local/lib/python35.zip' , ..., '~/envs/tutorial-env/lib/python3.5/site-packages' ] >>> 12.3Managing Packages with pip You can install, upgrade, and remove packages using a program called pip. By default pipwill install packages from the Python Package Index, < https://pypi.org >. You can browse the Python Package Index by going to it in your web browser, or you can use pip’s limited search feature: (tutorial-env )$ pip search astronomy skyfield - Elegant astronomy forPython gary - Galactic astronomy and gravitational dynamics. novas - The United States Naval Observatory NOVAS astronomy library astroobs - Provide"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 104,
      "text": "pip search astronomy skyfield - Elegant astronomy forPython gary - Galactic astronomy and gravitational dynamics. novas - The United States Naval Observatory NOVAS astronomy library astroobs - Provides astronomy ephemeris to plan telescope observations PyAstronomy - A collection of astronomy related tools forPython. ... piphas a number of subcommands: “search”, “install”, “uninstall”, “freeze”, etc. (Consult the installing- index guide for complete documentation for pip.) You can install the latest version of a package by specifying a package’s name: (tutorial-env )$ pip install novas Collecting novas Downloading novas-3.1.1.3.tar.gz (136kB) Installing collected packages: novas Running setup.py install fornovas Successfully installed novas-3.1.1.3 You can also install a speciﬁc version of a package by giving the package name followed by ==and the version number: (tutorial-env )$ pip install requests ==2.6.0 Collecting requests ==2.6.0 Using cached requests-2.6.0-py2.py3-none-any.whl Installing collected packages: requests Successfully installed requests-2.6.0 If you re-run this command, pipwill notice that the requested version is already installed and do nothing. You can supply a "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 104,
      "text": "stalling collected packages: requests Successfully installed requests-2.6.0 If you re-run this command, pipwill notice that the requested version is already installed and do nothing. You can supply a diﬀerent version number to get that version, or you can run pip install --upgrade to upgrade the package to the latest version: 98 Chapter 12. Virtual Environments and Packages"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 105,
      "text": "Python Tutorial, Release 3.7.0 (tutorial-env )$ pip install --upgrade requests Collecting requests Installing collected packages: requests Found existing installation: requests 2.6.0 Uninstalling requests-2.6.0: Successfully uninstalled requests-2.6.0 Successfully installed requests-2.7.0 pip uninstall followed by one or more package names will remove the packages from the virtual environ- ment. pip show will display information about a particular package: (tutorial-env )$ pip show requests --- Metadata-Version: 2.0 Name: requests Version: 2.7.0 Summary: Python HTTP forHumans. Home-page: http://python-requests.org Author: Kenneth Reitz Author-email: me@kennethreitz.com License: Apache 2.0 Location: /Users/akuchling/envs/tutorial-env/lib/python3.4/site-packages Requires: pip list will display all of the packages installed in the virtual environment: (tutorial-env )$ pip list novas(3.1.1.3) numpy(1.9.2) pip(7.0.3) requests (2.7.0) setuptools (16.0) pip freeze will produce a similar list of the installed packages, but the output uses the format that pip install expects. A common convention is to put this list in a requirements.txt ﬁle: (tutorial-env )$ pip freeze > requirements.txt (t"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 105,
      "text": "of the installed packages, but the output uses the format that pip install expects. A common convention is to put this list in a requirements.txt ﬁle: (tutorial-env )$ pip freeze > requirements.txt (tutorial-env )$ cat requirements.txt novas==3.1.1.3 numpy==1.9.2 requests ==2.7.0 Therequirements.txt can then be committed to version control and shipped as part of an application. Users can then install all the necessary packages with install -r : (tutorial-env )$ pip install -r requirements.txt Collecting novas==3.1.1.3(from -r requirements.txt (line1)) ... Collecting numpy==1.9.2(from -r requirements.txt (line2)) ... Collecting requests ==2.7.0(from -r requirements.txt (line3)) ... Installing collected packages: novas, numpy, requests Running setup.py install fornovas Successfully installed novas-3.1.1.3 numpy-1.9.2 requests-2.7.0 12.3. Managing Packages with pip 99"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 106,
      "text": "Python Tutorial, Release 3.7.0 piphas many more options. Consult the installing-index guide for complete documentation for pip. When you’vewrittenapackageandwanttomakeitavailableonthePythonPackageIndex,consultthedistributing- index guide. 100 Chapter 12. Virtual Environments and Packages"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 107,
      "text": "CHAPTER THIRTEEN WHAT NOW? Reading this tutorial has probably reinforced your interest in using Python — you should be eager to apply Python to solving your real-world problems. Where should you go to learn more? This tutorial is part of Python’s documentation set. Some other documents in the set are: •library-index: You should browse through this manual, which gives complete (though terse) reference material about types, functions, and the modules in the standard library. The standard Python distribution includes alotof additional code. There are modules to read Unix mailboxes, retrieve documents via HTTP, generaterandomnumbers, parsecommand-lineoptions, writeCGIprograms, compressdata, andmany other tasks. Skimming through the Library Reference will give you an idea of what’s available. •installing-index explains how to install additional modules written by other Python users. •reference-index: A detailed explanation of Python’s syntax and semantics. It’s heavy reading, but is useful as a complete guide to the language itself. More Python resources: •https://www.python.org : The major Python Web site. It contains code, documentation, and pointers to Python-related pages around the"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 107,
      "text": "as a complete guide to the language itself. More Python resources: •https://www.python.org : The major Python Web site. It contains code, documentation, and pointers to Python-related pages around the Web. This Web site is mirrored in various places around the world, such as Europe, Japan, and Australia; a mirror may be faster than the main site, depending on your geographical location. •https://docs.python.org : Fast access to Python’s documentation. •https://pypi.org : The Python Package Index, previously also nicknamed the Cheese Shop, is an index of user-created Python modules that are available for download. Once you begin releasing code, you can register it here so that others can ﬁnd it. •https://code.activestate.com/recipes/langs/python/ : The Python Cookbook is a sizable collection of code examples, larger modules, and useful scripts. Particularly notable contributions are collected in a book also titled Python Cookbook (O’Reilly & Associates, ISBN 0-596-00797-3.) •http://www.pyvideo.org collects links to Python-related videos from conferences and user-group meet- ings. •https://scipy.org : The Scientiﬁc Python project includes modules for fast array computations and manip"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 107,
      "text": "pyvideo.org collects links to Python-related videos from conferences and user-group meet- ings. •https://scipy.org : The Scientiﬁc Python project includes modules for fast array computations and manipulations plus a host of packages for such things as linear algebra, Fourier transforms, non-linear solvers, random number distributions, statistical analysis and the like. For Python-related questions and problem reports, you can post to the newsgroup comp.lang.python , or send them to the mailing list at python-list@python.org . The newsgroup and mailing list are gatewayed, so messages posted to one will automatically be forwarded to the other. There are hundreds of postings a day, asking (and answering) questions, suggesting new features, and announcing new modules. Mailing list archives are available at https://mail.python.org/pipermail/ . 101"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 108,
      "text": "Python Tutorial, Release 3.7.0 Before posting, be sure to check the list of Frequently Asked Questions (also called the FAQ). The FAQ answers many of the questions that come up again and again, and may already contain the solution for your problem. 102 Chapter 13. What Now?"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 109,
      "text": "CHAPTER FOURTEEN INTERACTIVE INPUT EDITING AND HISTORY SUBSTITUTION Some versions of the Python interpreter support editing of the current input line and history substitution, similar to facilities found in the Korn shell and the GNU Bash shell. This is implemented using the GNU Readline library, which supports various styles of editing. This library has its own documentation which we won’t duplicate here. 14.1Tab Completion and History Editing Completion of variable and module names is automatically enabled at interpreter startup so that the Tab key invokes the completion function; it looks at Python statement names, the current local variables, and the available module names. For dotted expressions such as string.a , it will evaluate the expression up to the ﬁnal '.'and then suggest completions from the attributes of the resulting object. Note that this may execute application-deﬁned code if an object with a __getattr__() method is part of the expression. The default conﬁguration also saves your history into a ﬁle named .python_history in your user directory. The history will be available again during the next interactive interpreter session. 14.2Alternatives to the Interactive I"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 109,
      "text": "o saves your history into a ﬁle named .python_history in your user directory. The history will be available again during the next interactive interpreter session. 14.2Alternatives to the Interactive Interpreter This facility is an enormous step forward compared to earlier versions of the interpreter; however, some wishes are left: It would be nice if the proper indentation were suggested on continuation lines (the parser knows if an indent token is required next). The completion mechanism might use the interpreter’s symbol table. A command to check (or even suggest) matching parentheses, quotes, etc., would also be useful. One alternative enhanced interactive interpreter that has been around for quite some time is IPython, which features tab completion, object exploration and advanced history management. It can also be thoroughly customized and embedded into other applications. Another similar enhanced interactive environment is bpython. 103"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 110,
      "text": "Python Tutorial, Release 3.7.0 104 Chapter 14. Interactive Input Editing and History Substitution"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 111,
      "text": "CHAPTER FIFTEEN FLOATING POINT ARITHMETIC: ISSUES AND LIMITATIONS Floating-point numbers are represented in computer hardware as base 2 (binary) fractions. For example, the decimal fraction 0.125 has value 1/10 + 2/100 + 5/1000, and in the same way the binary fraction 0.001 has value 0/2 + 0/4 + 1/8. These two fractions have identical values, the only real diﬀerence being that the ﬁrst is written in base 10 fractional notation, and the second in base 2. Unfortunately, most decimal fractions cannot be represented exactly as binary fractions. A consequence is that, in general, the decimal ﬂoating-point numbers you enter are only approximated by the binary ﬂoating- point numbers actually stored in the machine. The problem is easier to understand at ﬁrst in base 10. Consider the fraction 1/3. You can approximate that as a base 10 fraction: 0.3 or, better, 0.33 or, better, 0.333 and so on. No matter how many digits you’re willing to write down, the result will never be exactly 1/3, but will be an increasingly better approximation of 1/3. In the same way, no matter how many base 2 digits you’re willing to use, the decimal value 0.1 cannot be represented exactly as a base 2 fraction. In b"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 111,
      "text": " be an increasingly better approximation of 1/3. In the same way, no matter how many base 2 digits you’re willing to use, the decimal value 0.1 cannot be represented exactly as a base 2 fraction. In base 2, 1/10 is the inﬁnitely repeating fraction 0.0001100110011001100110011001100110011001100110011 ... Stop at any ﬁnite number of bits, and you get an approximation. On most machines today, ﬂoats are approximated using a binary fraction with the numerator using the ﬁrst 53 bits starting with the most signiﬁcant bit and with the denominator as a power of two. In the case of 1/10, the binary fraction is 3602879701896397 / 2 ** 55 which is close to but not exactly equal to the true value of 1/10. Many users are not aware of the approximation because of the way values are displayed. Python only prints a decimal approximation to the true decimal value of the binary approximation stored by the machine. On most machines, if Python were to print the true decimal value of the binary approximation stored for 0.1, it would have to display 105"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 112,
      "text": "Python Tutorial, Release 3.7.0 >>>0.1 0.1000000000000000055511151231257827021181583404541015625 That is more digits than most people ﬁnd useful, so Python keeps the number of digits manageable by displaying a rounded value instead >>>1/10 0.1 Just remember, even though the printed result looks like the exact value of 1/10, the actual stored value is the nearest representable binary fraction. Interestingly, there are many diﬀerent decimal numbers that share the same nearest ap- proximate binary fraction. For example, the numbers 0.1and0.10000000000000001 and 0.1000000000000000055511151231257827021181583404541015625 are all approximated by 3602879701896397 / 2 ** 55 . Since all of these decimal values share the same approximation, any one of them could be displayed while still preserving the invariant eval(repr(x)) == x . Historically, the Python prompt and built-in repr()function would choose the one with 17 signiﬁcant digits,0.10000000000000001 . Starting with Python 3.1, Python (on most systems) is now able to choose the shortest of these and simply display 0.1. Note that this is in the very nature of binary ﬂoating-point: this is not a bug in Python, and it is not a bug in your c"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 112,
      "text": "st systems) is now able to choose the shortest of these and simply display 0.1. Note that this is in the very nature of binary ﬂoating-point: this is not a bug in Python, and it is not a bug in your code either. You’ll see the same kind of thing in all languages that support your hardware’s ﬂoating-point arithmetic (although some languages may not displaythe diﬀerence by default, or in all output modes). For more pleasant output, you may wish to use string formatting to produce a limited number of signiﬁcant digits: >>>format(math.pi,'.12g')# give 12 significant digits '3.14159265359' >>>format(math.pi,'.2f')# give 2 digits after the point '3.14' >>>repr(math.pi) '3.141592653589793' It’s important to realize that this is, in a real sense, an illusion: you’re simply rounding the displayof the true machine value. One illusion may beget another. For example, since 0.1 is not exactly 1/10, summing three values of 0.1 may not yield exactly 0.3, either: >>>.1+.1+.1==.3 False Also, since the 0.1 cannot get any closer to the exact value of 1/10 and 0.3 cannot get any closer to the exact value of 3/10, then pre-rounding with round() function cannot help: >>>round(.1,1)+round(.1,1)+round(.1,"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 112,
      "text": "0.1 cannot get any closer to the exact value of 1/10 and 0.3 cannot get any closer to the exact value of 3/10, then pre-rounding with round() function cannot help: >>>round(.1,1)+round(.1,1)+round(.1,1)==round(.3,1) False Though the numbers cannot be made closer to their intended exact values, the round() function can be useful for post-rounding so that results with inexact values become comparable to one another: >>>round(.1+.1+.1,10)==round(.3,10) True 106 Chapter 15. Floating Point Arithmetic: Issues and Limitations"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 113,
      "text": "Python Tutorial, Release 3.7.0 Binary ﬂoating-point arithmetic holds many surprises like this. The problem with “0.1” is explained in precise detail below, in the “Representation Error” section. See The Perils of Floating Point for a more complete account of other common surprises. As that says near the end, “there are no easy answers.” Still, don’t be unduly wary of ﬂoating-point! The errors in Python ﬂoat operations are inherited from the ﬂoating-point hardware, and on most machines are on the order of no more than 1 part in 2**53 per operation. That’s more than adequate for most tasks, but you do need to keep in mind that it’s not decimal arithmetic and that every ﬂoat operation can suﬀer a new rounding error. While pathological cases do exist, for most casual use of ﬂoating-point arithmetic you’ll see the result you expect in the end if you simply round the display of your ﬁnal results to the number of decimal digits you expect.str()usually suﬃces, and for ﬁner control see the str.format() method’s format speciﬁers in formatstrings. For use cases which require exact decimal representation, try using the decimal module which implements decimal arithmetic suitable for accounting "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 113,
      "text": "format() method’s format speciﬁers in formatstrings. For use cases which require exact decimal representation, try using the decimal module which implements decimal arithmetic suitable for accounting applications and high-precision applications. Another form of exact arithmetic is supported by the fractions module which implements arithmetic based on rational numbers (so the numbers like 1/3 can be represented exactly). If you are a heavy user of ﬂoating point operations you should take a look at the Numerical Python package and many other packages for mathematical and statistical operations supplied by the SciPy project. See <https://scipy.org >. Python provides tools that may help on those rare occasions when you really dowant to know the exact value of a ﬂoat. The float.as_integer_ratio() method expresses the value of a ﬂoat as a fraction: >>>x=3.14159 >>>x.as_integer_ratio() (3537115888337719, 1125899906842624) Since the ratio is exact, it can be used to losslessly recreate the original value: >>>x==3537115888337719 /1125899906842624 True Thefloat.hex() method expresses a ﬂoat in hexadecimal (base 16), again giving the exact value stored by your computer: >>>x.hex() '0x1.921f9f"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 113,
      "text": "ginal value: >>>x==3537115888337719 /1125899906842624 True Thefloat.hex() method expresses a ﬂoat in hexadecimal (base 16), again giving the exact value stored by your computer: >>>x.hex() '0x1.921f9f01b866ep+1' This precise hexadecimal representation can be used to reconstruct the ﬂoat value exactly: >>>x==float.fromhex( '0x1.921f9f01b866ep+1 ') True Since the representation is exact, it is useful for reliably porting values across diﬀerent versions of Python (platform independence) and exchanging data with other languages that support the same format (such as Java and C99). Another helpful tool is the math.fsum() function which helps mitigate loss-of-precision during summation. It tracks “lost digits” as values are added onto a running total. That can make a diﬀerence in overall accuracy so that the errors do not accumulate to the point where they aﬀect the ﬁnal total: >>>sum([0.1]*10)==1.0 False >>>math.fsum([0.1]*10)==1.0 True 107"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 114,
      "text": "Python Tutorial, Release 3.7.0 15.1Representation Error This section explains the “0.1” example in detail, and shows how you can perform an exact analysis of cases like this yourself. Basic familiarity with binary ﬂoating-point representation is assumed. Representation error refers to the fact that some (most, actually) decimal fractions cannot be represented exactly as binary (base 2) fractions. This is the chief reason why Python (or Perl, C, C++, Java, Fortran, and many others) often won’t display the exact decimal number you expect. Why is that? 1/10 is not exactly representable as a binary fraction. Almost all machines today (November 2000) use IEEE-754 ﬂoating point arithmetic, and almost all platforms map Python ﬂoats to IEEE-754 “double precision”. 754 doubles contain 53 bits of precision, so on input the computer strives to convert 0.1 to the closest fraction it can of the form J/2** Nwhere Jis an integer containing exactly 53 bits. Rewriting 1/10~=J/(2**N) as J~=2**N/10 and recalling that Jhas exactly 53 bits (is >= 2**52 but< 2**53), the best value for Nis 56: >>>2**52<=2**56//10<2**53 True That is, 56 is the only value for Nthat leaves Jwith exactly 53 bits. The best po"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 114,
      "text": "ecalling that Jhas exactly 53 bits (is >= 2**52 but< 2**53), the best value for Nis 56: >>>2**52<=2**56//10<2**53 True That is, 56 is the only value for Nthat leaves Jwith exactly 53 bits. The best possible value for Jis then that quotient rounded: >>>q, r=divmod(2**56,10) >>>r 6 Since the remainder is more than half of 10, the best approximation is obtained by rounding up: >>>q+1 7205759403792794 Therefore the best possible approximation to 1/10 in 754 double precision is: 7205759403792794 /2**56 Dividing both the numerator and denominator by two reduces the fraction to: 3602879701896397 /2**55 Note that since we rounded up, this is actually a little bit larger than 1/10; if we had not rounded up, the quotient would have been a little bit smaller than 1/10. But in no case can it be exactly1/10! So the computer never “sees” 1/10: what it sees is the exact fraction given above, the best 754 double approximation it can get: >>>0.1*2**55 3602879701896397.0 If we multiply that fraction by 10**55, we can see the value out to 55 decimal digits: >>>3602879701896397 *10**55//2**55 1000000000000000055511151231257827021181583404541015625 108 Chapter 15. Floating Point Arithmetic: Issues and "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 114,
      "text": "10**55, we can see the value out to 55 decimal digits: >>>3602879701896397 *10**55//2**55 1000000000000000055511151231257827021181583404541015625 108 Chapter 15. Floating Point Arithmetic: Issues and Limitations"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 115,
      "text": "Python Tutorial, Release 3.7.0 meaning that the exact number stored in the computer is equal to the decimal value 0.1000000000000000055511151231257827021181583404541015625. Instead of displaying the full decimal value, many languages (including older versions of Python), round the result to 17 signiﬁcant digits: >>>format(0.1,'.17f') '0.10000000000000001' Thefractions anddecimal modules make these calculations easy: >>> from decimal importDecimal >>> from fractions importFraction >>>Fraction .from_float( 0.1) Fraction(3602879701896397, 36028797018963968) >>>(0.1).as_integer_ratio() (3602879701896397, 36028797018963968) >>>Decimal.from_float( 0.1) Decimal('0.1000000000000000055511151231257827021181583404541015625') >>>format(Decimal .from_float( 0.1),'.17') '0.10000000000000001' 15.1. Representation Error 109"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 116,
      "text": "Python Tutorial, Release 3.7.0 110 Chapter 15. Floating Point Arithmetic: Issues and Limitations"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 117,
      "text": "CHAPTER SIXTEEN APPENDIX 16.1Interactive Mode 16.1.1Error Handling When an error occurs, the interpreter prints an error message and a stack trace. In interactive mode, it then returns to the primary prompt; when input came from a ﬁle, it exits with a nonzero exit status after printing the stack trace. (Exceptions handled by an exceptclause in a trystatement are not errors in this context.) Some errors are unconditionally fatal and cause an exit with a nonzero exit; this applies to internal inconsistencies and some cases of running out of memory. All error messages are written to the standard error stream; normal output from executed commands is written to standard output. Typing the interrupt character (usually Control-C orDelete) to the primary or secondary prompt cancels the input and returns to the primary prompt.1Typing an interrupt while a command is executing raises theKeyboardInterrupt exception, which may be handled by a trystatement. 16.1.2Executable Python Scripts On BSD’ish Unix systems, Python scripts can be made directly executable, like shell scripts, by putting the line #!/usr/bin/env python3.5 (assuming that the interpreter is on the user’s PATH) at the beginning o"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 117,
      "text": " Unix systems, Python scripts can be made directly executable, like shell scripts, by putting the line #!/usr/bin/env python3.5 (assuming that the interpreter is on the user’s PATH) at the beginning of the script and giving the ﬁle an executable mode. The #!must be the ﬁrst two characters of the ﬁle. On some platforms, this ﬁrst line must end with a Unix-style line ending ( '\\n'), not a Windows ( '\\r\\n') line ending. Note that the hash, or pound, character, '#', is used to start a comment in Python. The script can be given an executable mode, or permission, using the chmodcommand. $chmod +x myscript.py On Windows systems, there is no notion of an “executable mode”. The Python installer automatically associates .pyﬁles with python.exe so that a double-click on a Python ﬁle will run it as a script. The extension can also be .pyw, in that case, the console window that normally appears is suppressed. 16.1.3The Interactive Startup File When you use Python interactively, it is frequently handy to have some standard commands executed every time the interpreter is started. You can do this by setting an environment variable named PYTHONSTARTUP 1A problem with the GNU Readline package may pr"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 117,
      "text": "dy to have some standard commands executed every time the interpreter is started. You can do this by setting an environment variable named PYTHONSTARTUP 1A problem with the GNU Readline package may prevent this. 111"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 118,
      "text": "Python Tutorial, Release 3.7.0 to the name of a ﬁle containing your start-up commands. This is similar to the .profile feature of the Unix shells. This ﬁle is only read in interactive sessions, not when Python reads commands from a script, and not when /dev/tty is given as the explicit source of commands (which otherwise behaves like an interactive session). It is executed in the same namespace where interactive commands are executed, so that objects that it deﬁnes or imports can be used without qualiﬁcation in the interactive session. You can also change the prompts sys.ps1 andsys.ps2 in this ﬁle. If you want to read an additional start-up ﬁle from the current directory, you can program this in the global start-up ﬁle using code like if os.path.isfile('.pythonrc.py'): exec(open('.pythonrc.py'). read()). If you want to use the startup ﬁle in a script, you must do this explicitly in the script: import os filename =os.environ.get('PYTHONSTARTUP ') iffilename andos.path.isfile(filename): withopen(filename) asfobj: startup_file =fobj.read() exec(startup_file) 16.1.4The Customization Modules Python provides two hooks to let you customize it: sitecustomize andusercustomize . To see how i"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 118,
      "text": "withopen(filename) asfobj: startup_file =fobj.read() exec(startup_file) 16.1.4The Customization Modules Python provides two hooks to let you customize it: sitecustomize andusercustomize . To see how it works, you need ﬁrst to ﬁnd the location of your user site-packages directory. Start Python and run this code: >>> import site >>>site.getusersitepackages() '/home/user/.local/lib/python3.5/site-packages' Now you can create a ﬁle named usercustomize.py in that directory and put anything you want in it. It will aﬀect every invocation of Python, unless it is started with the -soption to disable the automatic import. sitecustomize works in the same way, but is typically created by an administrator of the computer in the global site-packages directory, and is imported before usercustomize . See the documentation of the site module for more details. 112 Chapter 16. Appendix"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 119,
      "text": "APPENDIX A GLOSSARY >>>The default Python prompt of the interactive shell. Often seen for code examples which can be executed interactively in the interpreter. ...The default Python prompt of the interactive shell when entering code for an indented code block, when within a pair of matching left and right delimiters (parentheses, square brackets, curly braces or triple quotes), or after specifying a decorator. 2to3A tool that tries to convert Python 2.x code to Python 3.x code by handling most of the incompati- bilities which can be detected by parsing the source and traversing the parse tree. 2to3 is available in the standard library as lib2to3; a standalone entry point is provided as Tools/ scripts/2to3 . See 2to3-reference. abstract base class Abstract base classes complement duck-typing by providing a way to deﬁne interfaces when other techniques like hasattr() would be clumsy or subtly wrong (for example with magic methods). ABCs introduce virtual subclasses, which are classes that don’t inherit from a class but are still recognized by isinstance() andissubclass() ; see theabcmodule documentation. Python comes with many built-in ABCs for data structures (in the collections.abc"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 119,
      "text": "t don’t inherit from a class but are still recognized by isinstance() andissubclass() ; see theabcmodule documentation. Python comes with many built-in ABCs for data structures (in the collections.abc module), numbers (in thenumbers module), streams (in the iomodule), import ﬁnders and loaders (in the importlib.abc module). You can create your own ABCs with the abcmodule. annotation A label associated with a variable, a class attribute or a function parameter or return value, used by convention as a type hint . Annotations of local variables cannot be accessed at runtime, but annotations of global variables, class attributes, and functions are stored in the __annotations__ special attribute of modules, classes, and functions, respectively. See variable annotation ,function annotation ,PEP 484 and PEP 526 , which describe this function- ality. argument A value passed to a function (or method) when calling the function. There are two kinds of argument: • keyword argument : an argument preceded by an identiﬁer (e.g. name=) in a function call or passed as a value in a dictionary preceded by **. For example, 3and5are both keyword arguments in the following calls to complex() : complex(r"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 119,
      "text": "eceded by an identiﬁer (e.g. name=) in a function call or passed as a value in a dictionary preceded by **. For example, 3and5are both keyword arguments in the following calls to complex() : complex(real=3, imag=5) complex(**{'real':3,'imag':5}) • positional argument : an argument that is not a keyword argument. Positional arguments can appear at the beginning of an argument list and/or be passed as elements of an iterablepreceded by*. For example, 3and5are both positional arguments in the following calls: complex(3,5) complex(*(3,5)) 113"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 120,
      "text": "Python Tutorial, Release 3.7.0 Arguments are assigned to the named local variables in a function body. See the calls section for the rules governing this assignment. Syntactically, any expression can be used to represent an argument; the evaluated value is assigned to the local variable. See also the parameter glossary entry, the FAQ question on the diﬀerence between arguments and parameters, and PEP 362 . asynchronous context manager An object which controls the environment seen in an async with state- ment by deﬁning __aenter__() and__aexit__() methods. Introduced by PEP 492 . asynchronous generator A function which returns an asynchronous generator iterator . It looks like a coroutine function deﬁned with async def except that it contains yieldexpressions for producing a series of values usable in an async for loop. Usually refers to a asynchronous generator function, but may refer to an asynchronous generator iteratorin some contexts. In cases where the intended meaning isn’t clear, using the full terms avoids ambiguity. An asynchronous generator function may contain awaitexpressions as well as async for , andasync withstatements. asynchronous generator iterator An object creat"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 120,
      "text": ", using the full terms avoids ambiguity. An asynchronous generator function may contain awaitexpressions as well as async for , andasync withstatements. asynchronous generator iterator An object created by a asynchronous generator function. Thisisan asynchronous iterator whichwhencalledusingthe __anext__() methodreturnsanawaitable object which will execute that the body of the asynchronous generator function until the next yield expression. Eachyieldtemporarilysuspendsprocessing, rememberingthelocationexecutionstate(includinglocal variables and pending try-statements). When the asynchronous generator iterator eﬀectively resumes with another awaitable returned by __anext__() , it picks up where it left oﬀ. See PEP 492 and PEP 525. asynchronous iterable An object, that can be used in an async for statement. Must return an asyn- chronous iterator from its__aiter__() method. Introduced by PEP 492 . asynchronous iterator An object that implements the __aiter__() and__anext__() methods. __anext__ must return an awaitable object.async for resolves the awaitables returned by an asyn- chronous iterator’s __anext__() method until it raises a StopAsyncIteration exception. Introduced by PEP 49"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 120,
      "text": "ext__ must return an awaitable object.async for resolves the awaitables returned by an asyn- chronous iterator’s __anext__() method until it raises a StopAsyncIteration exception. Introduced by PEP 492 . attribute A value associated with an object which is referenced by name using dotted expressions. For example, if an object ohas an attribute ait would be referenced as o.a. awaitable An object that can be used in an awaitexpression. Can be a coroutine or an object with an __await__() method. See also PEP 492 . BDFLBenevolent Dictator For Life, a.k.a. Guido van Rossum , Python’s creator. binary ﬁle A ﬁle object able to read and write bytes-like objects . Examples of binary ﬁles are ﬁles opened in binary mode ( 'rb','wb'or'rb+'),sys.stdin.buffer ,sys.stdout.buffer , and instances of io.BytesIO andgzip.GzipFile . See also text ﬁlefor a ﬁle object able to read and write strobjects. bytes-like object An object that supports the buﬀerobjects and can export a C- contiguous buﬀer. This includes all bytes,bytearray , andarray.array objects, as well as many common memoryview ob- jects. Bytes-like objects can be used for various operations that work with binary data; these include compressio"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 120,
      "text": "es all bytes,bytearray , andarray.array objects, as well as many common memoryview ob- jects. Bytes-like objects can be used for various operations that work with binary data; these include compression, saving to a binary ﬁle, and sending over a socket. Some operations need the binary data to be mutable. The documentation often refers to these as “read- write bytes-like objects”. Example mutable buﬀer objects include bytearray and amemoryview of a bytearray . Other operations require the binary data to be stored in immutable objects (“read-only bytes-like objects”); examples of these include bytesand amemoryview of abytesobject. 114 Appendix A. Glossary"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 121,
      "text": "Python Tutorial, Release 3.7.0 bytecode Python source code is compiled into bytecode, the internal representation of a Python program in the CPython interpreter. The bytecode is also cached in .pycﬁles so that executing the same ﬁle is faster the second time (recompilation from source to bytecode can be avoided). This “intermediate language” is said to run on a virtual machine that executes the machine code corresponding to each bytecode. Do note that bytecodes are not expected to work between diﬀerent Python virtual machines, nor to be stable between Python releases. A list of bytecode instructions can be found in the documentation for the dis module. classA template for creating user-deﬁned objects. Class deﬁnitions normally contain method deﬁnitions which operate on instances of the class. class variable A variable deﬁned in a class and intended to be modiﬁed only at class level (i.e., not in an instance of the class). coercion The implicit conversion of an instance of one type to another during an operation which involves two arguments of the same type. For example, int(3.15) converts the ﬂoating point number to the integer3, but in3+4.5, each argument is of a diﬀerent type (on"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 121,
      "text": "nother during an operation which involves two arguments of the same type. For example, int(3.15) converts the ﬂoating point number to the integer3, but in3+4.5, each argument is of a diﬀerent type (one int, one ﬂoat), and both must be converted to the same type before they can be added or it will raise a TypeError . Without coercion, all arguments of even compatible types would have to be normalized to the same value by the programmer, e.g.,float(3)+4.5 rather than just 3+4.5. complex number An extension of the familiar real number system in which all numbers are expressed as a sum of a real part and an imaginary part. Imaginary numbers are real multiples of the imaginary unit (the square root of -1), often written iin mathematics or jin engineering. Python has built-in support for complex numbers, which are written with this latter notation; the imaginary part is written with ajsuﬃx, e.g., 3+1j. To get access to complex equivalents of the mathmodule, use cmath. Use of complex numbers is a fairly advanced mathematical feature. If you’re not aware of a need for them, it’s almost certain you can safely ignore them. context manager An object which controls the environment seen in a wi"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 121,
      "text": "is a fairly advanced mathematical feature. If you’re not aware of a need for them, it’s almost certain you can safely ignore them. context manager An object which controls the environment seen in a withstatement by deﬁning __enter__() and__exit__() methods. See PEP 343 . contiguous A buﬀer is considered contiguous exactly if it is either C-contiguous or F ortran contiguous . Zero-dimensional buﬀers are C and Fortran contiguous. In one-dimensional arrays, the items must be laid out in memory next to each other, in order of increasing indexes starting from zero. In multidimensional C-contiguous arrays, the last index varies the fastest when visiting items in order of memory address. However, in Fortran contiguous arrays, the ﬁrst index varies the fastest. coroutine Coroutines is a more generalized form of subroutines. Subroutines are entered at one point and exited at another point. Coroutines can be entered, exited, and resumed at many diﬀerent points. They can be implemented with the async def statement. See also PEP 492 . coroutine function A function which returns a coroutine object. A coroutine function may be deﬁned with theasync def statement, and may contain await,async for ,"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 121,
      "text": "sync def statement. See also PEP 492 . coroutine function A function which returns a coroutine object. A coroutine function may be deﬁned with theasync def statement, and may contain await,async for , andasync with keywords. These were introduced by PEP 492 . CPython The canonical implementation of the Python programming language, as distributed on python.org . The term “CPython” is used when necessary to distinguish this implementation from others such as Jython or IronPython. decorator A function returning another function, usually applied as a function transformation using the @wrapper syntax. Common examples for decorators are classmethod() andstaticmethod() . The decorator syntax is merely syntactic sugar, the following two function deﬁnitions are semantically equivalent: deff(...): ... f=staticmethod (f) (continues on next page) 115"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 122,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) @staticmethod deff(...): ... The same concept exists for classes, but is less commonly used there. See the documentation for function deﬁnitions and class deﬁnitions for more about decorators. descriptor Any object which deﬁnes the methods __get__() ,__set__() , or__delete__() . When a class attribute is a descriptor, its special binding behavior is triggered upon attribute lookup. Normally, using a.bto get, set or delete an attribute looks up the object named bin the class dictionary for a, but ifbis a descriptor, the respective descriptor method gets called. Understanding descriptors is a key to a deep understanding of Python because they are the basis for many features including functions, methods, properties, class methods, static methods, and reference to super classes. For more information about descriptors’ methods, see descriptors. dictionary An associative array, where arbitrary keys are mapped to values. The keys can be any object with__hash__() and__eq__() methods. Called a hash in Perl. dictionary view The objects returned from dict.keys() ,dict.values() , anddict.items() are called dictionary views. They pro"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 122,
      "text": "an be any object with__hash__() and__eq__() methods. Called a hash in Perl. dictionary view The objects returned from dict.keys() ,dict.values() , anddict.items() are called dictionary views. They provide a dynamic view on the dictionary’s entries, which means that when the dictionary changes, the view reﬂects these changes. To force the dictionary view to become a full list uselist(dictview) . See dict-views. docstring A string literal which appears as the ﬁrst expression in a class, function or module. While ignored when the suite is executed, it is recognized by the compiler and put into the __doc__ attribute of the enclosing class, function or module. Since it is available via introspection, it is the canonical place for documentation of the object. duck-typing A programming style which does not look at an object’s type to determine if it has the right interface; instead, the method or attribute is simply called or used (“If it looks like a duck and quacks like a duck, it must be a duck.”) By emphasizing interfaces rather than speciﬁc types, well-designed code improves its ﬂexibility by allowing polymorphic substitution. Duck-typing avoids tests using type()orisinstance() . (No"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 122,
      "text": " duck.”) By emphasizing interfaces rather than speciﬁc types, well-designed code improves its ﬂexibility by allowing polymorphic substitution. Duck-typing avoids tests using type()orisinstance() . (Note, however, that duck-typing can be complemented with abstract base classes.) Instead, it typically employs hasattr() tests or EAFPprogramming. EAFPEasier to ask for forgiveness than permission. This common Python coding style assumes the existence of valid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is characterized by the presence of many tryandexceptstatements. The technique contrasts with the LBYLstyle common to many other languages such as C. expression A piece of syntax which can be evaluated to some value. In other words, an expression is an accumulation of expression elements like literals, names, attribute access, operators or function calls which all return a value. In contrast to many other languages, not all language constructs are expressions. There are also statement s which cannot be used as expressions, such as if. Assignments are also statements, not expressions. extension module A module written in C or C++, usi"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 122,
      "text": "tructs are expressions. There are also statement s which cannot be used as expressions, such as if. Assignments are also statements, not expressions. extension module A module written in C or C++, using Python’s C API to interact with the core and with user code. f-string String literals preﬁxed with 'f'or'F'are commonly called “f-strings” which is short for formatted string literals. See also PEP 498 . ﬁle object An object exposing a ﬁle-oriented API (with methods such as read()orwrite()) to an underly- ing resource. Depending on the way it was created, a ﬁle object can mediate access to a real on-disk ﬁle or to another type of storage or communication device (for example standard input/output, in-memory buﬀers, sockets, pipes, etc.). File objects are also called ﬁle-like objects or streams. There are actually three categories of ﬁle objects: raw binary ﬁles , buﬀered binary ﬁles and text ﬁles. Their interfaces are deﬁned in the iomodule. The canonical way to create a ﬁle object is by using the 116 Appendix A. Glossary"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 123,
      "text": "Python Tutorial, Release 3.7.0 open()function. ﬁle-like object A synonym for ﬁle object . ﬁnderAn object that tries to ﬁnd the loaderfor a module that is being imported. Since Python 3.3, there are two types of ﬁnder: meta path ﬁnders for use with sys.meta_path , and path entry ﬁnders for use with sys.path_hooks . See PEP 302 ,PEP 420 and PEP 451 for much more detail. ﬂoor division Mathematical division that rounds down to nearest integer. The ﬂoor division operator is //. For example, the expression 11 // 4 evaluates to 2in contrast to the 2.75returned by ﬂoat true division. Note that (-11) // 4 is-3because that is -2.75rounded downward . See PEP 238 . function A series of statements which returns some value to a caller. It can also be passed zero or more arguments which may be used in the execution of the body. See also parameter ,method, and the function section. function annotation An annotation of a function parameter or return value. Function annotations are usually used for type hints : for example this function is expected to take two intarguments and is also expected to have an intreturn value: defsum_two_numbers (a:int, b:int)->int: returna+b Function annotation syntax is"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 123,
      "text": " hints : for example this function is expected to take two intarguments and is also expected to have an intreturn value: defsum_two_numbers (a:int, b:int)->int: returna+b Function annotation syntax is explained in section function. See variable annotation and PEP 484 , which describe this functionality. __future__ A pseudo-module which programmers can use to enable new language features which are not compatible with the current interpreter. By importing the __future__ module and evaluating its variables, you can see when a new feature was ﬁrst added to the language and when it becomes the default: >>> import __future__ >>>__future__ .division _Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192) garbage collection The process of freeing memory when it is not used anymore. Python performs garbage collection via reference counting and a cyclic garbage collector that is able to detect and break reference cycles. The garbage collector can be controlled using the gcmodule. generator A function which returns a generator iterator . It looks like a normal function except that it containsyieldexpressions for producing a series of values usable in a for-loop or that can be retrieved o"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 123,
      "text": "A function which returns a generator iterator . It looks like a normal function except that it containsyieldexpressions for producing a series of values usable in a for-loop or that can be retrieved one at a time with the next()function. Usually refers to a generator function, but may refer to a generator iterator in some contexts. In cases where the intended meaning isn’t clear, using the full terms avoids ambiguity. generator iterator An object created by a generator function. Eachyieldtemporarilysuspendsprocessing, rememberingthelocationexecutionstate(includinglocal variables and pending try-statements). When the generator iterator resumes, it picks up where it left oﬀ (in contrast to functions which start fresh on every invocation). generator expression An expression that returns an iterator. It looks like a normal expression followed by aforexpression deﬁning a loop variable, range, and an optional ifexpression. The combined expression generates values for an enclosing function: >>>sum(i*ifori inrange(10)) # sum of squares 0, 1, 4, ... 81 285 117"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 124,
      "text": "Python Tutorial, Release 3.7.0 generic function A function composed of multiple functions implementing the same operation for diﬀerent types. Which implementation should be used during a call is determined by the dispatch algorithm. See also the single dispatch glossary entry, the functools.singledispatch() decorator, and PEP 443. GILSee global interpreter lock . global interpreter lock The mechanism used by the CPython interpreter to assure that only one thread executes Python bytecode at a time. This simpliﬁes the CPython implementation by making the object model (including critical built-in types such as dict) implicitly safe against concurrent access. Locking the entire interpreter makes it easier for the interpreter to be multi-threaded, at the expense of much of the parallelism aﬀorded by multi-processor machines. However, some extension modules, either standard or third-party, are designed so as to release the GIL when doing computationally-intensive tasks such as compression or hashing. Also, the GIL is always released when doing I/O. Past eﬀorts to create a “free-threaded” interpreter (one which locks shared data at a much ﬁner granularity) have not been successful because"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 124,
      "text": " hashing. Also, the GIL is always released when doing I/O. Past eﬀorts to create a “free-threaded” interpreter (one which locks shared data at a much ﬁner granularity) have not been successful because performance suﬀered in the common single-processor case. It is believed that overcoming this performance issue would make the implementation much more complicated and therefore costlier to maintain. hash-based pyc A bytecode cache ﬁle that uses the hash rather than the last-modiﬁed time of the corre- sponding source ﬁle to determine its validity. See pyc-invalidation. hashable An object is hashable if it has a hash value which never changes during its lifetime (it needs a __hash__() method), and can be compared to other objects (it needs an __eq__() method). Hashable objects which compare equal must have the same hash value. Hashability makes an object usable as a dictionary key and a set member, because these data structures use the hash value internally. All of Python’s immutable built-in objects are hashable; mutable containers (such as lists or dictio- naries) are not. Objects which are instances of user-deﬁned classes are hashable by default. They all compare unequal (except with"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 124,
      "text": "in objects are hashable; mutable containers (such as lists or dictio- naries) are not. Objects which are instances of user-deﬁned classes are hashable by default. They all compare unequal (except with themselves), and their hash value is derived from their id(). IDLEAn Integrated Development Environment for Python. IDLE is a basic editor and interpreter envi- ronment which ships with the standard distribution of Python. immutable An object with a ﬁxed value. Immutable objects include numbers, strings and tuples. Such an object cannot be altered. A new object has to be created if a diﬀerent value has to be stored. They play an important role in places where a constant hash value is needed, for example as a key in a dictionary. import path A list of locations (or path entries ) that are searched by the path based ﬁnder for modules to import. During import, this list of locations usually comes from sys.path , but for subpackages it may also come from the parent package’s __path__ attribute. importing The process by which Python code in one module is made available to Python code in another module. importer An object that both ﬁnds and loads a module; both a ﬁnderand loaderobject. inte"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 124,
      "text": "e. importing The process by which Python code in one module is made available to Python code in another module. importer An object that both ﬁnds and loads a module; both a ﬁnderand loaderobject. interactive Python has an interactive interpreter which means you can enter statements and expressions at the interpreter prompt, immediately execute them and see their results. Just launch pythonwith no arguments (possibly by selecting it from your computer’s main menu). It is a very powerful way to test out new ideas or inspect modules and packages (remember help(x)). interpreted Python is an interpreted language, as opposed to a compiled one, though the distinction can be blurry because of the presence of the bytecode compiler. This means that source ﬁles can be run directly without explicitly creating an executable which is then run. Interpreted languages typically 118 Appendix A. Glossary"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 125,
      "text": "Python Tutorial, Release 3.7.0 have a shorter development/debug cycle than compiled ones, though their programs generally also run more slowly. See also interactive . interpreter shutdown When asked to shut down, the Python interpreter enters a special phase where it gradually releases all allocated resources, such as modules and various critical internal structures. It also makes several calls to the garbage col lector . This can trigger the execution of code in user-deﬁned destructors or weakref callbacks. Code executed during the shutdown phase can encounter various exceptions as the resources it relies on may not function anymore (common examples are library modules or the warnings machinery). The main reason for interpreter shutdown is that the __main__ module or the script being run has ﬁnished executing. iterable An object capable of returning its members one at a time. Examples of iterables include all sequence types (such as list,str, andtuple) and some non-sequence types like dict,ﬁle objects , and objects of any classes you deﬁne with an __iter__() method or with a __getitem__() method that implements Sequence semantics. Iterables can be used in a forloop and in many oth"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 125,
      "text": " dict,ﬁle objects , and objects of any classes you deﬁne with an __iter__() method or with a __getitem__() method that implements Sequence semantics. Iterables can be used in a forloop and in many other places where a sequence is needed ( zip(),map(), …). When an iterable object is passed as an argument to the built-in function iter(), it returns an iterator for the object. This iterator is good for one pass over the set of values. When using iterables, it is usually not necessary to call iter()or deal with iterator objects yourself. The forstatement does that automatically for you, creating a temporary unnamed variable to hold the iterator for the duration of the loop. See also iterator,sequence, and generator . iterator An object representing a stream of data. Repeated calls to the iterator’s __next__() method (or passing it to the built-in function next()) return successive items in the stream. When no more data are available a StopIteration exception is raised instead. At this point, the iterator object is exhausted and any further calls to its __next__() method just raise StopIteration again. Iterators are required to have an __iter__() method that returns the iterator object "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 125,
      "text": "t, the iterator object is exhausted and any further calls to its __next__() method just raise StopIteration again. Iterators are required to have an __iter__() method that returns the iterator object itself so every iterator is also iterable and may be used in most places where other iterables are accepted. One notable exception is code which attempts multiple iteration passes. A container object (such as a list) produces a fresh new iterator each time you pass it to the iter()function or use it in a forloop. Attempting this with an iterator will just return the same exhausted iterator object used in the previous iteration pass, making it appear like an empty container. More information can be found in typeiter. key function A key function or collation function is a callable that returns a value used for sorting or ordering. For example, locale.strxfrm() is used to produce a sort key that is aware of locale speciﬁc sort conventions. A number of tools in Python accept key functions to control how elements are ordered or grouped. They include min(),max(),sorted() ,list.sort() ,heapq.merge() ,heapq.nsmallest() ,heapq. nlargest() , anditertools.groupby() . There are several ways to cre"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 125,
      "text": "ontrol how elements are ordered or grouped. They include min(),max(),sorted() ,list.sort() ,heapq.merge() ,heapq.nsmallest() ,heapq. nlargest() , anditertools.groupby() . There are several ways to create a key function. For example. the str.lower() method can serve as a key function for case insensitive sorts. Alternatively, a key function can be built from a lambda expression such as lambda r: (r[0], r[2]) . Also, the operator module provides three key function constructors: attrgetter() ,itemgetter() , andmethodcaller() . See the Sorting HOW TO for examples of how to create and use key functions. keyword argument See argument . lambda An anonymousinline function consisting of a single expression whichis evaluatedwhen the function is called. The syntax to create a lambda function is lambda [parameters]: expression LBYLLook before you leap. This coding style explicitly tests for pre-conditions before making calls or lookups. This style contrasts with the EAFPapproach and is characterized by the presence of many ifstatements. 119"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 126,
      "text": "Python Tutorial, Release 3.7.0 In a multi-threaded environment, the LBYL approach can risk introducing a race condition between “the looking” and “the leaping”. For example, the code, if key in mapping: return mapping[key] can fail if another thread removes keyfrom mapping after the test, but before the lookup. This issue can be solved with locks or by using the EAFP approach. listA built-in Python sequence. Despite its name it is more akin to an array in other languages than to a linked list since access to elements is O(1). list comprehension A compact way to process all or part of the elements in a sequence and return a list with the results. result = ['{:#04x}'.format(x) for x in range(256) if x % 2 == 0] generates a list of strings containing even hex numbers (0x..) in the range from 0 to 255. The ifclause is optional. If omitted, all elements in range(256) are processed. loaderAnobjectthatloadsamodule. Itmustdeﬁneamethodnamed load_module() . Aloaderistypically returned by a ﬁnder. See PEP 302 for details and importlib.abc.Loader for an abstract base class . mapping A container object that supports arbitrary key lookups and implements the methods speciﬁed in theMapping orMutab"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 126,
      "text": ". See PEP 302 for details and importlib.abc.Loader for an abstract base class . mapping A container object that supports arbitrary key lookups and implements the methods speciﬁed in theMapping orMutableMapping abstract base classes. Examples include dict,collections. defaultdict ,collections.OrderedDict andcollections.Counter . meta path ﬁnder A ﬁnderreturned by a search of sys.meta_path . Meta path ﬁnders are related to, but diﬀerent from path entry ﬁnders . Seeimportlib.abc.MetaPathFinder for the methods that meta path ﬁnders implement. metaclass The class of a class. Class deﬁnitions create a class name, a class dictionary, and a list of base classes. The metaclass is responsible for taking those three arguments and creating the class. Most object oriented programming languages provide a default implementation. What makes Python special is that it is possible to create custom metaclasses. Most users never need this tool, but when the need arises, metaclasses can provide powerful, elegant solutions. They have been used for logging attribute access, adding thread-safety, tracking object creation, implementing singletons, and many other tasks. More information can be found in metac"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 126,
      "text": "egant solutions. They have been used for logging attribute access, adding thread-safety, tracking object creation, implementing singletons, and many other tasks. More information can be found in metaclasses. method A function which is deﬁned inside a class body. If called as an attribute of an instance of that class, the method will get the instance object as its ﬁrst argument (which is usually called self). See function and nested scope . method resolution order Method Resolution Order is the order in which base classes are searched for a member during lookup. See The Python 2.3 Method Resolution Order for details of the algorithm used by the Python interpreter since the 2.3 release. module An object that serves as an organizational unit of Python code. Modules have a namespace containing arbitrary Python objects. Modules are loaded into Python by the process of importing . See also package. module spec A namespace containing the import-related information used to load a module. An instance ofimportlib.machinery.ModuleSpec . MROSee method resolution order . mutable Mutable objects can change their value but keep their id(). See also immutable . named tuple Any tuple-like class who"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 126,
      "text": "stance ofimportlib.machinery.ModuleSpec . MROSee method resolution order . mutable Mutable objects can change their value but keep their id(). See also immutable . named tuple Any tuple-like class whose indexable elements are also accessible using named attributes (for example, time.localtime() returns a tuple-like object where the yearis accessible either with an index such as t[0]or with a named attribute like t.tm_year ). A named tuple can be a built-in type such as time.struct_time , or it can be created with a regular classdeﬁnition. Afullfeaturednamedtuplecanalsobecreatedwiththefactoryfunction collections. namedtuple() . The latter approach automatically provides extra features such as a self-documenting representation like Employee(name='jones', title='programmer') . 120 Appendix A. Glossary"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 127,
      "text": "Python Tutorial, Release 3.7.0 namespace The place where a variable is stored. Namespaces are implemented as dictionaries. There are the local, global and built-in namespaces as well as nested namespaces in objects (in methods). Namespaces support modularityby preventingnaming conﬂicts. Forinstance, the functions builtins. openandos.open() are distinguished by their namespaces. Namespaces also aid readability and maintainability by making it clear which module implements a function. For instance, writing random. seed()oritertools.islice() makes it clear that those functions are implemented by the random anditertools modules, respectively. namespace package A PEP 420 packagewhich serves only as a container for subpackages. Namespace packages may have no physical representation, and speciﬁcally are not like a regular package because they have no __init__.py ﬁle. See also module. nested scope The ability to refer to a variable in an enclosing deﬁnition. For instance, a function deﬁned inside another function can refer to variables in the outer function. Note that nested scopes by default work only for reference and not for assignment. Local variables both read and write in the innermo"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 127,
      "text": "ide another function can refer to variables in the outer function. Note that nested scopes by default work only for reference and not for assignment. Local variables both read and write in the innermost scope. Likewise, global variables read and write to the global namespace. The nonlocal allows writing to outer scopes. new-style class Old name for the ﬂavor of classes now used for all class objects. In earlier Python ver- sions, only new-style classes could use Python’s newer, versatile features like __slots__ , descriptors, properties, __getattribute__() , class methods, and static methods. objectAny data with state (attributes or value) and deﬁned behavior (methods). Also the ultimate base class of any new-style class . package A Python modulewhich can contain submodules or recursively, subpackages. Technically, a pack- age is a Python module with an __path__ attribute. See also regular package and namespace package . parameter A named entity in a function (or method) deﬁnition that speciﬁes an argument (or in some cases, arguments) that the function can accept. There are ﬁve kinds of parameter: • positional-or-keyword : speciﬁes an argument that can be passed either positional "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 127,
      "text": " speciﬁes an argument (or in some cases, arguments) that the function can accept. There are ﬁve kinds of parameter: • positional-or-keyword : speciﬁes an argument that can be passed either positional ly or as a keyword argument . This is the default kind of parameter, for example fooand barin the following: deffunc(foo, bar =None):... • positional-only : speciﬁes an argument that can be supplied only by position. Python has no syntax for deﬁning positional-only parameters. However, some built-in functions have positional- only parameters (e.g. abs()). • keyword-only : speciﬁes an argument that can be supplied only by keyword. Keyword-only pa- rameters can be deﬁned by including a single var-positional parameter or bare *in the parameter list of the function deﬁnition before them, for example kw_only1 and kw_only2 in the following: deffunc(arg,*, kw_only1, kw_only2): ... • var-positional : speciﬁes that an arbitrary sequence of positional arguments can be provided (in addition to any positional arguments already accepted by other parameters). Such a parameter can be deﬁned by prepending the parameter name with *, for example argsin the following: deffunc(*args,**kwargs): ... • var-k"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 127,
      "text": "sitional arguments already accepted by other parameters). Such a parameter can be deﬁned by prepending the parameter name with *, for example argsin the following: deffunc(*args,**kwargs): ... • var-keyword : speciﬁes that arbitrarily many keyword arguments can be provided (in addition to any keyword arguments already accepted by other parameters). Such a parameter can be deﬁned by prepending the parameter name with **, for example kwargsin the example above. Parameters can specify both optional and required arguments, as well as default values for some optional arguments. 121"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 128,
      "text": "Python Tutorial, Release 3.7.0 See also the argument glossary entry, the FAQ question on the diﬀerence between arguments and parameters, the inspect.Parameter class, the function section, and PEP 362 . path entry A single location on the import path which the path based ﬁnder consults to ﬁnd modules for importing. path entry ﬁnder Aﬁnderreturned by a callable on sys.path_hooks (i.e. a path entry hook ) which knows how to locate modules given a path entry . Seeimportlib.abc.PathEntryFinder for the methods that path entry ﬁnders implement. path entry hook A callable on the sys.path_hook list which returns a path entry ﬁnder if it knows how to ﬁnd modules on a speciﬁc path entry . path based ﬁnder One of the default meta path ﬁnders which searches an import path for modules. path-like object An object representing a ﬁle system path. A path-like object is either a strorbytes object representing a path, or an object implementing the os.PathLike protocol. An object that supports the os.PathLike protocol can be converted to a strorbytesﬁle system path by calling the os.fspath() function; os.fsdecode() andos.fsencode() can be used to guarantee a strorbytes result instead, respectively. Int"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 128,
      "text": "ike protocol can be converted to a strorbytesﬁle system path by calling the os.fspath() function; os.fsdecode() andos.fsencode() can be used to guarantee a strorbytes result instead, respectively. Introduced by PEP 519 . PEPPython Enhancement Proposal. A PEP is a design document providing information to the Python community, or describing a new feature for Python or its processes or environment. PEPs should provide a concise technical speciﬁcation and a rationale for proposed features. PEPs are intended to be the primary mechanisms for proposing major new features, for collecting com- munity input on an issue, and for documenting the design decisions that have gone into Python. The PEP author is responsible for building consensus within the community and documenting dissenting opinions. See PEP 1. portion A set of ﬁles in a single directory (possibly stored in a zip ﬁle) that contribute to a namespace package, as deﬁned in PEP 420 . positional argument See argument . provisional API A provisional API is one which has been deliberately excluded from the standard library’s backwards compatibility guarantees. While major changes to such interfaces are not expected, as long as they are"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 128,
      "text": "provisional API is one which has been deliberately excluded from the standard library’s backwards compatibility guarantees. While major changes to such interfaces are not expected, as long as they are marked provisional, backwards incompatible changes (up to and including removal of the interface) may occur if deemed necessary by core developers. Such changes will not be made gratuitously – they will occur only if serious fundamental ﬂaws are uncovered that were missed prior to the inclusion of the API. Even for provisional APIs, backwards incompatible changes are seen as a “solution of last resort” - every attempt will still be made to ﬁnd a backwards compatible resolution to any identiﬁed problems. This process allows the standard library to continue to evolve over time, without locking in problematic design errors for extended periods of time. See PEP 411 for more details. provisional package See provisional API . Python 3000 Nickname for the Python 3.x release line (coined long ago when the release of version 3 was something in the distant future.) This is also abbreviated “Py3k”. Pythonic An idea or piece of code which closely follows the most common idioms of the Python langu"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 128,
      "text": " when the release of version 3 was something in the distant future.) This is also abbreviated “Py3k”. Pythonic An idea or piece of code which closely follows the most common idioms of the Python language, rather than implementing code using concepts common to other languages. For example, a common idiom in Python is to loop over all elements of an iterable using a forstatement. Many other languages don’t have this type of construct, so people unfamiliar with Python sometimes use a numerical counter instead: foriinrange(len(food)): print(food[i]) 122 Appendix A. Glossary"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 129,
      "text": "Python Tutorial, Release 3.7.0 As opposed to the cleaner, Pythonic method: forpiece infood: print(piece) qualiﬁed name A dotted name showing the “path” from a module’s global scope to a class, function or method deﬁned in that module, as deﬁned in PEP 3155 . For top-level functions and classes, the qualiﬁed name is the same as the object’s name: >>> class C: ... class D: ... defmeth(self): ... pass ... >>>C.__qualname__ 'C' >>>C.D.__qualname__ 'C.D' >>>C.D.meth.__qualname__ 'C.D.meth' When used to refer to modules, the ful ly qualiﬁed name means the entire dotted path to the module, including any parent packages, e.g. email.mime.text : >>> import email .mime .text >>>email.mime.text.__name__ 'email.mime.text' reference count The number of references to an object. When the reference count of an object drops to zero, itisdeallocated. ReferencecountingisgenerallynotvisibletoPythoncode, butitisakeyelement of the CPython implementation. The sysmodule deﬁnes a getrefcount() function that programmers can call to return the reference count for a particular object. regular package A traditional package, such as a directory containing an __init__.py ﬁle. See also namespace package . __slots_"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 129,
      "text": "grammers can call to return the reference count for a particular object. regular package A traditional package, such as a directory containing an __init__.py ﬁle. See also namespace package . __slots__ A declaration inside a class that saves memory by pre-declaring space for instance attributes and eliminating instance dictionaries. Though popular, the technique is somewhat tricky to get right and is best reserved for rare cases where there are large numbers of instances in a memory-critical application. sequence An iterablewhich supports eﬃcient element access using integer indices via the __getitem__() special method and deﬁnes a __len__() method that returns the length of the sequence. Some built-in sequence types are list,str,tuple, andbytes. Note that dictalso supports __getitem__() and __len__() , but is considered a mapping rather than a sequence because the lookups use arbitrary immutable keys rather than integers. Thecollections.abc.Sequence abstract base class deﬁnes a much richer interface that goes beyond just __getitem__() and__len__() , adding count(),index(),__contains__() , and __reversed__() . Types that implement this expanded interface can be registered explicitl"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 129,
      "text": "icher interface that goes beyond just __getitem__() and__len__() , adding count(),index(),__contains__() , and __reversed__() . Types that implement this expanded interface can be registered explicitly using register() . single dispatch A form of generic function dispatch where the implementation is chosen based on the type of a single argument. sliceAn object usually containing a portion of a sequence. A slice is created using the subscript notation, [] with colons between numbers when several are given, such as in variable_name[1:3:5] . The bracket (subscript) notation uses sliceobjects internally. 123"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 130,
      "text": "Python Tutorial, Release 3.7.0 special method A method that is called implicitly by Python to execute a certain operation on a type, such as addition. Such methods have names starting and ending with double underscores. Special methods are documented in specialnames. statement A statement is part of a suite (a “block” of code). A statement is either an expression or one of several constructs with a keyword, such as if,whileorfor. struct sequence A tuple with named elements. Struct sequences expose an interface similar to named tuplein that elements can either be accessed either by index or as an attribute. However, they do not have any of the named tuple methods like _make() or_asdict() . Examples of struct sequences includesys.float_info and the return value of os.stat() . text encoding A codec which encodes Unicode strings to bytes. text ﬁle Aﬁle object able to read and write strobjects. Often, a text ﬁle actually accesses a byte-oriented datastream and handles the text encoding automatically. Examples of text ﬁles are ﬁles opened in text mode ('r'or'w'),sys.stdin ,sys.stdout , and instances of io.StringIO . See also binary ﬁle for a ﬁle object able to read and write bytes-like o"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 130,
      "text": "matically. Examples of text ﬁles are ﬁles opened in text mode ('r'or'w'),sys.stdin ,sys.stdout , and instances of io.StringIO . See also binary ﬁle for a ﬁle object able to read and write bytes-like objects . triple-quoted string A string which is bound by three instances of either a quotation mark (“) or an apostrophe (‘). While they don’t provide any functionality not available with single-quoted strings, they are useful for a number of reasons. They allow you to include unescaped single and double quotes within a string and they can span multiple lines without the use of the continuation character, making them especially useful when writing docstrings. typeThe type of a Python object determines what kind of object it is; every object has a type. An object’s type is accessible as its __class__ attribute or can be retrieved with type(obj) . type alias A synonym for a type, created by assigning the type to an identiﬁer. Type aliases are useful for simplifying type hints . For example: from typing importList, Tuple defremove_gray_shades ( colors: List[Tuple[ int,int,int]])->List[Tuple[ int,int,int]]: pass could be made more readable like this: from typing importList, Tuple Color=Tup"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 130,
      "text": "from typing importList, Tuple defremove_gray_shades ( colors: List[Tuple[ int,int,int]])->List[Tuple[ int,int,int]]: pass could be made more readable like this: from typing importList, Tuple Color=Tuple[int,int,int] defremove_gray_shades (colors: List[Color]) ->List[Color]: pass Seetypingand PEP 484 , which describe this functionality. type hint An annotation that speciﬁes the expected type for a variable, a class attribute, or a function parameter or return value. Type hints are optional and are not enforced by Python but they are useful to static type analysis tools, and aid IDEs with code completion and refactoring. Type hints of global variables, class attributes, and functions, but not local variables, can be accessed usingtyping.get_type_hints() . Seetypingand PEP 484 , which describe this functionality. universal newlines A manner of interpreting text streams in which all of the following are recognized as ending a line: the Unix end-of-line convention '\\n', the Windows convention '\\r\\n', and the old 124 Appendix A. Glossary"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 131,
      "text": "Python Tutorial, Release 3.7.0 Macintosh convention '\\r'. See PEP 278 and PEP 3116 , as well as bytes.splitlines() for an additional use. variable annotation An annotation of a variable or a class attribute. When annotating a variable or a class attribute, assignment is optional: class C: field:'annotation ' Variable annotations are usually used for type hints : for example this variable is expected to take int values: count:int=0 Variable annotation syntax is explained in section annassign. See function annotation ,PEP 484 and PEP 526 , which describe this functionality. virtual environment A cooperatively isolated runtime environment that allows Python users and appli- cations to install and upgrade Python distribution packages without interfering with the behaviour of other Python applications running on the same system. See alsovenv. virtual machine A computer deﬁned entirely in software. Python’s virtual machine executes the bytecode emitted by the bytecode compiler. Zen of Python Listing of Python design principles and philosophies that are helpful in understanding and using the language. The listing can be found by typing “ import this ” at the interactive prompt. 125"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 132,
      "text": "Python Tutorial, Release 3.7.0 126 Appendix A. Glossary"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 133,
      "text": "APPENDIX B ABOUT THESE DOCUMENTS These documents are generated from reStructuredText sources by Sphinx, a document processor speciﬁcally written for the Python documentation. Development of the documentation and its toolchain is an entirely volunteer eﬀort, just like Python itself. If you want to contribute, please take a look at the reporting-bugs page for information on how to do so. New volunteers are always welcome! Many thanks go to: •Fred L. Drake, Jr., the creator of the original Python documentation toolset and writer of much of the content; •theDocutils project for creating reStructuredText and the Docutils suite; •Fredrik Lundh for his Alternative Python Reference project from which Sphinx got many good ideas. B.1Contributors to the Python Documentation Many people have contributed to the Python language, the Python standard library, and the Python docu- mentation. See Misc/ACKS in the Python source distribution for a partial list of contributors. It is only with the input and contributions of the Python community that Python has such wonderful documentation – Thank You! 127"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 134,
      "text": "Python Tutorial, Release 3.7.0 128 Appendix B. About these documents"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 135,
      "text": "APPENDIX C HISTORY AND LICENSE C.1History of the software Python was created in the early 1990s by Guido van Rossum at Stichting Mathematisch Centrum (CWI, see https://www.cwi.nl/ ) in the Netherlands as a successor of a language called ABC. Guido remains Python’s principal author, although it includes many contributions from others. In 1995, Guido continued his work on Python at the Corporation for National Research Initiatives (CNRI, seehttps://www.cnri.reston.va.us/ ) in Reston, Virginia where he released several versions of the software. In May 2000, Guido and the Python core development team moved to BeOpen.com to form the BeOpen PythonLabs team. In October of the same year, the PythonLabs team moved to Digital Creations (now Zope Corporation; see http://www.zope.com/ ). In 2001, the Python Software Foundation (PSF, see https: //www.python.org/psf/ ) was formed, a non-proﬁt organization created speciﬁcally to own Python-related Intellectual Property. Zope Corporation is a sponsoring member of the PSF. All Python releases are Open Source (see https://opensource.org/ for the Open Source Deﬁnition). Histor- ically, most, but not all, Python releases have also been GPL-compatible;"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 135,
      "text": "ng member of the PSF. All Python releases are Open Source (see https://opensource.org/ for the Open Source Deﬁnition). Histor- ically, most, but not all, Python releases have also been GPL-compatible; the table below summarizes the various releases. Release Derived from Y ear Owner GPL compatible? 0.9.0 thru 1.2 n/a 1991-1995 CWI yes 1.3 thru 1.5.2 1.2 1995-1999 CNRI yes 1.6 1.5.2 2000 CNRI no 2.0 1.6 2000 BeOpen.com no 1.6.1 1.6 2001 CNRI no 2.1 2.0+1.6.1 2001 PSF no 2.0.1 2.0+1.6.1 2001 PSF yes 2.1.1 2.1+2.0.1 2001 PSF yes 2.1.2 2.1.1 2002 PSF yes 2.1.3 2.1.2 2002 PSF yes 2.2 and above 2.1.1 2001-now PSF yes Note:GPL-compatible doesn’t mean that we’re distributing Python under the GPL. All Python licenses, unlike the GPL, let you distribute a modiﬁed version without making your changes open source. The GPL- compatible licenses make it possible to combine Python with other software that is released under the GPL; the others don’t. Thanks to the many outside volunteers who have worked under Guido’s direction to make these releases possible. 129"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 136,
      "text": "Python Tutorial, Release 3.7.0 C.2Terms and conditions for accessing or otherwise using Python C.2.1PSF LICENSE AGREEMENT FOR PYTHON 3.7.0 1. This LICENSE AGREEMENT is between the Python Software Foundation (\"PSF\"), and the Individual or Organization (\"Licensee\") accessing and otherwise using Python 3.7.0 software in source or binary form and its associated documentation. 2. Subject to the terms and conditions of this License Agreement, PSF hereby grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce, analyze, test, perform and/or display publicly, prepare derivative works, distribute, and otherwise use Python 3.7.0 alone or in any derivative version, provided, however, that PSF's License Agreement and PSF's notice of copyright, i.e., \"Copyright © 2001-2018 Python Software Foundation; All Rights Reserved\" are retained in Python 3.7.0 alone or in any derivative version prepared by Licensee. 3. In the event Licensee prepares a derivative work that is based on or incorporates Python 3.7.0 or any part thereof, and wants to make the derivative work available to others as provided herein, then Licensee hereby agrees to include in any such work a brief summary of t"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 136,
      "text": "ncorporates Python 3.7.0 or any part thereof, and wants to make the derivative work available to others as provided herein, then Licensee hereby agrees to include in any such work a brief summary of the changes made to Python 3.7.0. 4. PSF is making Python 3.7.0 available to Licensee on an \"AS IS\" basis. PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 3.7.0 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS. 5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 3.7.0 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 3.7.0, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF. 6. This License Agreement will automatically terminate upon a material breach of its terms and conditions. 7. Nothing in this License Agreement shall be deemed to create any relationship of agency, partnership, or joint venture between PSF and Licensee. This License Agreement does not grant permission to use PSF trademar"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 136,
      "text": "his License Agreement shall be deemed to create any relationship of agency, partnership, or joint venture between PSF and Licensee. This License Agreement does not grant permission to use PSF trademarks or trade name in a trademark sense to endorse or promote products or services of Licensee, or any third party. 8. By copying, installing or otherwise using Python 3.7.0, Licensee agrees to be bound by the terms and conditions of this License Agreement. C.2.2BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0 BEOPEN PYTHON OPEN SOURCE LICENSE AGREEMENT VERSION 1 1. This LICENSE AGREEMENT is between BeOpen.com (\"BeOpen\"), having an office at 160 Saratoga Avenue, Santa Clara, CA 95051, and the Individual or Organization (continues on next page) 130 Appendix C. History and License"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 137,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) (\"Licensee\") accessing and otherwise using this software in source or binary form and its associated documentation (\"the Software\"). 2. Subject to the terms and conditions of this BeOpen Python License Agreement, BeOpen hereby grants Licensee a non-exclusive, royalty-free, world-wide license to reproduce, analyze, test, perform and/or display publicly, prepare derivative works, distribute, and otherwise use the Software alone or in any derivative version, provided, however, that the BeOpen Python License is retained in the Software, alone or in any derivative version prepared by Licensee. 3. BeOpen is making the Software available to Licensee on an \"AS IS\" basis. BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE WILL NOT INFRINGE ANY THIRD PARTY RIGHTS. 4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE SOFTWARE FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF USING, MODIFYI"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 137,
      "text": "NFRINGE ANY THIRD PARTY RIGHTS. 4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE SOFTWARE FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF. 5. This License Agreement will automatically terminate upon a material breach of its terms and conditions. 6. This License Agreement shall be governed by and interpreted in all respects by the law of the State of California, excluding conflict of law provisions. Nothing in this License Agreement shall be deemed to create any relationship of agency, partnership, or joint venture between BeOpen and Licensee. This License Agreement does not grant permission to use BeOpen trademarks or trade names in a trademark sense to endorse or promote products or services of Licensee, or any third party. As an exception, the \"BeOpen Python\" logos available at http://www.pythonlabs.com/logos.html may be used according to the permissions granted on that web page. 7. By copying, installing or otherwise using the software, Licensee agrees to be bound by the terms and conditions of this License Agreement"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 137,
      "text": "used according to the permissions granted on that web page. 7. By copying, installing or otherwise using the software, Licensee agrees to be bound by the terms and conditions of this License Agreement. C.2.3CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1 1. This LICENSE AGREEMENT is between the Corporation for National Research Initiatives, having an office at 1895 Preston White Drive, Reston, VA 20191 (\"CNRI\"), and the Individual or Organization (\"Licensee\") accessing and otherwise using Python 1.6.1 software in source or binary form and its associated documentation. 2. Subject to the terms and conditions of this License Agreement, CNRI hereby grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce, analyze, test, perform and/or display publicly, prepare derivative works, distribute, and otherwise use Python 1.6.1 alone or in any derivative version, provided, however, that CNRI's License Agreement and CNRI's notice of copyright, i.e., \"Copyright © 1995-2001 Corporation for National Research Initiatives; All Rights Reserved\" are retained in Python 1.6.1 alone or in any derivative version prepared by Licensee. Alternately, in lieu of CNRI's License Agreement, Licensee "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 137,
      "text": "or National Research Initiatives; All Rights Reserved\" are retained in Python 1.6.1 alone or in any derivative version prepared by Licensee. Alternately, in lieu of CNRI's License Agreement, Licensee may substitute the following text (omitting the quotes): \"Python 1.6.1 is made available subject to the terms and conditions in CNRI's License (continues on next page) C.2. Terms and conditions for accessing or otherwise using Python 131"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 138,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) Agreement. This Agreement together with Python 1.6.1 may be located on the Internet using the following unique, persistent identifier (known as a handle): 1895.22/1013. This Agreement may also be obtained from a proxy server on the Internet using the following URL: http://hdl.handle.net/1895.22/1013.\" 3. In the event Licensee prepares a derivative work that is based on or incorporates Python 1.6.1 or any part thereof, and wants to make the derivative work available to others as provided herein, then Licensee hereby agrees to include in any such work a brief summary of the changes made to Python 1.6.1. 4. CNRI is making Python 1.6.1 available to Licensee on an \"AS IS\" basis. CNRI MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE, BUT NOT LIMITATION, CNRI MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 1.6.1 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS. 5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 1.6.1 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF MODIFYING"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 138,
      "text": "L NOT INFRINGE ANY THIRD PARTY RIGHTS. 5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 1.6.1 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF. 6. This License Agreement will automatically terminate upon a material breach of its terms and conditions. 7. This License Agreement shall be governed by the federal intellectual property law of the United States, including without limitation the federal copyright law, and, to the extent such U.S. federal law does not apply, by the law of the Commonwealth of Virginia, excluding Virginia's conflict of law provisions. Notwithstanding the foregoing, with regard to derivative works based on Python 1.6.1 that incorporate non-separable material that was previously distributed under the GNU General Public License (GPL), the law of the Commonwealth of Virginia shall govern this License Agreement only as to issues arising under or with respect to Paragraphs 4, 5, and 7 of this License Agreement. Nothing in this License Agreement shall be deemed to create any relationship of ag"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 138,
      "text": "icense Agreement only as to issues arising under or with respect to Paragraphs 4, 5, and 7 of this License Agreement. Nothing in this License Agreement shall be deemed to create any relationship of agency, partnership, or joint venture between CNRI and Licensee. This License Agreement does not grant permission to use CNRI trademarks or trade name in a trademark sense to endorse or promote products or services of Licensee, or any third party. 8. By clicking on the \"ACCEPT\" button where indicated, or by copying, installing or otherwise using Python 1.6.1, Licensee agrees to be bound by the terms and conditions of this License Agreement. C.2.4CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2 Copyright © 1991 - 1995, Stichting Mathematisch Centrum Amsterdam, The Netherlands. All rights reserved. Permission to use, copy, modify, and distribute this software and its documentation for any purpose and without fee is hereby granted, provided that the above copyright notice appear in all copies and that both that copyright notice and this permission notice appear in supporting documentation, and that the name of Stichting Mathematisch Centrum or CWI not be used in advertising or publicity p"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 138,
      "text": " and that both that copyright notice and this permission notice appear in supporting documentation, and that the name of Stichting Mathematisch Centrum or CWI not be used in advertising or publicity pertaining to distribution of the software without specific, written prior permission. (continues on next page) 132 Appendix C. History and License"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 139,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) STICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. C.3Licenses and Acknowledgements for Incorporated Software This section is an incomplete, but growing list of licenses and acknowledgements for third-party software incorporated in the Python distribution. C.3.1Mersenne Twister The_random module includes code based on a download from http://www.math.sci.hiroshima-u.ac.jp/ ~m-mat/MT/MT2002/emt19937ar.html . The following are the verbatim comments from the original code: A C-program for MT19937, with initialization improved 2002/1/26. Coded by Takuji Nishimura and Makoto Matsumoto. Before using, initialize the state by using init_genrand(seed) or init_by_array(init_key, key_length). Copyright (C) 1997"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 139,
      "text": "ialization improved 2002/1/26. Coded by Takuji Nishimura and Makoto Matsumoto. Before using, initialize the state by using init_genrand(seed) or init_by_array(init_key, key_length). Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura, All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. The names of its contributors may not be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 139,
      "text": "ARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS (continues on next page) C.3. Licenses and Acknowledgements for Incorporated Software 133"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 140,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Any feedback is very welcome. http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space) C.3.2Sockets Thesocketmodule uses the functions, getaddrinfo() , andgetnameinfo() , which are coded in separate source ﬁles from the WIDE Project, http://www.wide.ad.jp/ . Copyright (C) 1995, 1996, 1997, and 1998 WIDE Project. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. Neither the name of the project nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 140,
      "text": "er the name of the project nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. C.3.3Asynchronous socket services Theasynchat andasyncore modules contain the following notice: Copyright 1996 by Sam Rushing All Rights Reserved Permission to use, copy, modify, and distribute this software and its documentation for any purpose and without fee is hereby granted, provid"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 140,
      "text": " notice: Copyright 1996 by Sam Rushing All Rights Reserved Permission to use, copy, modify, and distribute this software and its documentation for any purpose and without fee is hereby granted, provided that the above copyright notice appear in all copies and that both that copyright notice and this permission notice appear in supporting documentation, and that the name of Sam Rushing not be used in advertising or publicity pertaining to (continues on next page) 134 Appendix C. History and License"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 141,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) distribution of the software without specific, written prior permission. SAM RUSHING DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL SAM RUSHING BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. C.3.4Cookie management Thehttp.cookies module contains the following notice: Copyright 2000 by Timothy O'Malley <timo@alum.mit.edu> All Rights Reserved Permission to use, copy, modify, and distribute this software and its documentation for any purpose and without fee is hereby granted, provided that the above copyright notice appear in all copies and that both that copyright notice and this permission notice appear in supporting documentation, and that the name of Timothy O'Malley not be used in advertising or publicity pertaining to distribution of the software without specific, written prior permission. Timothy O"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 141,
      "text": "supporting documentation, and that the name of Timothy O'Malley not be used in advertising or publicity pertaining to distribution of the software without specific, written prior permission. Timothy O'Malley DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL Timothy O'Malley BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. C.3.5Execution tracing Thetracemodule contains the following notice: portions copyright 2001, Autonomous Zones Industries, Inc., all rights... err... reserved and offered to the public under the terms of the Python 2.2 license. Author: Zooko O'Whielacronx http://zooko.com/ mailto:zooko@zooko.com Copyright 2000, Mojam Media, Inc., all rights reserved. Author: Skip Montanaro Copyright 1999, Bioreason, Inc., all rights reserved. Author: Andrew Dalke (continues on next page) C.3. Licenses and Acknowledgements for Incorporated Software 135"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 142,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) Copyright 1995-1997, Automatrix, Inc., all rights reserved. Author: Skip Montanaro Copyright 1991-1995, Stichting Mathematisch Centrum, all rights reserved. Permission to use, copy, modify, and distribute this Python software and its associated documentation for any purpose without fee is hereby granted, provided that the above copyright notice appears in all copies, and that both that copyright notice and this permission notice appear in supporting documentation, and that the name of neither Automatrix, Bioreason or Mojam Media be used in advertising or publicity pertaining to distribution of the software without specific, written prior permission. C.3.6UUencode and UUdecode functions Theuumodule contains the following notice: Copyright 1994 by Lance Ellinghouse Cathedral City, California Republic, United States of America. All Rights Reserved Permission to use, copy, modify, and distribute this software and its documentation for any purpose and without fee is hereby granted, provided that the above copyright notice appear in all copies and that both that copyright notice and this permission notice appear in supporting "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 142,
      "text": "on for any purpose and without fee is hereby granted, provided that the above copyright notice appear in all copies and that both that copyright notice and this permission notice appear in supporting documentation, and that the name of Lance Ellinghouse not be used in advertising or publicity pertaining to distribution of the software without specific, written prior permission. LANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE CENTRUM BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. Modified by Jack Jansen, CWI, July 1995: - Use binascii module to do the actual line-by-line conversion between ascii and binary. This results in a 1000-fold speedup. The C version is still 5 times faster, though. - Arguments more compliant with Python standard C.3.7XML Remote Procedure Calls Thexmlrpc.client module contains the following notice: The XML"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 142,
      "text": "d speedup. The C version is still 5 times faster, though. - Arguments more compliant with Python standard C.3.7XML Remote Procedure Calls Thexmlrpc.client module contains the following notice: The XML-RPC client interface is Copyright (c) 1999-2002 by Secret Labs AB Copyright (c) 1999-2002 by Fredrik Lundh By obtaining, using, and/or copying this software and/or its (continues on next page) 136 Appendix C. History and License"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 143,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) associated documentation, you agree that you have read, understood, and will comply with the following terms and conditions: Permission to use, copy, modify, and distribute this software and its associated documentation for any purpose and without fee is hereby granted, provided that the above copyright notice appears in all copies, and that both that copyright notice and this permission notice appear in supporting documentation, and that the name of Secret Labs AB or the author not be used in advertising or publicity pertaining to distribution of the software without specific, written prior permission. SECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT- ABILITY AND FITNESS. IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. C.3.8test_epoll Thetest_epoll module contains t"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 143,
      "text": "TS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. C.3.8test_epoll Thetest_epoll module contains the following notice: Copyright (c) 2001-2006 Twisted Matrix Laboratories. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 143,
      "text": "ICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. C.3.9Select kqueue Theselectmodule contains the following notice for the kqueue interface: Copyright (c) 2000 Doug White, 2006 James Knight, 2007 Christian Heimes All rights reserved. (continues on next page) C.3. Licenses and Acknowledgements for Incorporated Software 137"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 144,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF T"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 144,
      "text": "ATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. C.3.10SipHash24 The ﬁlePython/pyhash.c contains Marek Majkowski’ implementation of Dan Bernstein’s SipHash24 algo- rithm. The contains the following note: <MIT License> Copyright (c) 2013 Marek Majkowski <marek@popcount.org> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. </MIT License> Original location: https://github.com/majek/csiphash/ Solution inspired by code from: Samuel Neves (supercop/crypto_auth/sip"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 144,
      "text": "luded in all copies or substantial portions of the Software. </MIT License> Original location: https://github.com/majek/csiphash/ Solution inspired by code from: Samuel Neves (supercop/crypto_auth/siphash24/little) djb (supercop/crypto_auth/siphash24/little2) Jean-Philippe Aumasson (https://131002.net/siphash/siphash24.c) C.3.11strtod and dtoa The ﬁlePython/dtoa.c , which supplies C functions dtoa and strtod for conversion of C doubles to and from strings, is derived from the ﬁle of the same name by David M. Gay, currently available from http: //www.netlib.org/fp/ . The original ﬁle, as retrieved on March 16, 2009, contains the following copyright and licensing notice: 138 Appendix C. History and License"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 145,
      "text": "Python Tutorial, Release 3.7.0 /**************************************************************** * * The author of this software is David M. Gay. * * Copyright (c) 1991, 2000, 2001 by Lucent Technologies. * * Permission to use, copy, modify, and distribute this software for any * purpose without fee is hereby granted, provided that this entire notice * is included in all copies of any software which is or includes a copy * or modification of this software and in all copies of the supporting * documentation for such software. * * THIS SOFTWARE IS BEING PROVIDED \"AS IS\", WITHOUT ANY EXPRESS OR IMPLIED * WARRANTY. IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY * OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE. * ***************************************************************/ C.3.12OpenSSL The modules hashlib,posix,ssl,cryptuse the OpenSSL library for added performance if made available by the operating system. Additionally, the Windows and Mac OS X installers for Python may include a copy of the OpenSSL libraries, so we include a copy of the OpenSSL license here: LICENSE ISSUES ============== T"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 145,
      "text": "ting system. Additionally, the Windows and Mac OS X installers for Python may include a copy of the OpenSSL libraries, so we include a copy of the OpenSSL license here: LICENSE ISSUES ============== The OpenSSL toolkit stays under a dual license, i.e. both the conditions of the OpenSSL License and the original SSLeay license apply to the toolkit. See below for the actual license texts. Actually both licenses are BSD-style Open Source licenses. In case of any license issues related to OpenSSL please contact openssl-core@openssl.org. OpenSSL License --------------- /* ==================================================================== * Copyright (c) 1998-2008 The OpenSSL Project. All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: * * 1. Redistributions of source code must retain the above copyright * notice, this list of conditions and the following disclaimer. * * 2. Redistributions in binary form must reproduce the above copyright * notice, this list of conditions and the following disclaimer in * the documentation and/or other materials provided with the * dis"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 145,
      "text": ". Redistributions in binary form must reproduce the above copyright * notice, this list of conditions and the following disclaimer in * the documentation and/or other materials provided with the * distribution. * * 3. All advertising materials mentioning features or use of this * software must display the following acknowledgment: * \"This product includes software developed by the OpenSSL Project * for use in the OpenSSL Toolkit. (http://www.openssl.org/)\" (continues on next page) C.3. Licenses and Acknowledgements for Incorporated Software 139"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 146,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) * * 4. The names \"OpenSSL Toolkit\" and \"OpenSSL Project\" must not be used to * endorse or promote products derived from this software without * prior written permission. For written permission, please contact * openssl-core@openssl.org. * * 5. Products derived from this software may not be called \"OpenSSL\" * nor may \"OpenSSL\" appear in their names without prior written * permission of the OpenSSL Project. * * 6. Redistributions of any form whatsoever must retain the following * acknowledgment: * \"This product includes software developed by the OpenSSL Project * for use in the OpenSSL Toolkit (http://www.openssl.org/)\" * * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE OpenSSL PROJECT OR * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; * LOSS OF USE, DATA, OR PROFITS; OR BUSINE"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 146,
      "text": "Y DIRECT, INDIRECT, INCIDENTAL, * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED * OF THE POSSIBILITY OF SUCH DAMAGE. * ==================================================================== * * This product includes cryptographic software written by Eric Young * (eay@cryptsoft.com). This product includes software written by Tim * Hudson (tjh@cryptsoft.com). * */ Original SSLeay License ----------------------- /* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com) * All rights reserved. * * This package is an SSL implementation written * by Eric Young (eay@cryptsoft.com). * The implementation was written so as to conform with Netscapes SSL. * * This library is free for commercial and non-commercial use as long as * the following conditions are aheared to. The following conditions * apply to all code found in this distribution, be it the RC4, RSA, "
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 146,
      "text": "ibrary is free for commercial and non-commercial use as long as * the following conditions are aheared to. The following conditions * apply to all code found in this distribution, be it the RC4, RSA, * lhash, DES, etc., code; not just the SSL code. The SSL documentation * included with this distribution is covered by the same copyright terms * except that the holder is Tim Hudson (tjh@cryptsoft.com). * * Copyright remains Eric Young's, and as such any Copyright notices in * the code are not to be removed. * If this package is used in a product, Eric Young should be given attribution * as the author of the parts of the library used. (continues on next page) 140 Appendix C. History and License"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 147,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) * This can be in the form of a textual message at program startup or * in documentation (online or textual) provided with the package. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: * 1. Redistributions of source code must retain the copyright * notice, this list of conditions and the following disclaimer. * 2. Redistributions in binary form must reproduce the above copyright * notice, this list of conditions and the following disclaimer in the * documentation and/or other materials provided with the distribution. * 3. All advertising materials mentioning features or use of this software * must display the following acknowledgement: * \"This product includes cryptographic software written by * Eric Young (eay@cryptsoft.com)\" * The word 'cryptographic' can be left out if the rouines from the library * being used are not cryptographic related :-). * 4. If you include any Windows specific code (or a derivative thereof) from * the apps directory (application code) you must include an acknowledgement: * \"This product include"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 147,
      "text": "tographic related :-). * 4. If you include any Windows specific code (or a derivative thereof) from * the apps directory (application code) you must include an acknowledgement: * \"This product includes software written by Tim Hudson (tjh@cryptsoft.com)\" * * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF * SUCH DAMAGE. * * The licence and distribution terms for any publically available version or * derivative of this code cannot be changed. i.e. this code cannot simply be * copied and put under another distribution li"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 147,
      "text": "* The licence and distribution terms for any publically available version or * derivative of this code cannot be changed. i.e. this code cannot simply be * copied and put under another distribution licence * [including the GNU Public Licence.] */ C.3.13expat Thepyexpat extension is built using an included copy of the expat sources unless the build is conﬁgured --with-system-expat : Copyright (c) 1998, 1999, 2000 Thai Open Source Software Center Ltd and Clark Cooper Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: (continues on next page) C.3. Licenses and Acknowledgements for Incorporated Software 141"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 148,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. C.3.14libﬃ The_ctypes extension is built using an included copy of the libﬃ sources unless the build is conﬁgured --with-system-libffi : Copyright (c) 1996-2008 Red Hat, Inc and others. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ``Software''), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom th"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 148,
      "text": "Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. C.3.15zlib Thezlibextension is built using an included copy of the zlib sources if the zlib version found on the system is too old to be used for the build: Copyright (C) 1995-2011 Jean-loup Gailly and Mark Adler This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for an"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 148,
      "text": "ed for the build: Copyright (C) 1995-2011 Jean-loup Gailly and Mark Adler This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software. Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions: (continues on next page) 142 Appendix C. History and License"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 149,
      "text": "Python Tutorial, Release 3.7.0 (continued from previous page) 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required. 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software. 3. This notice may not be removed or altered from any source distribution. Jean-loup Gailly Mark Adler jloup@gzip.org madler@alumni.caltech.edu C.3.16cfuhash The implementation of the hash table used by the tracemalloc is based on the cfuhash project: Copyright (c) 2005 Don Owens All rights reserved. This code is released under the BSD license: Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/o"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 149,
      "text": " of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of the author nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. C.3. Licenses a"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 149,
      "text": "HETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. C.3. Licenses and Acknowledgements for Incorporated Software 143"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 150,
      "text": "Python Tutorial, Release 3.7.0 C.3.17libmpdec The_decimal module is built using an included copy of the libmpdec library unless the build is conﬁgured --with-system-libmpdec : Copyright (c) 2008-2016 Stefan Krah. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS I"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 150,
      "text": "ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 144 Appendix C. History and License"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 151,
      "text": "APPENDIX D COPYRIGHT Python and this documentation is: Copyright © 2001-2018 Python Software Foundation. All rights reserved. Copyright © 2000 BeOpen.com. All rights reserved. Copyright © 1995-2000 Corporation for National Research Initiatives. All rights reserved. Copyright © 1991-1995 Stichting Mathematisch Centrum. All rights reserved. See History and License for complete license and permissions information. 145"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 152,
      "text": "Python Tutorial, Release 3.7.0 146 Appendix D. Copyright"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 153,
      "text": "INDEX Symbols * statement, 26 ** statement, 27 -> (return annotation assignment), 28 ..., 113 __all__, 50 __future__, 117 __slots__, 123 >>>, 113 2to3, 113 A abstract base class, 113 annotation, 113 annotations function, 28 argument, 113 asynchronous context manager, 114 asynchronous generator, 114 asynchronous generator iterator, 114 asynchronous iterable, 114 asynchronous iterator, 114 attribute, 114 awaitable, 114 B BDFL, 114 binary ﬁle, 114 built-in function help,83 open,57 builtins module, 47 bytecode, 115 bytes-like object, 114 C C-contiguous, 115 class, 115 class variable, 115coding style,29 coercion, 115 complex number, 115 context manager, 115 contiguous, 115 coroutine, 115 coroutine function, 115 CPython, 115 D decorator, 115 descriptor, 116 dictionary, 116 dictionary view, 116 docstring, 116 docstrings, 22,28 documentation strings, 22,28 duck-typing, 116 E EAFP, 116 environment variable PATH,45,111 PYTHONPATH, 45,47 PYTHONSTARTUP, 111 expression, 116 extension module, 116 F f-string, 116 ﬁle object,57 ﬁle object, 116 ﬁle-like object, 117 ﬁnder, 117 ﬂoor division, 117 for statement, 19 Fortran contiguous, 115 function, 117 annotations, 28 147"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 154,
      "text": "Python Tutorial, Release 3.7.0 function annotation, 117 G garbage collection, 117 generator, 117,117 generator expression, 117,117 generator iterator, 117 generic function, 118 GIL, 118 global interpreter lock, 118 H hash-based pyc, 118 hashable, 118 help built-in function, 83 I IDLE, 118 immutable, 118 import path, 118 importer, 118 importing, 118 interactive, 118 interpreted, 118 interpreter shutdown, 119 iterable, 119 iterator, 119 J json module, 59 K key function, 119 keyword argument, 119 L lambda, 119 LBYL, 119 list, 120 list comprehension, 120 loader, 120 M mapping, 120 meta path ﬁnder, 120 metaclass, 120 method, 120 object,73 method resolution order, 120 module, 120 builtins, 47json,59 search path, 45 sys,46 module spec, 120 MRO, 120 mutable, 120 N named tuple, 120 namespace, 121 namespace package, 121 nested scope, 121 new-style class, 121 O object, 121 ﬁle,57 method, 73 open built-in function, 57 P package, 121 parameter, 121 PATH,45,111 path module search, 45 path based ﬁnder, 122 path entry, 122 path entry ﬁnder, 122 path entry hook, 122 path-like object, 122 PEP, 122 portion, 122 positional argument, 122 provisional API, 122 provisional package, 122 Python 3000, 122 Py"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 154,
      "text": "r, 122 path entry, 122 path entry ﬁnder, 122 path entry hook, 122 path-like object, 122 PEP, 122 portion, 122 positional argument, 122 provisional API, 122 provisional package, 122 Python 3000, 122 Python Enhancement Proposals PEP 1,122 PEP 238, 117 PEP 278, 125 PEP 302, 117,120 PEP 3107, 28 PEP 3116, 125 PEP 3147, 46 PEP 3155, 123 PEP 343, 115 PEP 362, 114,122 PEP 411, 122 PEP 420, 117,121,122 PEP 443, 118 PEP 451, 117 PEP 484, 28,113,117,124,125 148 Index"
    },
    {
      "source": "Python Ebook 1.pdf",
      "page": 155,
      "text": "Python Tutorial, Release 3.7.0 PEP 492, 114,115 PEP 498, 116 PEP 519, 122 PEP 525, 114 PEP 526, 113,125 PEP 8,29 Pythonic, 122 PYTHONPATH, 45,47 PYTHONSTARTUP, 111 Q qualiﬁed name, 123 R reference count, 123 regular package, 123 RFC RFC 2822, 87 S search path, module, 45 sequence, 123 single dispatch, 123 slice, 123 special method, 124 statement, 124 *,26 **,27 for,19 strings, documentation, 22,28 struct sequence, 124 style coding,29 sys module, 46 T text encoding, 124 text ﬁle, 124 triple-quoted string, 124 type, 124 type alias, 124 type hint, 124 U universal newlines, 124 V variable annotation, 125 virtual environment, 125 virtual machine, 125 Z Zen of Python, 125 Index 149"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 4,
      "text": "Índice Índice Por quê programar? E por quê em Python? Metodologia 1 – Introdução Por quê Python? Um pouco de história Guido V an Rossum A filosofia do Python Empresas que usam Python O futuro da linguagem Python será o limite? 2 – Ambiente de programação Linguagens de alto, baixo nível e de máquina Ambientes de desenvolvimento integrado Principais IDEs 3 – Lógica de programação Algoritmos Sintaxe em Python Palavras reservadas Análise léxica Indentação 4 – Estrutura básica de um programa 5 – T ipos de dados 6 – Comentários 7 – V ariáveis / objetos Declarando uma variável Declarando múltiplas variáveis Declarando múltiplas variáveis (de mesmo tipo) 8 – Funções Básicas Função print( ) Função input( )"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 5,
      "text": "Explorando a função print( ) Interação entre variáveis Conversão de tipos de dados 9 – Operadores Operadores de Atribuição Atribuições especiais Operadores aritméticos Operadores Lógicos Tabela verdade Operadores de membro Operadores relacionais Operadores usando variáveis Operadores usando condicionais Operadores de identidade 10 – Estruturas condicionais Ifs, elifs e elses And e Or dentro de condicionais Condicionais dentro de condicionais Simulando switch/case 11 - Estruturas de repetição While For 12 – Strings Trabalhando com strings Formatando uma string Convertendo uma string para minúsculo Convertendo uma string para maiúsculo Buscando dados dentro de uma string Desmembrando uma string Alterando a cor de um texto Alterando a posição de exibição de um texto Formatando a apresentação de números em uma string 13 – Listas Adicionando dados manualmente"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 6,
      "text": "Removendo dados manualmente Removendo dados via índice Verificando a posição de um elemento Verificando se um elemento consta na lista Formatando dados de uma lista Listas dentro de listas Tuplas Pilhas Adicionando um elemento ao topo de pilha Removendo um elemento do topo da pilha Consultando o tamanho da pilha 14 – Dicionários Consultando chaves/valores de um dicionário Consultando as chaves de um dicionário Consultando os valores de um dicionário Mostrando todas chaves e valores de um dicionário Manipulando dados de um dicionário Adicionando novos dados a um dicionário 15 – Conjuntos numéricos União de conjuntos Interseção de conjuntos Verificando se um conjunto pertence ao outro Diferença entre conjuntos 16 – Interpolação Avançando com interpolações 17 – Funções Funções predefinidas Funções personalizadas Função simples, sem parâmetros Função composta, com parâmetros Função composta, com *args e **kwargs 18 – Comandos dir( ) e help( ) 19 – Builtins e bibliotecas pré-alocadas Importando bibliotecas"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 7,
      "text": "20 – Módulos e pacotes Modularização 21 – Programação orientada a objetos Classes Definindo uma classe Alterando dados/valores de uma instância Aplicando recursividade Herança Polimorfismo Encapsulamento 22 – T racebacks / exceções Comandos try , except e finally 23 – Considerações finais"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 9,
      "text": "Por quê programar? E por quê em Python? No âmbito da tecnologia da informação, basicamente começamos a dividir seus nichos entre a parte física (hardware) e sua parte lógica (software), e dentro de cada uma delas existe uma infinidade de subdivisões, cada uma com suas particularidades e usabilidades diferentes. O aspirante a profissional de T.I. pode escolher entre várias muitas áreas de atuação, e mesmo escolhendo um nicho bastante específico ainda assim há um mundo de conhecimento a ser explorado. Dentro da parte lógica um dos diferenciais é a área da programação, tanto pela sua complexidade quanto por sua vasta gama de possibilidades. Sendo assim um dos diferenciais mais importantes do profissional de tecnologia moderno é o mesmo ter certa bagagem de conhecimento de programação. No ambito acadêmico existem diversos cursos, que vão de análise e desenvolvimento de sistemas até engenharia da computaç ão, e da maneira como esses cursos são organizados você irá reparar que sempre haverá em sua grade curricular uma carga horária dedicada a programação. No Brasil a linguagem de programação mais popularmente utilizada nos cursos de tecnologia é C ou uma de suas vertentes, isso se dá pel"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 9,
      "text": "em sua grade curricular uma carga horária dedicada a programação. No Brasil a linguagem de programação mais popularmente utilizada nos cursos de tecnologia é C ou uma de suas vertentes, isso se dá pelo fato de C ser uma linguagem ainda hoje bastante popular e que pode servir de base para tantas outras. Quando estamos falando especificamente da área da programação existe uma infinidade de linguagens de programação que foram sendo desenvolv idas ao longo do tempo para suprir a necessidade de criação de softwares que atendessem uma determinada demanda. Poderíamos dedicar um capítulo inteiro mostrando apenas as principais e suas características, mas ao invés disso vamos nos focar logo em Python."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 10,
      "text": "Hoje com a chamada internet das coisas, data science, machine learning, além é claro da criação de softwares, jogos e sistemas, mais do que nunca foi preciso profissionais da área que soubessem programação. Python é uma linguagem idealizada e criada na década de 80 mas que se mostra hoje uma das mais modernas e promissoras, devido sua facilidade de aprendizado e sua capacidade de se adaptar a qualquer situação. Se você buscar qualquer comparativo de Python em relação a outras linguagens de programação garanto que em 95% dos casos Python sairá em vantagem. Python pode ser a sua linguagem de programação definitiva, ou abrir muitas portas para aprender outras mais, já que aqui não existe uma real concorrência, a melhor linguagem sempre será aquela que irá se adaptar melhor ao programador e ao projeto a ser desenvolvido. Sendo assim, independentemente se você já é programador de outra linguagem ou se você está começando do zero, espero que o conteúdo deste pequeno livro seja de grande valia para seu aprendizado dentro dessa área incrível."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 11,
      "text": "Metodologia Este material foi elaborado com uma metodologia autodidata, de forma que cada conceito será explicado de forma progressiva, sucinta e exemplificado em seguida. Cada tópico terá seus exemplos e devida explicação, assim como sempre que necessário você terá o código na íntegra e em seguida sua ‘engenharia reversa’, explicando ponto a ponto o que está sendo feito e os porquês de cada argumento dentro do código. Cada tópico terá ao menos um exemplo; Cada termo dedicado a programação terá destaque para que você o diferencie em meio ao texto ou explicações. Desde já tenha em mente que aprender a programar requer atenção e mais do que isso, muita prática. Sendo assim, recomendo que sempre que possível pratique recriando os códigos de exemplo e não tenha medo que testar diferentes possibilidades em cima deles. Dadas as considerações iniciais, mãos à obra!!!"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 13,
      "text": "1 – Introdução Quando estamos iniciando nossa jornada de aprendizado de uma linguagem de programação é importante que tenhamos alguns conceitos bem claros já logo de início. O primeiro deles é que aprender uma linguagem de programação não é muito diferente do que aprender outro idioma falado, haverá uma sintaxe e uma sequência lógica de argumentos a se respeitar a fim de que seus comandos façam sentido e funcionem. Com certeza quando você começou a aprender inglês na escola você começou pelo verbo to be e posteriorm ente foi incrementando com novos conceitos e vocabulário, até ter certo domínio sobre o mesmo. Em uma linguagem de programação não é muito diferente, há uma sintaxe, que é a maneira com que o interpretador irá reconhecer seus comandos, e há também uma lógica de programação a ser seguida uma vez que queremos através de linhas/blocos de código dar instruções ao computador e chegar a algum resultado. Se você pesquisar , apena s por curiosidade, sobre as linguagens de programação você verá que outrora elas eram extremamente complexas, com uma curva de aprendizado longo e que por fim eram pouco eficientes ou de uso bastante restrito. As linguagens de alto nível, como Python,"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 13,
      "text": "ão você verá que outrora elas eram extremamente complexas, com uma curva de aprendizado longo e que por fim eram pouco eficientes ou de uso bastante restrito. As linguagens de alto nível, como Python, foram se modernizando de forma a que hoje é possível fazer muito com pouco, de forma descomplicada e com poucas linhas de código já estaremos criando programas e/ou fazendo a manutenção dos mesmos. Se você realmente tem interesse por essa área arrisco dizer que você irá adorar Python e programação em geral. Então chega de enrolação e vamos começar ... do começo."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 14,
      "text": "Por quê Python? Como já mencionei anteriormente, um dos grandes diferenciais do Python, que normalmente é o chamativo inicial por quem busca uma linguagem de programação, é sua facilidade, seu potencial de fazer mais com menos. Não desmerecendo outras linguagens, mas é fato que Python foi desenvolvida para ser descomplicada. E por quê fazer as coisas da forma mais difícil se existem ferramentas para torná-las mais fáceis? Existe uma piada interna do pessoal que programa em Python que diz: “- A vida é curta demais para programar em outra linguagem senão em Python.“ Como exemplo veja três situações, um simples programa que exibe em tela a mensagem “Olá Mundo!!!” escrito em C, em JAVA, e porfim em Python. Olá Mundo!!! em C #include <stdio.h> int main ( void) { printf( \"Ola Mundo!!! \\n\"); return 0; } Olá Mundo!!! em JAVA public class hello { public static void main ( String arg []){ System.out.println( \"Olá Mundo!!!\" ); } } Olá Mundo!!! em Python"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 15,
      "text": "print('Olá Mundo!!!' ) Em todos os exemplos acima o retorno será uma mensagem exibida em tela para o usuário dizendo: Olá Mundo!!! (*Garanto que agora a piada fez sentido...) De forma geral o primeiro grande destaque do Python frente a outras linguagens é sua capacidade de fazer mais com menos, e em todas as situações que conheço este padrão se repetirá, será muito mais fácil, mais rápido, com menos linhas de código, programar em Python. Outro grande diferencial do Python em relação a outras linguagens de programação é o fato dela ser uma linguagem interpretada, em outras palavras, o ambiente de programação que você irá trabalhar tem capac idade de rodar o código em tempo real e de forma nativa, diferente de outras linguagens que tem que estar emulando uma série de parâmetros do sistema ou até mesmo compilando o código para que aí sim seja possível testá-lo. Outro diferencial é a sua simplicidade sintática, posteriormente você aprenderá sobre a sintaxe Python, mas por hora apenas imagine que em programação (outras linguagens) muitas vezes temos uma grande idéia e ao codificá-la acabamos nos frustrando porque o código simplesmente não funciona, e em boa parte das vezes é por conta d"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 15,
      "text": "ne que em programação (outras linguagens) muitas vezes temos uma grande idéia e ao codificá-la acabamos nos frustrando porque o código simplesmente não funciona, e em boa parte das vezes é por conta de um ponto ou vírgula que ficou sobrando ou faltando no código. Python por ser uma linguagem interpratada deveria sofrer ainda mais com esse problemas mas o que ocorre é ao contrário, o interpretador foca nos coman dos e seus parâmetros, os pequenos erros de sintaxe não farão com que o código não funcione... Por fim, outro grande diferen cial do Python se comparado a outras linguage ns de programação é que ela nativamente possui um núcleo capaz de trabalhar com uma quantidade enorme de dados de forma bastante tranquila, o que a fez virar a queridinh a de quem trabalha com data science, machine learning, blockchain, e outras"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 16,
      "text": "tecnologias que trabalham e processam volumes enormes de dados. Na verdade, eu poderia escrever outro livro só comparando Python com outras linguagens e mostrando suas vantagens, mas acho que por hora já é o suficiente para lhe deixar empolgado, e ao longo desse curso você irá descobrir um potencial muito grande em Python."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 17,
      "text": "Um pouco de história Em 1989, através do Instituto de Pesquisa Nacional para Matemática e Ciência da Computação, Guido Van Rossum publicava a primeira versão do Python. Derivada do C, a construção do Python se deu inicialmente para ser uma alternativa mais simples e produtiva do que o próprio C. Por fim em 1991 a linguagem Python ganhava sua “versão estáve l” e já funcional, começando a gerar também uma comunidade dedicada a aprimorá-la. Somente em 1994 foi lançada sua versão 1.0, ou seja, sua primeira versão oficial e não mais de testes, e de lá para cá houveram gigantecas melhorias na linguagem em si, seja em estrutura quanto em bibliotecas e plugins criadas pela comunidade para implementar novos recursos a mesma e a tornar ainda mais robusta. Atualmente o Python está integrado em praticamente todas novas tecnologias, assim como é muito fácil implementá-la em sistemas “obsoletos”. Grande parte das distribuições Linux possuem Python nativamente e seu reconhecimento já fez com que, por exemplo, virasse a linguagem padrão do curso de ciências da computação do MIT desde 2009."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 18,
      "text": "Guido V an Rossum Não posso deixar de falar, ao menos um pouco, sobre a mente por tras da criação do Python, este cara chamado Guido Van Rossum. Guido é um premiado matemático e programador que hoje se dedica ao seu emprego atual na Dropbox. Guido já trabalhou em grandes empresas no passado e tem um grande reconhecimento por estudantes e profissionais da computação. Dentre outros projetos, Guido em 1991 lançou a primeira versão de sua própria lingua gem de programação, o Python, que desde lá sofreu inúmeras melhorias tanto pelos seus desenvolvedores quanto pela comunidade e ainda hoje ele continua supervisionando o desenvolvimento da linguagem Python, tomando as decisões quando necessário."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 19,
      "text": "A filosofia do Python Python tem uma filosofia própria, ou seja, uma série de porquês que são responsáveis por Python ter sido criada e por não ser “só mais uma linguagem de programação”. Por T im Peters, um influente programador de Python 1. Bonito é melhor que feio. 2. Explícito é melhor que implícito. 3. Simples é melhor que complexo. 4. Complexo é melhor que complicado. 5. Plano é melhor que aglomerado. 6. Escasso é melhor que denso. 7. O que conta é a legibilidade. 8. Casos especiais não são especiais o bastante para quebrar as regras. 9. A natureza prática derruba a teórica. 10. Erros nunca deveriam passar silenciosamente. 11. a menos que explicitamente silenciasse. 12. Diante da ambigüidade, recuse a tentação de adivinhar . 13. Deveria haver um -- e preferivelmente só um -- modo óbvio para fazer as coisas. 14. Embora aquele modo possa não ser óbvio a menos que você seja holandês. 15. Agora é melhor que nunca. 16. Embora nunca é freqüentemente melhor que *agora mesmo*. 17. Se a implementação é difícil para explicar , isto é uma idéia ruim. 18. Se a implementação é fácil para explicar , pode ser uma idéia boa. 19. Namespaces são uma grande idéia -- façamos mais desses! Essa fi"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 19,
      "text": "mplementação é difícil para explicar , isto é uma idéia ruim. 18. Se a implementação é fácil para explicar , pode ser uma idéia boa. 19. Namespaces são uma grande idéia -- façamos mais desses! Essa filosofia é o que fez com que se agregasse uma comunidade enorme disposta a investir seu tempo em Python. Em"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 20,
      "text": "suma, programar em Python deve ser simples, de fácil aprendizado, com código de fácil leitura, enxuto mas inteligível, capaz de se adaptar a qualquer necessidade."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 21,
      "text": "Empresas que usam Python Quando falamos de linguagens de programação, você já deve ter reparado que existem inúmeras delas, mas basicamente podemos dividí-las em duas grandes categorias: Linguagens específicas e/ou Linguagens Generalistas. Uma linguagem específica, como o próprio nome sugere, é aquela linguagem que foi projetada para atender a um determinado propósito fixo, como exemplo podemos citar o PHP e o HTML, que são linguagens específicas para web. Já linguagens generalistas são aquelas que tem sua aplica bilidade em todo e qualquer propósito, e nem por isso ser inferior às específicas. No caso do Python, ela é uma linguagem generalista bastante mode rna, é possível criar qualquer tipo de sistema para qualquer propósito e platafo rma a partir dela. Só para citar alguns exemplos, em Python é possível programar para qualquer sistema operacional, web, mobile, data science, machine learning, blockchain, etc... coisa que outras linguagens de forma nativa não são suficientes ou práticas para o programador , necessitando uma série de gambiarras para realizar sua codificação, tornando o processo mais difícil. Como exemplo de aplicações que usam parcial ou totalmente Python podemos "
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 21,
      "text": "cas para o programador , necessitando uma série de gambiarras para realizar sua codificação, tornando o processo mais difícil. Como exemplo de aplicações que usam parcial ou totalmente Python podemos citar YouTube, Google, Instagram, Dropbox, Quora, Pinterest, Spotify , Reddit, Blender 3D, BitTorrent, etc... Apenas como curiosidade, em computação gráfica depen dendo sua aplicação uma engine pode trabalhar com volumosos dados de informação, processamento e renderização, a Light and Magic, empresa subsidiária da Disney , que produz de maneira absurda animações e filmes com muita computação gráfica, usa de motores gráficos escritos e processados em Python devido sua performance."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 22,
      "text": "O futuro da linguagem De acordo com as estatísticas de sites especializa dos, Python é uma das linguagens com maior crescimento em relação às demais no mesmo período, isto se deve pela popularização que a linguagem recebeu após justamente grandes empresas declarar que a adotaram e comunidades gigantescas se formarem para explorar seu potencial. Em países mais desenvolvidos tecnologicamente até mesmo escola s de ensino fundamental estão adotando o ensino de programação em sua grade de disciplinas, boa parte delas, ensinando nativamente Python. Por fim, podemos esperar para o futuro que a linguagem Python cresça exponencialmente, uma vez que novas áreas de atuação como data science e machine learning se popularizem ainda mais. Estudos indicam que para os próximos 10 anos cerca de um milhão de novas vagas surgirão demandando profissionais de tecnologia da área da programação, pode ter certeza que grande parcela desse público serão programadores com domínio em Python."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 23,
      "text": "Python será o limite? Esta é uma pergunta interessante de se fazer porque precisamos parar uns instantes e pensar no futuro. Raciocine que temos hoje um crescimento exponencial do uso de machine learning, data science, internet das coisas, logo, para o futuro podemos esperar uma demanda cada vez maior de processamento de dados, o que não nece ssariamente signifique que será mais complexo desenvolver ferramentas para suprir tal demanda. A versão 3 do Python é bastante robusta e consegue de forma natural já trabalhar com tais tecnologias. Devido a comunidade enorme que desenvolve para Python, podem os esperar que para o futuro haverão novas versões implementando novos recursos de forma natural. Será muito difícil vermos surgir outra linguagem “do zero” ou que tenha usabilidade parecida com Python. Se você olhar para trás verá uma série de linguagens que foram descontinuadas com o tempo, mesmo seus desenvolvedores insistindo e injetando tempo em dinheiro em seu desenvolvimento elas não eram modernas o suficiente. Do meu ponto de vista não consigo ver um cenário do futuro ao qual Python não consiga se adaptar . Entenda que na verdade não é uma questão de uma linguagem concorrer contra "
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 23,
      "text": "am modernas o suficiente. Do meu ponto de vista não consigo ver um cenário do futuro ao qual Python não consiga se adaptar . Entenda que na verdade não é uma questão de uma linguagem concorrer contra outra, na verdade independente de qual linguagem formos usar, precisamos de uma que seja capaz de se adaptar ao seu tempo e as nossas necessidades. Num futuro próximo nosso diferencial como profissionais da área de tecnologia será ter conhecimento sobre C#, Java ou Python. Garanto que você já sabe em qual delas estou apostando minhas fichas..."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 25,
      "text": "2 – Ambiente de programação Na linguagem Python, e, não diferente das outras linguagens de programação, quando partimos do campo das idéias para a prática, para codificação/programação não basta que tenhamos um computador rodando seu sistema operacional nativo. É importante começarmos a raciocinar que, a partir do momento que estamos entrando na programação de um sistema, estamos trabalhando com seu backend, ou seja, com o que está por trás das cortinas, com aquilo que o usuário final não tem acesso. Para isto, existe uma gama enorme de softwares e ferramentas que nos irão auxiliar a criar nossos programas e levá-los ao frontend."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 26,
      "text": "Linguagens de alto, baixo nível e de máquina Seguindo o raciocínio lógico do tópico anterior , agora entramos nos conceitos de linguagens de alto e baixo nível e posteriormente a linguagem de máquina. Quando estam os falando em linguagens de alto e baixo nível, estamos falando sobre o quão distante está a sintaxe do usuário. Para ficar mais claro, uma linguagem de alto nível é aquela mais próximo do usuário, que usa termos e conceitos normalmente vindos do inglês e que o usuário pode pegar qualquer bloco de código e o mesmo será legível e fácil de compreender . Em oposição ao conceito anterior , uma linguagem de baixo nível é aquela mais próxima da máquina, com instruções que fazem mais sentido ao interpretador do que ao usuário. Quando estam os programa ndo em Python estamos num ambiente de linguagem de alto nível, onde usaremos expressões em inglês e uma sintaxe fácil para por fim dar nossas instruções ao computador . Esta linguagem posteriormente será convertida em linguagem de baixo nível e por fim se tornará sequências de instruções para registradores e portas lógicas. Imagine que o comando que você digita para exibir um determinado texto em tela é convertido para um segundo c"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 26,
      "text": "o nível e por fim se tornará sequências de instruções para registradores e portas lógicas. Imagine que o comando que você digita para exibir um determinado texto em tela é convertido para um segundo código que o interpretador irá ler como bytecode, conv ertendo ele para uma linguagem de mais baixo nível chamada Asse mbly, que irá pegar tais instruções e conv erter para binário, para que por fim tais instruções virem sequências de chaveamento para portas lógicas do processador . Nos primórdios da computação se convertiam algoritmos em sequências de cartões perfu rados que iriam programar sequências de chaveamento em máquinas ainda valvuladas, com o surgimento dos transistores entramos na era da eletrônica digital onde foi possível miniaturizar os regis tradores, trabalhar com milhares deles de forma a realizar centenas de milhares de cálculos por segundo. Desenvolvemos linguagens de programação de alto nível para que"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 27,
      "text": "justamente facilitássemos a leitura e escrita de nossos códigos, porém a linguagem de máquina ainda é, e por muito tempo será, binário, ou seja, sequências de informações de zeros e uns que se convertem em pulsos ou ausência de pulsos elétricos nos transistores do processador ."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 28,
      "text": "Ambientes de desenvolvimento integrado Entendidos os conceitos de linguagens de alto e baixo nível e de máquina, por fim vamos falar sobre os IDEs, sigla para ambiente de desenvolvimento integrado. Já rodando nosso sistema operacional temos a frontend do sistema, ou seja, a capa ao qual o usuário tem acesso aos recursos do mesmo. Para que possamos ter acesso aos bastidores do sistema e por fim programar em cima dele, temos softwares específicos para isto, os chamados IDE’s. Nestes ambientes temos as ferramentas necessárias para tanto trabalhar a nível de código quanto para testar o funcionamento de nossos programas no sistema operacional. As IDEs vieram para integrar todos softwares necessá rios para esse processo de programação em um único ambiente, já houveram épocas onde se programava separado de onde se compilava, separado de onde se debugava e por fim separado de onde se rodava o programa , entenda que as ides unificam todas camadas necessárias para que possamos nos concentrar em escrever nosso s códigos e rodá-los ao final do processo. Entenda que é possíve l programar em qualquer editor de texto, como o próprio bloco de notas ou em um terminal, o uso de IDEs se dá pela facil"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 28,
      "text": "escrever nosso s códigos e rodá-los ao final do processo. Entenda que é possíve l programar em qualquer editor de texto, como o próprio bloco de notas ou em um terminal, o uso de IDEs se dá pela facilidade de possuir todo um espectro de ferramentas dedicadas em um mesmo lugar ."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 29,
      "text": "Principais IDEs Como mencionado no tópico anterior , as IDEs buscam unificar as ferramentas necessárias para facilitar a vida do programador , claro que é possível programar a partir de qualquer bloco de notas, mas visando ter um ambiente completo onde se possa usar diversas ferramentas, testar e compilar seu código, o uso de uma IDE é altamente recomendado. Existem diversas IDEs disponíveis no mercado, mas basicamente aqui irei recomendar duas delas. Pycharm – A IDE Pych arm desenvolv ida e mantida pela JetBrains, é uma excelente opção no sentido de que poss ui versão completamente gratuita, é bastante intuitiva e fácil de aprender a usar seus recursos e por fim ela oferece um ambiente com suporte em tempo real ao uso de console/terminal próprio, sendo possível a qualquer momento executar testes nos seus blocos de código. Disponível em: https://www .jetbrains.com/pycharm/ Anaconda – Já a suite Anaconda, tamb ém gratuita, conta com uma série de ferramentas que se destacam por suas aplicabilidades. Python é uma linguagem muito usada para data science, machine learning, e a suíte anaconda oferece softwares onde é possível trabalhar dentr o dessas modalidades com ferramentas dedicadas"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 29,
      "text": "cabilidades. Python é uma linguagem muito usada para data science, machine learning, e a suíte anaconda oferece softwares onde é possível trabalhar dentr o dessas modalidades com ferramentas dedicadas a ela, além, é claro, do próprio ambiente de programação comum, que neste caso é o VisualStudioC ode, e o Jupyter que é um terminal que roda via browser . Disponível em: https://www .anaconda.com/download/ Importante salientar também que, é perfeitamente normal e possível programar direto em terminal, seja em linux, seja em terminais ofere cidos pelas próprias IDEs, a escolha de usar um ou outro é de particularidade do programador . É possível inclusive usar um terminal junto ao próprio editor da IDE."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 30,
      "text": "Como dito anteriormente, existem diversas IDEs e ferram entas que facilitarão sua vida como programador , a verdade é que o interessante mesmo você dedicar um tempinho a testar as duas e ver qual você se adapta melhor . Não existe uma IDE melhor que a outra, o que existem são ferramentas que se adaptam melhor as suas necessidades enquanto programador ."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 31,
      "text": "3 – Lógica de programação Como já mencionei em um tópico anterior , uma linguag em de programação é uma linguage m como qualquer outra em essência, o diferencial é que na programação são meios que criamos para conseguir passar comandos a serem executados em um computador . Quando falam os sobre um determinado assunto, automaticamente em nossa língua falada nativa geramos uma sentença que possui uma certa sintaxe e lógica de argum ento para que a outra pessoa entenda o que estamos querendo transmitir . Se não nos expressarmos de forma clara podemos não ser entendidos ou o pior , ser mal-entendidos. Um computado r é um mecanismo exato, ele não tem (ainda) a capacidade de discernimen to e abstração que possuímos, logo, precisamos passar suas instruções de forma literal e ordenada, para que a execução de um processo seja correta. Quando estudamos lógica de programação, estudamos métodos de criar sequências lógicas de instrução, para que possamos usar tais sequências para programar qualquer dispositivo para que realize uma determinada função. Essa sequência lógica recebe o nome de algoritmo."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 32,
      "text": "Algoritmos Todo estudante de computaç ão no início de seu curso recebe essa aula, algoritmos. Algorit mos em suma nada mais é do que uma sequência de passos onde iremos passar uma determinada instrução a ser realizada. Imagine uma receita de bolo, onde há informação de quais ingredientes serão usados e um passo a passo de que ordem cada ingrediente será adicionado e misturado para que no final do processo o bolo dê certo, seja comestível e saboroso. Um algoritmo é exatamente a mesma coisa, conforme temos que programar uma determinada operação, temos que passar as instruções passo a passo para que o interpretador consiga as executar e chegar ao fim de um processo. Quando estudamos algoritmos basicamente temos três tipos básicos de algoritmo. Os que possuem uma entrada e geram uma saída, os que não possuem entrada mas geram saída e os que possuem entrada mas não geram saída. Parece confus o mas calma, imagine que na sua receita de bolo você precise pegar ingrediente por ingrediente e misturar , para que o bolo fique pronto depois de assado (neste caso temos entradas que geram uma saída. ). Em outro cenário imagine que você tem um sachê com a mistura já pronta de ingredientes, bastand"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 32,
      "text": "turar , para que o bolo fique pronto depois de assado (neste caso temos entradas que geram uma saída. ). Em outro cenário imagine que você tem um sachê com a mistura já pronta de ingredientes, bastando apenas adicionar leite e colocar para assar (neste caso, não temos as entradas mas temos a saída ). Por fim imagine que você é a empresa que produz o sachê com os ingre dientes já misturados e pré-prontos, você tem os ingredientes e produz a mistura, porém não é você que fará o bolo (neste caso temos as entradas e nenhuma saída ). Em nossos programas haverão situações onde iremos criar scripts que serão executados ou não de acordo com as entradas necessárias e as saídas esperadas para resolver algum tipo de problema computacional."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 34,
      "text": "Sintaxe em Python Você provavelmente não se lembra do seu processo de alfabetização, quando aprendeu do zero a escrever suas primeiras letras, sílabas, palavras até o momento em que interpretou sentenças inteiras de acordo com a lógica formal de escri ta, e muito provavelmente hoje o faz de forma automática apenas transliterando seus pensamentos. Costumo dizer que aprender uma linguagem de programação é muito parecid o, você literalmente estará aprendendo do zero um meio de “se comunicar” com o computador de forma a lhe passar instruções a serem executadas dentro de uma ordem e de uma lógica. Toda linguage m de programação tem sua maneira de transliterar a lógica de um determinado algoritmo em uma linguagem característica que será interpretada “pelo computador”, isto chamamos de sintaxe. Toda linguagem de programação tem sua sintaxe característica, o programador deve respeitá-la até porque o interpretador é uma camada de software o qual é “program ado” para entender apenas o que está sob a sintaxe correta. Outro ponto importante é que uma vez que você domina a sintaxe da linguagem ao qual está trabalhando, ainda assim haverão erros em seus códigos devido a erros de lógica. Não se p"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 34,
      "text": "ob a sintaxe correta. Outro ponto importante é que uma vez que você domina a sintaxe da linguagem ao qual está trabalhando, ainda assim haverão erros em seus códigos devido a erros de lógica. Não se preocupe porque a coisa mais comum, até mesmo para programadores experientes é a questão de vez em quando cometer algum pequeno erro de sintaxe, ou não conseguir transliterar seu algoritmo numa lógica correta. A sintax e na verdade será entendida ao longo deste livro, até porque cada tópico que será abordado, será algum tipo de instrução que estaremos aprendendo e haverá uma forma correta de codificar tal instrução para que finalmente seja interpretada. Já erros de lógica são bastante comuns nesse meio e, felizmente ou infelizmente, uma coisa depende da outra. Raciocine que você tem uma idéia, por exemplo, de criar uma simples"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 35,
      "text": "calculadora. De nada adianta você saber programar e não entender o funcionamento de uma calculadora, ou o contrário, você saber toda lógica de funcionamento de uma calculadora e não ter idéia de como transformar isto em código. Portanto, iremos bater muito nessa tecla ao longo do livro, tentando sempre entender qual a lógica por trás do código e a codificação de seu algoritmo. Para facilitar , nada melhor do que usarmos um exemplo prático de erro de sintaxe e de lógica respectivamente. Supondo que queiramos exibir em tela a soma de dois números. 5 e 2, respectivamente. *Esses exemp los usam de comandos que serão entendidos detalhadamente em capítulos posteriores, por hora, entenda que existe uma maneira certa de se passar informaçõe s para “a máquina”, e essas informações precisam obrigatoriamen te ser em uma linguagem que faça sentido para o interpretador da mesma. Ex 1: print('5' + '2') O resultado será 52, porque de acordo com a sintaxe do Python 3, tudo o que digitamos entre ‘aspas’ é uma string (texto), sendo assim o interpr etador pegou o texto ‘5’ e o texto ‘2’ e, como são dois textos, os concatenou de acordo com o símbolo de soma. Em outras palavras, aqui o nosso objetivo d"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 35,
      "text": "’ é uma string (texto), sendo assim o interpr etador pegou o texto ‘5’ e o texto ‘2’ e, como são dois textos, os concatenou de acordo com o símbolo de soma. Em outras palavras, aqui o nosso objetivo de somar 5 com 2 não foi realizado com sucesso porque passam os a informação para “a máquina” de maneira errada. Um erro típico de lógica. Ex 2: print(5 + 2) O resultado é 7, já que o interpretador pegou os dois valores inteiros 5 e 2 e os somou de acordo com o símbolo +, neste caso um operador matemático de soma. Sendo assim, codif icando da maneira corre ta o interpretador consegue realizar a operação necessária."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 36,
      "text": "Ex 3: Print( 5) + 2 = O interpretado r irá acusar um erro de sintaxe nesta linha do código pois ele não reconhece Print (iniciado em maiúsculo) e também não entende quais são os dados a serem usados e seus operadores. Um erro típico de sintaxe, uma vez que não estamos passando as informações de forma que o interpretador consiga interpretá-las adequadamente. Em suma, como dito anteriormente, temos que ter bem definida a ideia do que queremos criar, e programar de forma que o interpretador consiga receber e trabalhar com essas informações. Sempre que nos depararmos com a situação de escrev er alguma linha ou bloco de código e nosso interpretador acusar algum erro, devemos revisar o código em busca de que tipo de erro foi esse (lógica ou sintaxe) e procurar corrigir no próprio código."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 37,
      "text": "Palavras reservadas Na linguagem Python existem uma série de palavras reservadas para o sistema, ou seja, são palavras chave que o interpretador busca e usa para receber instruções a partir delas. Para ficar mais claro vamos pegar como exemplo a palavra print , em Python print é um comando que serve para exibir em tela ou em console um determinado dado ou valor , sendo assim, é impossível criarmos uma variável com nome print , pois esta é uma palavra reservada ao sistema. Ao todo são 31 palavras reservadas na sintaxe. and del from not while as elif global or with assert else if pass yield break except import print class exec in raise continue finally is return def for lambda try Repare que todas palavras utilizadas são termos em inglês, como Python é uma linguagem de alto nível, ela usa uma linguagem bastante próxima do usuário , com conhecimento básico de inglês é possível traduzir e interpretar o que cada palavra reservada faz. A medida que formos progredindo você irá automaticam ente associar que determinadas “palavras” são comandos ou instruções internas a linguagem. Você precisa falar uma lingua que a máquina possa reconhecer , para que no final das contas suas instruções seja"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 37,
      "text": "e associar que determinadas “palavras” são comandos ou instruções internas a linguagem. Você precisa falar uma lingua que a máquina possa reconhecer , para que no final das contas suas instruções sejam entendidas, interpretadas e executadas."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 38,
      "text": "Análise léxica Quando estam os programando estamos colocando em prática o que planejamos anteriormente sob a idéia de um algoritmo. Algoritmos por si só são sequências de instruções que iremos codificar para serem interpretadas e executar uma determinada função. Uma das etapas internas do processo de programação é a chamada análise léxica. Raciocine que todo e qualquer código deve seguir uma sequência lógica, um passo-a-passo a ser seguido em uma ordem definida, basicamente quando estamos programando dividimos cada passo de noss o código em uma linha nova/diferente. Sendo assim, temos que respeitar a ordem e a sequência lógica dos fatos para que eles sempre ocorram na ordem certa. O interpretador segue fielmente cada linha e seu conteúdo, uma após a outra, uma vez que “ele” é uma camada de programa sem capacidade de raciocíni o e interpretação como nós humanos. Sendo assim devemos criar cada linha ou bloco de códig o em uma sequência passo-a-passo que faça sendito para o interpretador . Por fim, é importante ter em mente que o interpretador sempre irá ler e executar , de forma sequencial, linha após linha e o conteúdo de cada linha sempre da esquerda para direita. Por exemplo: prin"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 38,
      "text": ". Por fim, é importante ter em mente que o interpretador sempre irá ler e executar , de forma sequencial, linha após linha e o conteúdo de cada linha sempre da esquerda para direita. Por exemplo: print('Seja bem vindo!' ) print('Você é' + 3 * 'muito' + 'legal!' ) Como mencionamos anteriormente, o interpretador sempre fará a leitura das linhas de cima para baixo. Ex: linha 1, linha 2, linha 3, etc... e o interpretador sempre irá ler o conteúdo da linha da esquerda para direita. Nesse caso o retorno que o usuário terá é: Seja bem vindo! Você é muito muito muito legal."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 39,
      "text": "Repare que pela sintaxe a linha 2 do código tem algumas particularidades, existem 3 strings e um operador mandando repetir 3 vezes uma delas, no caso 3 vezes ‘muito’ , e como são strings , o símbolo de + está servindo apenas para concatená-las. Embora isso ainda não faça sentido para você, fique tranquilo pois iremos entender cada ponto de cada linha de código posteriormente."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 40,
      "text": "Indentação Python é uma linguagem de forte indentação, ou seja, para fácil sintaxe e leitura, suas linhas de código não precisam necessariamente de uma pontuação, mas de uma tabulação correta. Quando linhas/blocos de código são filhos de uma determinada função ou parâmetro, devem os organizá-los de forma a que sua tabulação siga um determinado padrão. Diferente de outras lingua gens de programação que o interpretador percorre cada sentença e busca uma pontuação para demarcar seu fim, em Python o interpretador usa uma indentação para conseguir ver a hierarquia das sentenças. O interp retador de Python irá considerar linhas e blocos de código que estão situados na mesma tabulação (margem) como blocos filhos do mesmo objeto/parâmetro. Para ficar mais claro, vejamos dois exemplos, o primeiro com indentação errada e o segundo com a indentação correta: Indentação errada: variavel1 = input ('Digite um número: ') if variavel1 >= str(0): print('Número Positivo.' ) print(f'O número é: {variavel1 }') else: print('Número Negativo' ) print(f'O número é: {variavel1 }') Repare que neste bloco de código não sabemos claramente que linhas de códig o são filhas e nem de quem... e mais importante que "
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 40,
      "text": " }') else: print('Número Negativo' ) print(f'O número é: {variavel1 }') Repare que neste bloco de código não sabemos claramente que linhas de códig o são filhas e nem de quem... e mais importante que isto, com indentação errada o interpretador não saberá quais linhas ou blocos de código são filhas de quem, não conseguindo executar e gerar o retorno esperado, gerando erro de sintaxe. Indentação correta:"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 41,
      "text": "variavel1 = input ('Digite um número: ' ) if variavel1 >= str(0): print('Número Positivo.' ) print(f'O número é: {variavel1 }') else: print('Número Negativo' ) print(f'O número é: {variavel1 }') Agora repare no mesmo bloco de código, mas com as indentações corretas, pode mos ver de acordo com as margens e espaçamentos quais linhas de código são filhas de quais comandos ou parâmetros. O mesmo ocorre por parte do interpretador , de acordo com a tabulação usada, ele consegue perceber que inicialmente existe uma variavel variavel1 declarada que pede que o usuário digite um número, també m que existem duas estruturas condicionai s if e else, e que dentro delas existem instruções de imprimir em tela o resultado de acordo com o que o usuário digitou anteriorm ente e foi atribuido a variavel1 . Se você está vindo de outra linguagem de programação como C ou uma de suas derivadas, você deve estar acostumado a sempre encerrar uma sentença com ponto e vírgula ; Em Python não é necessário uma pontuação, mas se por ventura você inserir , ele simplesmente irá reconhecer que ali naquele ponto e vírgula se encerra uma instrução. Isto é ótimo porque você verá que você volta e meia cometerá algumas e"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 41,
      "text": "ação, mas se por ventura você inserir , ele simplesmente irá reconhecer que ali naquele ponto e vírgula se encerra uma instrução. Isto é ótimo porque você verá que você volta e meia cometerá algumas excessões usando vícios de programação de outra s lingu agens que em Python ao invés de gerarmos um erro, o interpretador saberá como lidar com essa exceção. Ex: Código correto: print('Olá Amigo' ) print('Tudo bem?' ) Código com vício de linguagem: print('Olá Amigo' ); print('Tudo bem?' )"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 42,
      "text": "Código extrapolado: print('Olá Amigo' ); print('Tudo bem?' ) Nos três casos o interpretador irá contornar o que for vício de linguagem e entenderá a sintaxe prevista, executando normalmente os comandos print( ). O retorno será: Olá Amigo Tudo bem?"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 44,
      "text": "4 – Estrutura básica de um programa Enquanto em outras linguagens de programação você tem de criar toda uma estrutura básica para que realmente você possa começar a programar , Python já nos oferece praticamente tudo o que precisamo s pré-carregado de forma que ao abrirmos uma IDE nossa única preocupação inicial é realmente programar . Python é uma linguagem “batteries included”, termo em inglês para (pilhas inclusas), ou seja, ele já vem com o necessário para seu funcionamento pronto para uso. Posteriormente iremos implementar novas bibliotecas de funcionalidades em nosso código, mas é realmen te muito bom você ter um ambiente de programação realmente pronto para uso. Que tal começarmos pelo programa mais básico do mundo. Escreva um programa que mostre em tela a mensagem “Olá Mundo”. Fácil não? Vamos ao exemplo: print('Olá Mundo!!!' ) Sim, por mais simples que pareça, isto é tudo o que você precisará escrever para que de fato, seja exibida a mensagem Olá Mundo!!! na tela do usuário. Note que existe no início da sentença um print( ) , que é uma palavra reserv ada ao sistema que tem a função de mostr ar algo no console ou na tela do usuário, print( ) sempre será seguido de ( ) parên"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 44,
      "text": "ote que existe no início da sentença um print( ) , que é uma palavra reserv ada ao sistema que tem a função de mostr ar algo no console ou na tela do usuário, print( ) sempre será seguido de ( ) parênteses, pois dentro deles estará o que chamamos de argumentos/parâmetros dessa função, neste caso, uma string (frase) ‘Olá Mundo!!!’ , toda frase, para ser reconhecida como tal, deve estar entre aspas. Então fazendo o raciocínio lógico desta linha de código, chamamos a função print( ) que recebe como argumento ‘Olá Mundo!!!’ . O retorno será: Olá Mundo!!!"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 45,
      "text": "Em outras linguagens de programação você teria de importar bibliotecas para que fosse reconhecido mouse, teclado, suporte a entradas e saída em tela, definir um escopo, criar um método que iria chamar uma determinad a função, etc... etc... etc... Em Python basta já de início dar o comando que você quer para que ele já possa ser executado. O interpretador já possui pré-carregado todos recursos necessários para identificar uma função e seus métodos, assim como os tipos de dado s básicos que usaremos e todos seus operadores."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 46,
      "text": "5 – T ipos de dados Independentemente da linguagem de programação que você está aprendendo, na computação em geral trabalhamos com dados, e os classificamos conforme nossa necessidade. Para ficar mais claro, raciocine que na programação precisamos separar os dados quanto ao seu tipo. Por exemplo uma string , que é o termo reservado para qualquer tipo de dado alfanumérico (qualq uer tipo de palavra/texto que contenha letras e números). Já quando vamos fazer qualquer operação aritmética precisamos tratar os números conforme seu tipo, por exemplo o número 8, que para programação é um int (número inteiro), enquanto o número 8.2 é um float (número com casa decimal ). O ponto que você precisa entender de imediato é que não podemos misturar tipos de dados diferentes em nossas operações, porque o interpretador não irá conseguir distinguir que tipo de operação você quer realizar uma vez que ele faz uma leitura léxica e “literal” dos dados. Por exemplo: Podemos dizer que Maria tem 8 anos, e nesse contexto, para o interpretador , o 8 é uma string , é como qualquer outra palavra dessa mesma sentença. Já quando pegamos dois números para somá-los por exemplo, o interpretador espera que esses núm"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 46,
      "text": "e contexto, para o interpretador , o 8 é uma string , é como qualquer outra palavra dessa mesma sentença. Já quando pegamos dois números para somá-los por exemplo, o interpretador espera que esses números sejam int ou float , mas nunca uma string . Parece muito confuso de imediato, mas com os exemplos que iremos posteriormente abordar você irá de forma automática diferenciar os dados quanto ao seu tipo e seu uso correto. Segue um pequeno exemplo dos tipos de dados mais comuns que usaremos em Python: Tipo Descrição Exemplo Int Número real inteiro, sem casas decimais12 Float Número com casas decimais 12.8"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 47,
      "text": "Bool Booleano / Binário (0 ou 1) 0 (ou 1) String Texto com qualquer caractere alfanumérico‘palavra’ “marca d’água” List Listas(s) [2, ‘Pedro’, 15.9] Dict Dicionário(s) {‘nome’:’João da Silva’, ‘idade’: 32} Repare també m que cada tipo de dado possui uma sinta xe própria para que o interpretador os reconheça como tal. Vamos criar algumas variáveis (que veremos no capítulo a seguir) apenas para atribuir diferentes tipos de dados, de forma que possamos finalmente visualizar como cada tipo de dados deve ser representado. variavel_tipo_string = 'Conjunto de caracteres alfanuméricos' variavel_tipo_int = 12 #número inteiro variavel_tipo_float = 15.3 #número com casas decimais variavel_tipo_bool = 1 #Booleano / Binário (0 ou 1) variavel_tipo_lista = [ 1, 2, 'Paulo' , 'Maria' , True] variavel_tipo_dicionario = { 'nome' :'Fernando' , 'idade' :31,} variavel_tipo_tupla = ( 'Ana' , 'Fernando' , 3) variavel_tipo_comentario = \"\"\"Um comentário atribuído a uma variável deixa de ser apenas um comentário, vira frase!!!\"\"\" Representação visual:"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 49,
      "text": "6 – Comentários Desculpe a redundância, mas comentários dentro das linguagens de programaçã o servem realmente para comentar determinados blocos de código, para criar anotações sobre o mesmo. É uma prática bastante comum a medida que implementamos novas funcionalidades em nosso código ir comentando-o também, para facilitar nosso entendimento quando revisarmos o mesmo. Essa prática também é bastante comum quando pegamos códigos de domínio público, normalmente o código virá com comentários do seu autor explicando os porquês de determinadas linhas de código. A sintaxe para comentar nossos códigos em Python é bastante simpl es, basicamente existem duas maneiras de comentar o código, quando queremos fazer um comentário que não será maior do que uma linha usaremos o símbolo # e em seguida o devido comentário. Já quando precisamos fazer algum comentário mais elaborad o, que irá ter mais de uma linha, usaremo s ‘’’aspas triplas antes de nosso comentário e depois dele para o terminar ’’’. A idéia de comentar determinados blocos de código é uma maneira do programador colocar anotações sobre determinadas linhas de código. Tenha em mente que o interpretador não lê o que o usuário determinou co"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 49,
      "text": "ia de comentar determinados blocos de código é uma maneira do programador colocar anotações sobre determinadas linhas de código. Tenha em mente que o interpretador não lê o que o usuário determinou como comentário, tudo o que estiver após # ou entre ‘’’ o interpretador irá simplesmente ignorar . Vamos ao exemplo: nome = ‘Maria’ #Maria é a nova funcionária print(‘Bem vinda Maria!!!’) #acima está uma mensagem de boas vindas a ela. Exemplo 2: '''Este programa está sendo escrito"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 50,
      "text": "para que Maria, a nova funcionária, comece a se interar com o sistema.''' Neste exemplo acima existem comentários dos dois tipos, o interpretador irá fazer apenas a leitura da variável nome e irá executar o comando print( ) , ignorando todo o resto. Porém se por ventura você quiser fazer com que um comentário passe a ser lido em seu código o mesmo deverá ser associado a uma variável. Ex: '''Exemplo de comentário este, inclusive, não será lido pelo interpretador''' Comentário interno, não lido pelo interpretador e não visível pelo usuário. Apenas comentário para alguma linha/bloco de código. comentario1 = '''Exemplo de comentário e agora sim será lido pelo interpretador!!!''' print(comentario1) Comentário que será exibido ao usuário, pois está associado a uma variável e o comando print( ) está executando sua exibição. O retorno será: Exemplo de comentário e agora sim será lido pelo interpretador!!! Uma prática bastante comum é, enquanto testamos nossos blocos de código usar do artifício de comentário para isolar algum elemento, uma vez que este quando comentado passa a ser ignorado pelo interpretador . var1 = 2019 var2 = 2020 soma = var1 + var2 print(soma)"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 51,
      "text": "Repare que o código acima por mais básico que seja possui duas variáveis var1 e var2, uma operação de soma entre elas e um comando print( ) que irá exibir em tela o resultado de soma . Se quisermos por exemplo, apen as a fim de testes, ignorar a operação soma declarada no código e realizar esta operação diretamente dentro do comando print( ), isto é perfeitamente possível. Bastando “comentar” a função soma , ela passa a ser ignorada pelo interpretador . Ex: var1 = 2019 var2 = 2020 var3 = 2021 #soma = var1 + var2 print(var1 + var2) O retorno em ambos os casos será: 4039 Note que no segundo bloco de código, ao inserir o marcador # a frente da função soma , a transformamos em um simples comentário, ignorado pelo interpretador , para traze-la de volta a ativa basta “descomentar” a mesma."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 52,
      "text": "7 – V ariáveis / objetos Uma variável basicamente é um espaço alocado na memória ao qual iremos armazenar um dado, valor ou informação. Imagine que você tem uma escrivanin ha com várias gavetas, uma variável é uma dessas gavetas ao qual podemos guardar dentro dela qualquer coisa (qualquer tipo de dado) e ao mesmo tempo ter acesso fácil a este dado durante a execução de nosso programa. Python é uma linguagem dinamicamente tipada, ou seja, quando trabalh amos com variáveis/objetos (itens aos quais iremos atribuir dados ou valores), podemos trabalhar livrem ente com qualquer tipo de dado e se necessário, também alterar o tipo de uma variável a qualquer momento. Outra característica importante de salientar neste momento é que Python, assim como outras linguagens, ao longo do tempo foi sofrendo uma série de muda nças que trouxeram melhori as em sua forma de uso. Na data de publicação deste livro estamos usando a versão 3.7 da linguagem Python, onde se comparado com as versões anteriores da mesma, houve uma série de simplificações em relação a maneira como declaramos variáveis, definimos funções, iteramos dados. Por fim apenas raciocine que não iremos estar nos focando em sintaxe antiga "
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 52,
      "text": "mesma, houve uma série de simplificações em relação a maneira como declaramos variáveis, definimos funções, iteramos dados. Por fim apenas raciocine que não iremos estar nos focando em sintaxe antiga ou que está por ser descontinuada, não há sentido em nos atermos a isto, todo e qualquer código que será usado neste livro respeitará a sintaxe mais atual."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 53,
      "text": "Declarando uma variável A declaração básica de uma variável/objeto sempre seguirá uma estrutura lógica onde, toda variável deve ter um nome (desde que não seja uma palavra reservada ao sistema) e algo atribuído a ela (qualquer tipo de dado ou valor). Partindo diretamente para prática, vamos ver um exemplo de declaração de uma variável: variavel1 = 11 Neste caso, inicialmente declaramos uma variável de nome variavel1 que por sua vez está recebendo o valor 10 como valor (o símbolo de = aqui é utilizad o para atribuir um valor a variável). No contexto de declaração de variáveis, o símbolo de igualdade não está comparan do ou igualando os lados, mas está sendo usado para atribuir um dado ou valor a uma variável. variavel1 = 11 print(variavel1) Aqui, inicialmente apenas para fins de exemplo, na segunda linha do código usamos o comando print( ) que dentro de seus “parênteses” está instancian do a variável que acabamos de criar, a execução dessa linha de código irá exibir em tela para o usuário o dado/valor que for conteúdo, que estiver atribuído a variável variavel1 . Neste caso o retorno será: 11 Conforme você progredir em seus estudos de programação você irá notar que é comum possuirmo"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 53,
      "text": "io o dado/valor que for conteúdo, que estiver atribuído a variável variavel1 . Neste caso o retorno será: 11 Conforme você progredir em seus estudos de programação você irá notar que é comum possuirmos várias variáveis, na verdade, quantas forem necessárias em nosso programa. Não existe um limite, você pode usar à vontade quantas variáveis forem necessárias desde que respeite a sua sintaxe e que elas tenham um propósito no código. Outro ponto importante é que quando atribuímos qualq uer dado ou valor a uma variável o tipo de dado é implícito, ou seja, se você por exemplo atribuir a uma variável simplesmente um número"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 54,
      "text": "6, o interpretador automaticamente identifica esse dado como um int (dado numérico do tipo inteiro). Se você inserir um ponto ‘.’ seguido de outro número, 5 por exemplo, tornando esse número agora 6.5, o interpretador automaticamente irá reconhecer esse mesmo dado agora como float (número de ponto flutuante). O mesmo ocorre quando você abre aspas ‘ ‘ para digitar algum dado a ser atribuído a uma variável, automaticamente o interpretador passará a trabalhar com aquele dado o tratando como do tipo string (palavra, texto ou qualquer combinação alfanumérica de caracteres). Posteriormente iremos ver que também é possível declarar explicitamente o tipo de um dado e até convertê -lo de um tipo para outro. Pytho n também é uma linguagem case sensitive , ou seja, ela diferencia caracteres maiúsculos de minúsculos, logo, existem certas maneiras de declarar variáveis que são permitidas enquanto outras não, gerando conflito com o interpretador . A grosso modo podemos declarar variáveis usando qualquer letra minúscula e o símbolo “_” underline simples no lugar do espaço. Exemplo 1: Declarando variáveis corretamente. variavel1 = 'Ana' variavel2 = 'Pedro' variavel_1 = 'Ana' variavel_2 = 'Pedro' A"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 54,
      "text": "quer letra minúscula e o símbolo “_” underline simples no lugar do espaço. Exemplo 1: Declarando variáveis corretamente. variavel1 = 'Ana' variavel2 = 'Pedro' variavel_1 = 'Ana' variavel_2 = 'Pedro' Ambos os modelos apresentam sintaxe correta, cabe ao usuário escolher qual modo ele considera mais fácil de identificar essa variável pelo nome. Exemplo 2: Simulando erro, declarando uma variável de forma não permitida. variavel 1 = 'String' 14 = 'Numero' Nem variavel 1 nem a 14 serão reconhecidas pelo interpretador como variáveis porque estão escritas de forma não reconhecida"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 55,
      "text": "pela sintaxe. No primeiro exemplo o espaço entre variável e 1 gera conflito com o interpretador . No segundo exemplo, um número nunca pode ser usado como nome para uma variável. Embora permitido, não é recomendável usar o nome de uma variável todo em letras maiúsculas, por exemplo: NOME = 'Fernando' *Se você está vindo de outras linguagens de programaç ão para o Python, você deve conhecer o conceito de que quando se declara uma variável com letras maiúsculas ela se torna uma constante, uma variável imutável. Esse conceito não existe para o Python porque nele as variáveis são tratadas como objetos e sempre serão dinâmicas. Por fim, fique tranquilo que usar essa sintaxe é permitida em Python, não muito recomendável, mas você não terá problemas em seu código em função disso. Outro ponto importante de destacar é que em função do padrão case sensitive , ao declarar duas variáveis iguais, uma com caracteres maiúsculos e outra com caracteres minúsc ulos serão interpretadas como duas variáveis diferentes. Ex: NOME = 'Fernando' nome = 'Rafael' Também é permitido, mas não é recomendado o uso de palavras com acentos: Ex: variável = 'Maria' cômodos = 3 Por fim, racioc ine que o interessante é "
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 55,
      "text": " diferentes. Ex: NOME = 'Fernando' nome = 'Rafael' Também é permitido, mas não é recomendado o uso de palavras com acentos: Ex: variável = 'Maria' cômodos = 3 Por fim, racioc ine que o interessante é você criar o hábito de criar seus códigos usando as formas mais comuns de se declarar variáveis, deixando apenas para casos especiais essas exceções. Exemplos de nomenclatura de variáveis permitidos: variavel = 'Ana' variavel1 = 'Ana'"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 56,
      "text": "variavel_1 = 'Ana' var_num_1 = 'Ana' minhavariavel = 'Ana' minha_variavel = 'Ana' minhaV ariavel = 'Ana' Permitidos, mas não recomendados: variável = 'Ana' VARIA VEL = 'Ana' Variavel = 'Ana' Não permitidos, por poder gerar conflitos com o interpretador de sua IDE: 1991 = 'Ana' minha variavel = 'Ana' 1variavel = 'Ana' *Existirão situações onde um objeto será declarado com letra maiúscula inicial, mas neste caso ele não é uma variável qualquer e seu modo de uso será totalmente diferente. Abordaremos esse tema nos capítulos finais do livro. Vale lembrar também que por convenção é recomendado criar nomes pequenos e que tenham alguma lógica para o programador , se você vai declarar uma variável para armazenar o valor de um número, faz mais sentido declarar uma variável numero1 do que algo tipo ag_23421_m_meuNumero ... Por fim, vale lembrar que, como visto em um capítulo anterior , existem palavras que são reservadas ao sistema, dessa forma você não conseguirá as usar como nome de uma variável. Por exemplo while , que é uma chamada para uma estrutura condicional, sendo assim, é impossível usar while como nome de variável."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 57,
      "text": "Declarando múltiplas variáveis É possí vel, para deixar o código mais enxuto, declarar várias variáveis em uma linha, independente do tipo de dado a ser recebido, desd e que se respeite a sintaxe correta de acordo com o tipo de dado. Por exemplo, o código abaixo: nome = 'Maria' idade = 32 sexo = 'F' altura = 1.89 Pode ser agrupado em uma linha, da sequinte forma: nome , idade , sexo , altura = 'Maria' , 32, 'F', 1.89 A ordem será respeitada e serão atribuídos os valores na ordem aos quais foram citados. (prim eira variável com primeiro atributo, segunda variável com segundo atributo, etc...)"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 58,
      "text": "Declarando múltiplas variáveis (de mesmo tipo) Quando formos definir várias variáveis, mas que possuem o mesmo valor ou tipo de dado em comum, podemos fazer essa declaração de maneira resumida. Ex: Método convencional: num1 = 10 x = 10 a1 = 10 Método resumido: num1 = x = a1 = 10 Repare que neste caso, em uma linha de código foram declaradas 3 variáveis, todas associadas com o valor 10, o interpretador as reconhecerá como variáveis independentes, podendo o usuário fazer o uso de qualquer uma delas isoladamente a qualquer momento. Por exemplo: num1 = x = a1 = 10"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 60,
      "text": "8 – Funções Básicas Funções, falando de forma bastante básica, são linhas ou blocos de códigos aos quais executarão uma determinada ação em nosso código, inicialmente trabalharemos com as funções mais básicas que existem, responsáveis por exibir em tela uma determinada resposta e também responsáveis por interagir com o usuário. Funções podem receber parâmetros de execução (ou não), dependendo a necessidade, uma vez que esses parâmetros nada mais são do que as informações de como os dados deverão interagir internamente para realizar uma determinada função. Pela sintaxe Python, “cham amos” uma função pelo seu nome, logo em seguida, entre ( ) parênteses podemos definir seus parâmetros, instanciar variáveis ou escrever linhas de código à vontade, desde que não nos esqueçamos que este bloco de código fará parte (será de propriedade) desta função... Posteriormente trataremos das funções propriamente ditas, como criamo s funções personalizadas que realizam uma determinada ação, por hora, para conseguirmos dar pross eguimento em nossos estudos, precisam os entender que existem uma série de funções pré-programadas, prontas para uso, com parâmetros internos que podem ser implícitos ou explíc"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 60,
      "text": " conseguirmos dar pross eguimento em nossos estudos, precisam os entender que existem uma série de funções pré-programadas, prontas para uso, com parâmetros internos que podem ser implícitos ou explícitos ao usuário. As mais comuns delas, print( ) e input( ) respectivamente nos permitirão exibir em tela o resultado de uma determinada ação de um bloco de código, e interagir com o usuário de forma que ele consiga por meio do teclado inserir dados em nosso programa."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 61,
      "text": "Função print( ) Quando estamos criando nossos programas, é comum que de acordo com as instruções que programamos, recebamos alguma saída, seja ela alguma mensagem ou até mesmo a realização de uma nova tarefa. Uma das saídas mais comuns é exibirm os, seja na tela para o usuário ou em console (em programas que não possuem uma interface gráfica), uma mensagem, para isto, na linguagem python usamos a função print( ) . Na verdade anteriormente já usamos ela enqua nto estávamos exibindo em tela o conteúdo de uma variável, mas naquele capítulo esse conceito de fazer o uso de uma função estava lá apenas como exemplo e para obtermos algum retorno de nossos primeiros códigos, agora iremos de fato entender o mecanismo de funcionamento deste tipo de função. Por exemplo: print('Seja bem vindo!!!' ) Repare na sintaxe: a função print( ) tem como parâmetro (o que está dentro de parênteses) uma string com a mensagem Seja bem vindo!!! Todo parâmetro é delimita do por ( ) parênteses e toda string é demarcada por ‘ ‘ aspas para que o interpretador reconheça esse tipo de dado como tal. O retorno dessa linha de código será: Seja bem vindo!!!"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 62,
      "text": "Função input( ) Em todo e qualquer programa é natural que haja interação do usuário com o mesmo, de modo que com algum dispositivo de entrada o usuário dê instruções ou adicione dados. Começando pelo básico, em nossos programa s a maneira mais rudimentar de captar os dados do usuário será por intermédio da função input( ), por meio dela podemos pedir , por exemplo que o usuário digite um dado ou valor , que internamente será atribuído a uma variável. Ex: nome = input ('Digite o seu nome: ' ) print('Bem V indo', nome) Inicialmente declaramos uma variável de nome nome que recebe como atributo a função input( ) que por sua vez dentro tem uma mensagem para o usuário. Assim que o usuário digitar alguma coisa e pressionar a tecla ENTER, esse dado será atribuído a variável nome . Em seguida, a função print( ) exibe em tela uma mensagem definida conca tenada ao nome digitado pelo usuário e atribuído a variável nome . O retorno será: Bem V indo Fernando *Supondo, é claro, que o usuário digitou Fernando. Apenas um adendo, como parâmetro de nossa função print( ) podem os instanciar múltiplo s tipos de dados, inclusive um tipo de dado mais de uma vez, apenas como exemplo, aprimorando o código "
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 62,
      "text": "Fernando. Apenas um adendo, como parâmetro de nossa função print( ) podem os instanciar múltiplo s tipos de dados, inclusive um tipo de dado mais de uma vez, apenas como exemplo, aprimorando o código anterior , podemos adicionar mais de uma string ao mesmo exemplo. Ex: nome = input ('Digite o seu nome: ' ) print('Bem V indo', nome ,'!!!') O retorno será: Bem V indo Fernando !!!"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 63,
      "text": "Explorando a função print( ) Como mencionado anteriormente, existem muitas formas permitidas de se “escrever” a mesma coisa, e também existe a questão de que a linguagem Python ao longo dos anos foi sofrendo alterações e atualizações, mudando aos poucos sua sintaxe. O importante de se lembrar é que, entre versões se aprimoraram certos pontos da sintaxe visando facilitar a vida do programador , porém, para programadores que de longa data já usavam pontos de uma sintaxe antiga, ela não necessariamente deixou de funcionar a medida que a linguagem foi sendo atualizada. Raciocine que muitos dos códigos que você verá internet a fora estarão no padrão Python 2, e eles funcionam perfeitamente no Python, então, se você está aprendendo realmente do zero por meio deste livro, fique tranquilo que você está aprendendo com base na versão mais atualizada da linguagem. Se você programava em Python 2 e agora está buscando se atualizar , fique tranquilo também porque a sintaxe que você usava não foi descontinuada, ela gradualmente deixará de ser usada pela comunidade até o ponto de poder ser removida do núcle o do Python, por hora, amba s sintaxes funcionam perfeitamente. V amos ver isso na prática:"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 63,
      "text": "continuada, ela gradualmente deixará de ser usada pela comunidade até o ponto de poder ser removida do núcle o do Python, por hora, amba s sintaxes funcionam perfeitamente. V amos ver isso na prática: print( ) básico – Apenas exibindo o conteúdo de uma variável: nome1 = 'Maria' print(nome1) Inicialmente declaramos uma variável de nome nome1 que recebe como atributo ‘Maria’ , uma string . Em seguida exibimos em tela o conteúdo atribuído a nome1 . O retorno será: Maria print( ) básico – Pedindo ao usuário que dê entrada de algum dado:"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 64,
      "text": "nome1 = input ('Digite o seu nome: ' ) print(nome1) Declaramos uma variável de nome nome1 que recebe como atributo a função input( ) que por sua vez pede ao usuário que digite alguma coisa. Quando o usuário digitar o que for solicitado e pressionar a tecla ENTER, este dado/valor será atribuído a nome1 . Da mesma forma que antes, por meio da função print( ) exibimos em tela o conteúdo de num1 . O retorno será: Maria *supondo que o usuário digitou Maria. print( ) intermediário – Usando máscaras de substituição (Sintaxe antiga): nome1 = input ('Digite o seu nome: ' ) print('Seja bem vindo(a) %s' %(nome1)) Da mesma forma que fizemo s no exemplo anterior , declaramos uma variável nome1 e por meio da função input( ) pedidos uma informação ao usuário. Agora, como parâmetro de nossa função print( ) temos uma mensagem (string ) que reserva dentro de si, por meio do marcador %s, um espaço a ser substitu ído pelo valor existente em nome1 . Supondo que o usuário digitou Fernando. O retorno será: Seja bem vindo(a) Fernando Porém existem formas mais sofisticadas de de realizar esse processo de interação, e isso se dá por o que cham amos de máscaras de substituição. Máscaras de substituição foram"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 64,
      "text": "eja bem vindo(a) Fernando Porém existem formas mais sofisticadas de de realizar esse processo de interação, e isso se dá por o que cham amos de máscaras de substituição. Máscaras de substituição foram inseridas na sintaxe Python com o intuito de quebrar a limitação que existia de poder instanciar apenas um dado em nossa string parâmetro de nossa função print( ). Com o uso de máscaras de substituição e da função .format( ) podemos inserir um ou mais de um dado/valor a ser substituído dentro de nossos parâmetros de nossa função print( ). Ex: nome1 = input ('Digite o seu nome: ' ) print('Seja bem vindo(a) {} !!!' .format(nome1))"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 65,
      "text": "A máscara { } reserva um espaço dentro da string a ser substituída pelo dado/valor atribuído a nome1 . O retorno será: Seja bem vindo(a) Fernando !!! Fazendo o uso de máscaras de substituição, como dito anteriormente, podemos instanciar mais de um dado/va lor/variável dentro dos parâmetros de nossa função print( ). Ex: nome1 = input ('Digite o seu nome: ' ) msg1 = 'Por favor entre' msg2 = 'Você é o primeiro a chegar .' print('Seja bem vindo {}, {}, {}' .format(nome1 , msg1 , msg2)) Repare que dessa vez temos mais duas variáveis msg1 e msg2 respectivamente que possuem strings como atributos. Em nossa função print( ) criamos uma string de mensagem de boas vindas e criamos 3 máscaras de substituição, de acordo com a ordem definida em .format( ) substituiremos a primeira pelo nome digitado pelo usuário, a segunda e a terceira máscara pelas frases atribuídas a msg1 e msg2 . Dessa forma: O retorno será: Seja bem vindo Fernando, Por favor entre, Você é o primeiro a chegar . print( ) intermediário – Usando “ f strings ” (Sintaxe nova/atual): Apenas dando um passo adiante, uma maneira mais moderna de se trabalhar com máscaras de substituição se dá por meio de f strings , a partir da versão "
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 65,
      "text": "ário – Usando “ f strings ” (Sintaxe nova/atual): Apenas dando um passo adiante, uma maneira mais moderna de se trabalhar com máscaras de substituição se dá por meio de f strings , a partir da versão 3 do Python se permite usar um simp les parâmetro “f” antes de uma string para que assim o interpretador subentenda que ali haverão máscaras de substituição a serem trabalhadas, independentemente do tipo de dado. Dessa forma de facilitou ainda mais o uso de máscaras dentro de nossa função print( ) e outras em geral. Basicamente declaramos um parâmetro “f” antes de qualquer outro e podemos instanciar o que quisermos diretamente dentro das máscaras de substituição, desde o conteúdo de uma variável até"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 66,
      "text": "mesmo operações e funções dentro de funções, mas começando pelo básico, veja o exemplo: nome = input ('Digite o seu nome: ' ) ap = input ('Digite o número do seu apartamento: ' ) print(f'Seja bem vinda {nome }, moradora do ap nº {ap}') Supondo que o usuário digitou respectivamente Maria e 33... O retorno será: Seja bem vinda Maria, moradora do ap nº 33 Quando for necessário exibir uma mensagem muito grande, de mais de uma linha, uma forma de simplificar nosso código reduzindo o número de prints a serem executados é usar a quebra de linha dentro de um print( ) , adicionando um \\n frente ao texto que deverá estar posicionado em uma nova linha. Ex: nome = 'João' dia_vencimento = 10 valor_fatura = 149.90 print(f'Olá, caro {nome },\\n A sua última fatura com vencimento em {dia_vencimento } de janeiro, \\n no valor de R$ {valor_fatura } está próxima do vencimento. \\n Favor pagar até o prazo para evitar multas.' ) Repare que existe um coman do print( ) com uma sentença enorme, que irá gerar 4 linhas de texto de retorno, combinando o uso de máscaras para sua composição. O retorno será: Olá, caro João, A sua última fatura com vencimento em 10 de janeiro, no valor de R$149.9 está próxima do ve"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 66,
      "text": "inhas de texto de retorno, combinando o uso de máscaras para sua composição. O retorno será: Olá, caro João, A sua última fatura com vencimento em 10 de janeiro, no valor de R$149.9 está próxima do vencimento. Favor pagar até o prazo para evitar multas. O que você deve ter em mente, e começar a praticar , é que em nossos programas, mesmo os mais básicos, sempre haverá meios de interagir com o usuário, seja exibindo certo conteúdo para"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 67,
      "text": "o mesm o, seja interagindo diretamente com ele de forma que ele forneça ou manipule os dados do programa. Lembre-se que um algoritmo pode ter entra das, para execução de uma ou mais funções e gerar uma ou mais saídas. Estas entradas pode ser um dado importado, um link ou um arquivo instanciado, ou qualquer coisa que esteja sendo inserida por um dispositivo de entrada do computador , como o teclado que o usuário digita ou o mouse interagindo com alguma interface gráfica."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 68,
      "text": "Interação entre variáveis Agora entendidos os conceitos básicos de como fazer o uso de variáveis, como exibir seu conteúdo em tela por meio da função print( ) e até mesmo interagir com o usuário via função input( ), hora de voltarmos a trabalhar os conceitos de variáveis, aprofundando um pouco mais sobre o que pode ser possível fazer a partir delas. A partir do momento que declaramos variáveis e atribuímos valores a elas, podemos fazer a interação entre elas (interação entre seus atributos), por exemplo: num1 = 10 num2 = 5.2 soma = num1 + num2 print(soma) print(f'O resultado é {soma }') Inicialmente criamos uma variável num1 que recebe como atributo 10 e uma segund a variável num2 que recebe como atributo 5.2. Na sequência criamos uma variável soma que faz a soma entre num1 e num2 realizando a operação instanciando as próprias variáveis. O resultado da soma será guardado em soma . A partir daí podemos simplesmente exibir em tela via função print( ) o valor de soma , assim como podemos criar uma mensagem mais elaborada usando máscara de substituição. Dessa forma... O retorno será: 15.2 Seguindo com o que aprendemos no capítulo anterior, podemos melhorar ainda mais esse código realiz"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 68,
      "text": "criar uma mensagem mais elaborada usando máscara de substituição. Dessa forma... O retorno será: 15.2 Seguindo com o que aprendemos no capítulo anterior, podemos melhorar ainda mais esse código realizando este tipo de operação básica diretamente dentro da máscara de substituição. Ex: num1 = 10 num2 = 5.2 print(f'O resultado é {num1 + num2 }') O retorno será: 15.2"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 69,
      "text": "Como mencionado anteriormente, o fato da linguag em Python ser dinamicamente tipada nos permite a qualquer momento alterar o valor e o tipo de uma variável. Por exemplo, a variável a que antes tinha o valor 10 (int) podemos a qualquer momento alterar para 'Maria' (string ). Por exemplo: a = 10 print(a) O resultado será: 10 a = 10 a = 'Maria' print(a) O resultado será: Maria. A ordem de leitura por parte do interpretador o último dado/valor atribuído a variável a foi ‘Maria’ . Como explicado nos capítulos iniciais, a leitura léxica desse código respeita a ordem das linhas de código, ao alterarmos o dado/valor de uma variável, o interpretador irá cons iderar a última linha de código a qual se fazia referência a essa variável e seu último dado/valor atribuído. Por fim, quando estamos usando variaveis dentro de alguns tipos de operadores podemos temporariamente convertê-los para um tipo de dado, ou deixar mais explícito para o interpr etador que tipo de dado estamos trabalhando para que não haja conflito. Por exemplo: num1 = 5 num2 = 8.2 soma = int(num1) + int(num2) print(soma) O resultado será: 13 (sem casas decimais, porque definimos na expressão de soma que num1 e num2 serão tratado"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 69,
      "text": "o haja conflito. Por exemplo: num1 = 5 num2 = 8.2 soma = int(num1) + int(num2) print(soma) O resultado será: 13 (sem casas decimais, porque definimos na expressão de soma que num1 e num2 serão tratados como int, número inteiro, sem casas decimais)."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 70,
      "text": "Existe a possibilidade também de já deixar especificado de que tipo de dado estamos falando quando o declaramos em uma variável. Por exemplo: num1 = int(5) num2 = float(8.2) soma = num1 + num2 print(soma) A regra geral diz que qualquer operação entre um int e um float resultará em float. O returno será 13.2 Como você deve estar reparando, a sintaxe em Python é flexível, no sentido de que haverão várias maneiras de codificar a mesma coisa, deixando a escolha por parte do usuário. Apenas aproveitando o exemplo acima, duas maneiras de realizar a mesma operação de soma dos valores atribuídos as respectivas variáveis. num1 = 5 num2 = 8.2 soma = int(num1) + int(num2) # Mesmo que: num1 = int(5) num2 = float(8.2) soma = num1 + num2 Por fim, é possível “transformar” de um tipo numérico para outro apenas alterando a sua declaração. Por exemplo: num1 = int(5) num2 = float(5) print(num1) print(num2) O retorno será: 5 5.0 Note que no segundo retorn o, o valor 5 foi declarado e atribuído a num2 como do tipo float , sendo assim, ao usar esse valor , mesmo"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 71,
      "text": "inicialmente ele não ter sido declarado com sua casa decimal, a mesma aparecerá nas operações e resultados. num1 = int(5) num2 = int(8.2) soma = num1 + num2 print(soma) Mesmo exemplo do anterior , mas agora já especificamos que o valor de num2 , apesa r de ser um número com casa decimal, deve ser tratado como inteiro, e sendo assim: O Retorno será: 13 E apenas concluindo o raciocínio, podemos aprimorar nosso código realizando as operações de forma mais eficiente, por meio de f strings . Ex: num1 = int(5) num2 = int(8.2) print(f'O resultado da soma é: {num1 + num2 }') O Retorno será: 13"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 72,
      "text": "Conversão de tipos de dados É importante entendermos que alguns tipos de dados podem ser “misturados” enquanto outros não, quando os atribuímos a nossas variáveis e tentamos realizar interações entre as memsa. Porém existem recursos para elucidar tanto ao usuário quanto ao interpretador que tipo de dado é em questão, assim como podemos, conforme nossa necessidade, convertê-los de um tipo para outro. A forma mais básica de se verificar o tipo de um dado é por meio da função type( ). Ex: numero = 5 print(type(numero)) O resultado será: <class 'int'> O que será exibido em tela é o tipo de dado, neste caso, um int. Declarando a mesma variável, mas agora atribuindo 5 entre aspas, pela sintaxe, 5, mesmo sendo um número, será lido e interpretado pelo interpretador como uma string . Ex: numero = '5' print(type(numero)) O resultado será: <class 'str'> Repare que agora, respeitando a sintaxe, ‘5’ passa a ser uma string , um “texto”. Da mesma forma, sempre respeitando a sintaxe, podemos verificar o tipo de qualquer dado para nos certificarmos de seu tipo e presumir que funções podemos exercer sobre ele. Ex: numero = [ 5] print(type(numero)) O retorno será: <class 'list'> numero = { 5} print(t"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 72,
      "text": " o tipo de qualquer dado para nos certificarmos de seu tipo e presumir que funções podemos exercer sobre ele. Ex: numero = [ 5] print(type(numero)) O retorno será: <class 'list'> numero = { 5} print(type(numero))"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 73,
      "text": "O retorno será: <class 'set'> *Lembre-se que a conotação de chaves { } para um tipo de dado normalmente faz dele um dicionário, nesse exemplo acima o tipo de dado retornado foi ‘set’ e não ‘dict’ em Seguindo esta lógica e, respe itando o tipo de dado, podem os evitar erros de interpretação fazendo com que todo dado ou valor atribuído a uma variável já seja identificado como tal. Ex: frase1 = str('Raquel tem 15 anos' ) print(type(frase1)) Neste caso antes mesmo de atribuir um dado ou valor a variável frase1 já espe cificamos que todo dado contido nela é do tipo string . Executando o comando print(type(frase)) o retorno será: <class 'str'> De acordo com o tipo de dados certas operações serão diferentes quanto ao seu contexto, por exemplo tendo duas frases atribuídas às suas respectivas variáveis, podemos usar o operador + para concatená-las (como são textos, soma de textos não existe, mas sim a junção entre eles). Ex: frase1 = str('Raquel tem 15 anos, ' ) frase2 = str('de verdade' ) print(frase1 + frase2) O resultado será: Raquel tem 15 anos, de verdade. Já o mesmo não irá ocorr er se misturarmos os tipos de dados, por exemplo: frase1 = str('Raquel tem ' ) frase2 = int(15) frase3 = '"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 73,
      "text": "t(frase1 + frase2) O resultado será: Raquel tem 15 anos, de verdade. Já o mesmo não irá ocorr er se misturarmos os tipos de dados, por exemplo: frase1 = str('Raquel tem ' ) frase2 = int(15) frase3 = 'de verdade' print(frase1 + frase2 + frase3)"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 74,
      "text": "O retorno será um erro de sintaxe, pois estamos tenta ndo juntar diferentes tipos de dados. Corrigindo o exemplo anterior , usando as 3 variáveis como de mesmo tipo o comando print será executado normalmente. frase1 = str('Raquel tem ' ) frase2 = str(15) frase3 = ' de verdade' print(frase1 + frase2 + frase3) O retorno será: Raquel tem 15 de verdade. Apenas por curiosidade, repare que o código apresent ado nesse último exemplo não necessariamente está usando f strings porque a maneira mais prática de o executar é instanciando diretamente as variáveis como parâmetro em nossa função print( ). Já que podemos optar por diferentes opções de sintaxe, podemos perfeitamente fazer o uso da qual considerarmos mais prática. print(frase1 + frase2 + frase3) # Mesmo que: print(f'{frase1 + frase2 + frase3 }') Nesse exemplo em particula r o uso de f strings está aumentando nosso código em alguns caracteres desnecessariamente. Em suma, sempre preste muita atenção quanto ao tipo de dado e sua respectiva sintaxe, 5 é um int enquanto ‘5’ é uma string . Se necessário, converta-os para o tipo de dado correto para evitar erros de interpretação de seu código."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 76,
      "text": "9 – Operadores"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 77,
      "text": "Operadores de Atribuição Em programaç ão trabalharemos com variáveis/objetos que nada mais são do que espa ços alocados na memória onde iremos armazenar dados, para durante a execução de nosso programa, fazer o uso deles. Esses dados, independente do tipo, podem receber uma nomenclatura personalizada e particular que nos permitirá ao longo do código os referenciar ou incorporar dependendo a situação. Para atribuir um determinado dado/valor a uma variável teremos um operador que fará esse processo. A atribuição padrão de um dado para uma variável, pela sintaxe do Python, é feita através do operador =, repare que o uso do símbolo de igual ( =) usado uma vez tem a função de atribuidor , já quando realmente queremos usar o simbolo de igual para igualar operandos, usaremos ele duplicado ( ==). Por exemplo: salario = 955 Nesta linha de código temos declaramos a variável salario que recebe como valor 955, esse valor nesse caso é fixo, e sempre que referenciarmos a variável salario o interpretador usará seu valor atribuído, 955. Uma vez que temos um valor atribuído a uma variável podemos também realizar operações que a referen ciem, por exemplo: salario = 955 aumento1 = 27 print(salario + "
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 77,
      "text": "ador usará seu valor atribuído, 955. Uma vez que temos um valor atribuído a uma variável podemos também realizar operações que a referen ciem, por exemplo: salario = 955 aumento1 = 27 print(salario + aumento1) O resultado será 982, porque o interpretador pegou os valores das variáveis salario e aumento1 e os somou. Por fim, também é possível fazer a atualização do valor de uma variável, por exemplo:"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 78,
      "text": "mensalidade = 229 mensalidade = 229 + 10 print(mensalidade) O resultado será 239, pois o último valor atribuido a variavel mensalidade era 229 + 10 . Aproveitando o tópico, outra possibilidade que temos , já vimos anteriormente, e na verdade trabalharemos muito com ela, é a de solicitar que o usuário digite algum dado ou algum valor que será atribuido a variável, podendo assim, por meio do operador de atribuição, atualizar o dado ou valor declarado inicialmente, por exemplo: nome = 'sem nome' idade = 0 nome = input ('Por favor , digite o seu nome: ' ) idade = input ('Digite a sua idade: ' ) print(nome , idade) Inicialmente as variáveis nome e idade tinham valores padrão pré- definidos, ao executar esse programa será solicitado que o usuário digite esses dados. Supondo que o usuário digitou Fernando , a partir deste momento a variável nome passa a ter como valor Fernando . Na sequência o usuário quando questionado sobre sua idade irá digitar números, supondo que digitou 33, a variável idade a partir deste momento passa a ter como atribuição 33. Internamente ocorre a atualização dessa variável para esses novos dados/valores atribuídos. O retorno será: Fernando 33"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 79,
      "text": "Atribuições especiais Atribuição Aditiva: variavel1 = 4 variavel1 = variavel1 + 5 # Mesmo que: variavel1 += 5 print(variavel1) Com esse comando o usuá rio está acrescentando 5 ao valor de variavel1 que inicialmente era 4. Sendo 4 + 5: O resultado será 9. Atribuição Subtrativa: variavel1 = 4 variavel1 = variavel1 – 3 # Mesmo que: variavel1 -= 3 print(variavel1) Nesse caso, o usuário está subtraindo 3 de variavel1 . Sendo 4 – 3: O resultado será 1. Atribuição Multiplicativa: variavel1 = 4 variavel1 = variavel1 * 2 # Mesmo que: variavel1 *= 2"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 80,
      "text": "print(variavel1) Nesse caso, o usuário está multiplicando o valor de variavel1 por 2. Logo 4 x 2: O resultado será: 8 Atribuição Divisiva: variavel1 = 4 variavel1 = variavel1 / 4 # Mesmo que: variavel1 /= 4 print(variavel1) Nesse caso, o usuário está dividindo o valor de variavel1 por 4. Sendo 4 / 4. O resultado será: 1 Módulo de (ou resto da divisão de): variavel1 = 4 variavel1 = variavel1 % 4 # Mesmo que: variavel1 %= 4 print(variavel1) Será mostrado apenas o resto da divisão de variavel1 por 4. O resultado será: 0 Exponenciação: variavel1 = 4 variavel1 = variavel1 ** 8 # Mesmo que:"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 81,
      "text": "variavel1 **= 8 print(variavel1) Nesse caso, o valor de a será multiplicado 8 vezes por ele mesmo. Como a valia 4 inicialmente, a exponenciação será (4*4*4*4*4*4*4*4). O resultado será: 65536 Divisão Inteira: variavel1 = 512 variavel1 = variavel1 // 512 # Mesmo que: variavel1 //= 256 print(variavel1) Neste caso a divisão retornará um número inteiro (ou arredondado). Ex: 512/256. O resultado será: 2"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 82,
      "text": "Operadores aritméticos Os operadores aritméticos, como o nome sugere, são aqueles que usaremos para realizar operações matem áticas em nossos blocos de código. O Python por padrão já vem com bibliotecas pré-alocadas que nos permitem a qualquer momento fazer operações matemáticas simples como soma, subtração, multiplicação e divisão. Para operações de maior complexidade também é possível importar bibliotecas externas que irão implementar tais funções. Por hora, vamos começar do início, entendendo quais são os operadores que usare mos para realizarmos pequenas operações matemáticas. Operador Função + Realiza a soma de dois números - Realiza a subtração de dois números * Realiza a multiplicação de dois números / Realiza a divisão de dois números Como mencionei anteriormente, a biblioteca que nos permite realizar tais operações já vem carregada quando iniciamos nosso IDE, nos permitindo a qualquer momento realizar os cálculos básicos que forem necessários. Por exemplo: Soma: print(5 + 7) O resultado será: 12 Subtração: print(12 - 3) O resultado será: 9"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 83,
      "text": "Multiplicação: print(5 * 7) O resultado será: 35 Divisão: print(120 / 6) O resultado será: 20 Operações com mais de 3 operandos: print(5 + 2 * 7) O resultado será 19 porque pela regra matemática primeiro se fazem as multiplicações e divisões para depois efetuar as somas ou subtrações, logo 2 x 7 são 14 que somados a 5 se tornam 19. Operações dentro de operações: print((5 + 2) * 7) O resultado será 49 porque inicialmente é realizada a operação dentro dos parênteses (5 + 2) que resulta 7 e aí sim este valor é multiplicado por 7 fora dos parênteses. Exponenciação: print(3 ** 5) #3 elevado a 5ª potência O resultado será 243, ou seja, 3 x 3 x 3 x 3 x 3. Outra operação possível e a de fazer uma divisão que retorne um número inteiro, “arredondado”, através do operador //. Ex: print(9.4 // 3) O resultado será 3.0, um valor arredondado. Por fim também é possível obter somente o resto de uma divisão fazendo o uso do operador %. Por exemplo:"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 84,
      "text": "print(10 % 3) O resultado será 1, porque 10 divididos por 3 são 9 e seu resto é 1. Apenas como exemplo, para encerrar este tópico, é importante você raciocinar que os exemplos que dei acima poderiam ser executados diretamente no console/terminal de sua IDE, mas claro que podemos usar tais operadores dentro de nossos blocos de código, inclusive atribuindo valores numéricos a variáveis e realizando operações entre elas. Por exemplo: numero1 = 12 numero2 = 3 print(numero1 + numero2) # Mesmo que: print('O resultado da soma é:' , numero1 + numero2) # Que pode ser aprimorado para: print(f'O resultado da soma é: {numero1 + numero2 }') O resultado será 15, uma vez que numero1 tem como valor atribuído 12, e numero2 tem como valor atribuido 3. Somando as duas variáveis chegamos ao valor 15. Exemplos com os demais operadores: x = 5 y = 8 z = 13.2 print(x + y) print(x - y) print(x ** z) print(z // y) print(z / y) Os resultados serão: 13 -3"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 85,
      "text": "1684240309.400895 1.0 1.65"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 86,
      "text": "Operadores Lógicos Operadores lógicos seguem a mesma base lógica dos operadores relacionais, inclusive nos retornando Truee ou False , mas com o diferencial de suportar expressões lógicas de maior complexidade. Por exemplo, se executarmos diretamente no console a expressão 7 != 3 teremos o valor True (7 diferente de 3, verdadeiro), mas se executarmos por exemplo 7 != 3 and 2 > 3 teremos como retorno False (7 é diferente de 3, mas 2 não é maior que 3, e pela tabela verdade isso já caracteriza False ). print(7 != 3) O retorno será: True Afinal, 7 é diferente de 3. print(7 != 3 and 2 > 3) O retorno será: False 7 é diferente de 3 (V erdadeiro) e (and) 2 é maior que 3 (Falso)."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 87,
      "text": "Tabela verdade Tabela verdade AND (E) Independente de quais expressões forem usadas, se os resultados forem: VEV=V VEF=F FEV=F FEF=F No caso do exemplo anterior , 7 era diferente de 3 (V) mas 2 não era maior que 3 (F), o retorno foi False . Neste tipo de tabela verdad e, bastando uma das proposiçõ es ser Falsa para que invalide todas as outras V erdadeiras. Ex: VeVeVeVeVeV=V VeFeVeVeVeV=F Em python o operador \"and\" é um operad or lógico (assim como os aritméticos) e pela sequência lógica em que o interpretador trabalha, a expressão é lida da seguinte forma: 7 != 3 and 2 > 3 True and False False # V e F = F Analisando estas estruturas lógicas estamos tentando relacionar se 7 é diferente de 3 (Verdadeiro) e se 2 é maior que 3 (Falso), logo pela tabela verdade V erdadeiro e Falso resultará False . Mesma lógica para operações mais complexas, e sempre respeitando a tabela verdade. 7 != 3 and 3 > 1 and 6 == 6 and 8 >= 9 True and T rue and T rue and False"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 88,
      "text": "False 7 diferente de 3 (V) E 3 maior que 1 (V) E 6 igual a 6 (V) E 8 maior ou igual a 9 (F). É o mesmo que True and T rue and T rue and False. Retornando False porque uma operação False já invalida todas as outras verdadeiras. Tabela V erdade OR (OU) Neste tipo de tabela verdade, mesmo tendo uma proposição Falsa, ela não invalida a V erdadeira. Ex: VeV=V VeF=V FeV=V FeF=F Independente do número de proposições, bastando ter uma delas verdadeira já valida a expressão inteira. VeVeVeVeVeVeVeV=V FeFeFeFeFeFeFeF=F FeFeFeFeFEFeVeF=V FeFeFeFeFeFeFeF=F Tabela V erdade XOR (OU Exclusivo/um ou outro) Os dois do mesmo tipo de proposição são falsos, e nenhum é falso também. VeV=F VeF=V FeV=V FeF=F"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 89,
      "text": "Tabela de Operador de Negação (unário) not T rue = F O mesmo que dizer: Se não é verdadeiro então é falso. not False = V O mesmo que dizer: Se não é falso então é verdadeiro. Também visto como: not 0 = T rue O mesmo que dizer: Se não for zero / Se é diferente de zero então é verdadeiro. not 1 = False O mesmo que dizer: Se não for um (ou qualquer valor) então é falso. Bit-a-bit O interpretador também pode fazer uma comparação bit-a-bit da seguinte forma: AND Bit-a-bit 3 = 1 1 (3 em binário) 2 = 10 (2 em binário) _ = 10 OR bit-a-bit 3 = 1 1 2 = 10 _ = 1 1 XOR bit-a-bit 3 = 1 1"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 90,
      "text": "2 = 10 _ = 01 Por fim, vamos ver um exem plo prático do uso de operadores lógicos, para que faça mais sentido. saldo = 1000 salario = 4000 despesas = 2967 meta = saldo > 0 and salario - despesas >= 0.2 * salario Analisando a variável meta : Ela verifica se saldo é maior que zero e se salario menos despezas é maior ou igual a 20% do salário . O retorno será True porque o saldo era maior que zero e o valor de salario menos as despesas era maior ou igual a 20% do salário . (todas proposições foram verdadeiras)."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 91,
      "text": "Operadores de membro Ainda dentro de operadores podemos fazer consulta dentro de uma lista obtendo a confirmação (True) ou a negação (False ). Por Exemplo: lista = [ 1, 2, 3, 'Ana' , 'Maria' ] print(2 in lista) O retorno será: True Lembrando que uma lista é definida por [ ] e seus valores podem ser de qualquer tipo, desde que separados por vírgula. Ao executar o comando 2 in lista, você está perguntando ao interpretador: \"2\" é membro desta lista? Se for (em qualquer posição) o retorno será True. Também é possível fazer a negação lógica, por exemplo: lista = [ 1, 2, 3, 'Ana' , 'Maria' ] print('Maria' not in lista) O Retorno será False. ‘Maria’ não está na lista? A resposta foi False porque ‘Maria’ está na lista."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 92,
      "text": "Operadores relacionais Operadores relacionais basicamente são aqueles que fazem a comparação de dois ou mais operandos, possuem uma sintaxe própria que também deve ser respeitada para que não haja conflito com o interpretador . >-Maior que >=-Maior ou igual a <-Menor que <=-Menor ou igual a ==-Igual a !=-Diferente de O retorno obtido no uso desses operadores será Verdadeiro (True) ou Falso (F alse). Usando como referência o console, operando diretame nte nele, ou por meio de nossa função print( ), sem declarar variáveis, podemos fazer alguns experimentos. print(3 > 4) #(3 é maior que 4?) O resultado será False. 3 não é maior que 4. print(7 >= 3) #(7 é maior ou igual a 3?) O resultado será True. 7 é maior ou igual a 3, neste caso, maior que 3. print(3 >= 3) #(3 é maior ou igual a 3?) O resultado será True. 3 não é maior , mas é igual a 3."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 93,
      "text": "Operadores usando variáveis x = 2 y = 7 z = 5 print(x > z) O retorno será False. Porque x (2) não é maior que z (5). x = 2 y = 7 z = 5 print(z <= y) O retorno será True. Porque z (5) não é igual, mas menor que y (7). x = 2 y = 7 z = 5 print(y != x) O retorno será True porque y (7) e diferente de x (2)."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 94,
      "text": "Operadores usando condicionais if (2 > 1): print(‘2 é maior que 1’) Repare que esse bloco de código se iniciou com um if, ou seja, com uma condicional, se dois for maior do que um, então seria executado a linha de código abaixo, que exibe uma mensagem para o usuário: 2 é maior que 1 . Mesmo exemp lo usando valores atribuídos a variávei s e aplicando estruturas condic ionais (que veremos em detalhe no capítulo seguinte): num1 = 2 num2 = 1 if num1 > num2: print('2 é maior que 1' ) O retorno será: 2 é maior que 1"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 95,
      "text": "Operadores de identidade Seguindo a mesma lógica dos outros operadores, podemos confirmar se diferentes objetos tem o mesmo dado ou valor atribuído. Por exemplo: aluguel = 250 energia = 250 agua = 65 print(aluguel is energia) O retorno será True porque os valores atribuídos são os mesmos (nesse caso, 250)."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 96,
      "text": "10 – Estruturas condicionais Quando aprendemos sobre lógica de programação e algoritmos, era fundamental entendermos que toda ação tem uma reação (mesmo que apenas interna ao sistema), dessa forma, conforme transliterávamos idéias para código, a coisa mais comum era nos depararmos com tomadas de decisão, que iriam influenciar os rumos da execução de nosso programa. Muitos tipos de programas se baseiam em metodologias de estruturas condicionais, são programadas todas possíveis tomadas de decisão que o usuário pode ter e o programa executa e retorna certos aspectos conforme o usuário vai aderindo a certas opções. Lembre-se das suas aulas de algoritmos, digamos que, apenas por exemplo o algoritmo ir_ate_o_mercado está sendo executado, e em determinad a seção do mesmo existam as opções: SE estiver chovendo vá pela rua nº1, SE NÃO estiver chovendo, continue na rua nº2. Esta é uma tomada de decisão onde o usuário irá aderir a um rumo ou outro, mudando as vezes totalmente a execução do programa, desde que essas possibilidade s estajam programadas. Não existe como o usuário tomar uma decisão que não está condicionada ao código, logo, todas possíveis tomadas de decisão dever ser programadas"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 96,
      "text": "ma, desde que essas possibilidade s estajam programadas. Não existe como o usuário tomar uma decisão que não está condicionada ao código, logo, todas possíveis tomadas de decisão dever ser programadas de forma lógica e responsiva."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 97,
      "text": "Ifs, elifs e elses Uma das parte s mais legais de programação, sem sombra de dúvidas, é quando começamos a lidar com estruturas condicionais. Uma coisa é você ter um programa linear , que apenas executa uma tarefa após a outra, sem grandes interações e desfecho sempre linear , como um script passo -a-passo. Já outra coisa é você colocar condições, onde de acordo com as variáveis o programa pode tomar um rumo ou outro. Como sempre, começando pelo básico, em Python a sintaxe para trabalhar com condicion ais é bastante simples se comparado a outras linguagens de programação, basicamente temos os comandos if (se), elif (o mesmo que else if / mas se) e else (se não) e os usaremos de acordo com nosso algoritmo demandar tomadas de decisão. A lógica de execução sempre se dará dessa forma, o interpretador estará executando o código linha por linha até que ele encontrará uma das palavras reservadas mencionadas anteriormente que sinaliza que naquele ponto existe uma tomada de decisão, de acordo com a decisão que o usuário indicar , ou de acordo com a validação de algum parâmetro, o código executará uma instrução, ou não executará nada, ignorando esta condição e pulando para o bloco de código "
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 97,
      "text": "om a decisão que o usuário indicar , ou de acordo com a validação de algum parâmetro, o código executará uma instrução, ou não executará nada, ignorando esta condição e pulando para o bloco de código seguinte. Partindo pra prática: a = 33 b = 34 c = 35 if b > a: print('b é MAIOR que a' ) Declaradas três variáveis a, b e c com seus respectivos valore s já atribuídos na linha abaixo existe a expressão if, uma tomada de decisão, sempre um if será seguido de uma instrução, que se for"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 98,
      "text": "verdadeira, irá executar um bloco de instrução indentado a ela. Neste caso, se b for maior que a será executado o comando print( ). O retorno será: b é MAIOR que a *Caso o valor atribuído a b fosse menor que a, o interpretador simplesmente iria pular para o próximo bloco de código. a = 33 b = 33 c = 35 if b > a: print('b é MAIOR que a' ) elif b == a: print('b é IGUAL a a' ) Repare que agora além da condicional if existe uma nova condicional declarada, o elif. Seguindo o método do interpretador , primeiro ele irá verificar se a condição de if é verdadeira, como não é, ele irá pular para esta segunda condicional. Por convenção da segunda cond icional em diante se usa elif, porém se você usar if repetidas veze s, não há problema algum. Seguindo com o código, a segunda condicional coloca como instrução que se b for igual a a, e repare que nesse caso é, será executado o comando print . O retorno será: b é IGUAL a a a = 33 b = 1 c = 608 if b > a: print('b é MAIOR que a' ) elif b == a: print('b é IGUAL a a' ) else: print('b é MENOR que a' )"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 99,
      "text": "Por fim, o comando else funciona como última condicional, ou uma condicional que é acionad a quando nenhuma das condições anteriores do código for verdadeira, else pode ter um bloco de código próprio porém note que ele não precisa de nenhuma instrução, já que seu propó sito é justamente apenas mostrar que nenhuma condicional (e sua instrução) anterior foi válida. Ex: var1 = 18 var2 = 2 var3 = 'Maria' var4 = 4 if var2 > var1: print('A segunda variável é maior que a primeira' ) elif var2 == 500: print('A segunda variável vale 500' ) elif var3 == var2: print('A variavel 3 tem o mesmo valor da variavel 2' ) elif var4 is str('4'): print('A variavel 4 não é do tipo string' ) else: print('Nenhuma condição é verdadeira' ) *Como comentamos rapidamente lá no início do livro, sobre algoritmos, estes podem ter uma saída ou não, aqui a saída é mostrar ao usuário esta mens agem de erro, porém se este fosse um código interno não haveria a necessidade dessa mensagem como retorno, supondo que essas condições simplesmente não fossem válidas o interpretador iria pular para o próximo bloco de código executando o que viesse a seguir . Por fim, revisando os códigos anteriores, declaramos várias variávei"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 99,
      "text": "dições simplesmente não fossem válidas o interpretador iria pular para o próximo bloco de código executando o que viesse a seguir . Por fim, revisando os códigos anteriores, declaramos várias variáveis, e partir delas colocamos suas respectivas condições, onde de acord o com a validação destas condições, será impresso na tela uma mensagem. Importante entendermos também que o interpretador lê a instrução de uma condicional e se esta for verdadeira, ele irá executar o bloco de código e encerrar seu processo ali, pulando a verificação das outras condicionais."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 100,
      "text": "Em suma, o interpretador irá verificar a primeira condicional, se esta for falsa, irá verificar a segunda e assim por diante até encontrar uma verdadeira, ali será executado o bloco de código indentado a ela e se encerrará o processo. O legal é que como python é uma linguagem de programa ção dinamicamente tipada, você pode brincar a vontade alterando o valor das variáveis para verificar que tipo de mensagem aparece no seu terminal. Também é possível criar cadeias de tomada de decisão com inúmeras alternativas, mas sempre lembrando que pela sequência lógica em que o interpretador faz sua leitura é linha- a-linha, quando uma condição for verdadeira o algoritmo encerra a tomada de decisão naquele ponto."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 101,
      "text": "And e Or dentro de condicionais Também é possível combinar o uso de operadores and e or para elaborar condicionais mais complexas (de duas ou mais condições válidas). Por exemplo: a = 33 b = 34 c = 35 if a > b and c > a: print('a é maior que b e c é maior que a' ) Se a for maior que b e c for maior que a: O retorno será: a é maior que b e c é maior que a a = 33 b = 34 c = 35 if a > b or a > c: print('a é a variavel maior' ) Se a for maior que b ou a for maior que c. O retorno será: a é a variavel maior Outro exemplo: nota = int(input ('Informe a nota: ' )) if nota >= 9: print('Parabéns, quadro de honra' ) elif nota >= 7: print('Aprovado' ) elif nota >= 5: print('Recuperação' ) else: print('Reprovado' )"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 102,
      "text": "Primeiro foi declarada uma variável de nome nota , onde será solicitado ao usuário que a atribua um valor , após o usuário digitar uma nota e apertar ENTER, o interpretador fará a leitura do mesmo e de acordo com as condições irá imprimir a mensagem adequada a situação. Se nota for maior ou igual a 9: O retorno será: Parabéns, quadro de honra Se nota for maior ou igual a 7: O retorno será: Aprovado Se nota for maior ou igual a 5: O retorno será: Recuperação Se nota não corresponder a nenhuma das proposições anteriores: O retorno será: Reprovado"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 103,
      "text": "Condicionais dentro de condicionais Outra prática comum é criar cadeias de estruturas condicionais, ou seja, blocos de código com condicionais dentro de condicionais. Python permite este uso e tudo funcionará perfeitamente desde que usada a sintaxe e indentação correta. Ex: var1 = 0 var2 = int(input ('Digite um número: ' )) if var2 > var1: print('Numero maior que ZERO' ) if var2 == 1: print('O número digitado foi 1' ) elif var2 == 2: print('O número digitado foi 2' ) elif var2 == 3: print('O número digitado foi 3' ) else: print('O número digitado é maior que 3' ) else: print('Número inválido' ) Repare que foram criadas 2 variáveis var1 e var2, a primeira já com o valor atribuído 0 e a segunda será um valor que o usuário digitar conforme solicitado pela mensagem, conertido para int. Em seguida foi colocada uma estrutura condicional onde se o valor de var2 for maior do que var1, será executa do o comando print e em seguida, dentro dessa condicional que já foi validada, existe uma segunda estrutura cond icional, que com seus respectivos ifs, elifs e elses irá verificar que número é o valor de var2 e assim irá apresentar a respectiva mensagem. Supondo que o usuário digitou 3: O retorno"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 103,
      "text": " estrutura cond icional, que com seus respectivos ifs, elifs e elses irá verificar que número é o valor de var2 e assim irá apresentar a respectiva mensagem. Supondo que o usuário digitou 3: O retorno será : Numero maior que ZERO O número digitado foi 2"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 104,
      "text": "Fora dessa cadeia de condicionais (repare na indentaç ão), ainda existe uma condicional else para caso o usuário digite um número inválid o (um número negativo ou um caracter que não é um número)."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 105,
      "text": "Simulando switch/case Quem está familiarizado com outras linguagens de programação está acostumado a usar a função Swich para que, de acordo com a necessidade, sejam tomadas certas decisões. Em Python nativam ente não temos a função switch , porém temos como simular sua funcionalidade através de uma função onde definiremos uma variável com dicionário dentro, e como um dicionário trabalha com a lógica de chave:valor , podemos simular de acordo com uma opção:umaopção . Para ficar mais claro vamos ao código: class Cor: vermelho = 1 verde = 2 azul = 3 branco = 4 preto = 5 # Mude a cor para testar cor_atual = 2 if cor_atual == Cor .vermelho: print(\"Vermelho\" ) elif cor_atual == Cor .verde: print(\"Verde\" ) elif cor_atual == Cor .azul: print(\"Azul\" ) elif cor_atual == Cor .branco: print(\"Branco\" ) elif cor_atual == Cor .preto: print(\"Preto\" ) else: print(\"Desconhecido\" ) Representação visual:"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 107,
      "text": "11 - Estruturas de repetição"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 108,
      "text": "While Python tem dois tipos de comandos para executar comandos em loop (executar repetidas vezes uma instrução) o while e o for, inicialmente vamos entende r como funciona o while . While do inglês, enquanto, ou seja, enquanto uma determinada condição for válida, a ação continuará sendo repetida. Por exemplo: a = 1 while a < 8: print(a) a += 1 Declarada a variável a, de valor inicial 1 (pode ser qualquer valor , incluzive zero) colocamos a condição de que, enquanto o valor de a for menor que 8, imprime o valor de a e acrescente (some) 1, repetidamente. O retorno será : 1 2 3 4 5 6 7 Repare que isto é um loop, ou seja, a cada ação o bloco de código salva seu últim o estado e repete a instrução, até atingir a condição proposta. Outra possibilidade é de que durante uma execução de while , podemos programar um break (comando que para a execução de um determinad o bloco de código ou instrução) que acontece se determinada condição for atingida. Normalmente o uso de break se dá quando colocamos mais de uma condição que, se a instrução do código atingir qualquer uma dessas condições (uma"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 109,
      "text": "delas) ele para sua execução para que não entre em um loop infinito de repetições. Por exemplo: a = 1 while a < 10: print(a) a += 1 if a == 4: break Enquanto a variável a for menor que 10, continue imprimindo ela e acrescentando 1 ao seu valor . Mas se em algum momento ela for igual a 4, pare a repeti ção. Como explicado anteriormente, existem duas condiçõe s, se a execuç ão do código chegar em uma delas, ele já dá por encerrada sua execução. Neste caso, se em algum momento o valor de a for 4 ou for um número maior que 10 ele para sua execução. O resultado será: 1 2 3 4"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 110,
      "text": "For O comando for será muito utilizado quando quizermos trabalhar com um laço de repetição onde conhecemo s os seus limites, ou seja, quando temos um objeto em forma de lista ou dicionário e queremos que uma variável percorra cada elemento dessa lista/dicionário interagindo com o mesmo. Ex: compras = [ 'Arroz' , 'Feijão' , 'Carne' , 'Pão' ] for i in compras: print(i) O retorno será: Arroz Feijão Carne Pão Note que inicialmente declara mos uma variável em forma de lista de nome compras, ele recebe 4 elementos do tipo string em sua composição. Em seguida declaramos o laço for e uma variável temporária de nome i (você pode usar o nome que quiser , e essa será uma variável temporária, apenas instanciada nesse laço / nesse bloco de código) que para cada execução dentro de compras , irá imprimir o próprio valor . Em outras palavras, a primeir a vez que i entra nessa lista ela faz a leitura do elemento indexado na posição 0 e o imprime, encerrado o laço essa variável i agora entra novamente nessa lista e faz a leitura e exibição do elemento da posição 1 e assim por diante, até o último elemento encontrado nessa lista. Outro uso bastante comum do for é quando sabemos o tamanho de um determ"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 110,
      "text": "essa lista e faz a leitura e exibição do elemento da posição 1 e assim por diante, até o último elemento encontrado nessa lista. Outro uso bastante comum do for é quando sabemos o tamanho de um determinado intervalo, o número de elementos de uma lista, etc... e usamos seu método in range para que seja explorado todo esse intervalo. Ex: for x in range (0, 6): print(f'Número {x}')"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 111,
      "text": "Repare que já de início existe o comando for, seguido de uma variável temporária x, logo em seguida está o comando in range , que basicamen te define um intervalo a percorrer (de 0 até 6). Por fim há o comando print sobre a variável x. O retorno será: Número 0 Número 1 Número 2 Número 3 Número 4 Número 5 *Note que a contagem dos elementos deste intervalo foi de 1 a 5, 6 já está fora do range, serve apenas como orientação para o interpretador de que ali é o fim deste intervalo. Em Python não é feita a leitura deste último dígito indexado, o interpretador irá identificar que o limite máximo desse intervalo é 6, sendo 5 seu último elemento. Quando estamos trabalhando com um intervalo há a possibilidade de declararmos apenas um valor como parâmetro, o interpretador o usará como orientação para o fimd e um intervalo. Ex: for x in range (6): print(f'Número {x}') O retorno será: Número 0 Número 1 Número 2 Número 3 Número 4 Número 5 Outro exemplo comum é quando já temos uma lista de elementos e queremos a percorrer e exibir seu conteúdo. lista = [ 'Pedro' , 255, 'Leticia' ]"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 112,
      "text": "for n in nomes: print(n) Repare que existe uma lista inicial, com 3 dados inclusos, já quando executamos o comando for ele internamente irá percorrer todos valores contidos na lista nomes e incluir os mesmos na variável n, independentemente do tipo de dado que cada elemento da lista é, por fim o comando print foi dado em cima da variável n para que seja exibido ao usuário cada elemento dessa lista. O resultado será: Pedro 255 Letícia Em Python o laço for pode nativamente trabalhar como uma espécie de condicional, sendo assim podemos usar o comando else para incluir novas instruções no mesmo. Ex: nomes = [ 'Pedro' , 'João' , 'Leticia' ,] for laco in nomes: print(laco) else: print('---Fim da lista!!!---' ) O resultado será: Pedro João Leticia ---Fim da lista!!!--- Por fim, importante salientar que como for serve como laço de repetição ele suporta operações dentro de si, desde que essas operações requeiram repetidas instruções obviamen te. Por exemplo:"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 113,
      "text": "for x in range (11): for y in range (11): print(f'{x} x {y} = {x * y}') O retorno será toda a tabuada de 0 x 0 até 10 x 10 (que por convenção não irei colocar toda aqui obviamente...)."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 114,
      "text": "12 – Strings Como já vimos algumas vezes ao longo da apostila, um objeto/variável é um espaço alocado na memória onde armazenaremos um tipo de dado ou informação para que o interpretador trabalhe com esses dados na execução do programa. Uma string é o tipo de dado que usamos quando queremos trabalhar com qualquer tipo de texto, ou conjunto ordenado de caracretes alfanuméricos em geral. Quando atribuimos um conjunto de caractere s, representando uma palavra/texto, devemos obrigatoriamente seguir a sintaxe correta para que o interpretador leia os dados como tal. A sintax e para qualquer tipo de texto é basicamente colocar o conteúdo desse objeto entre aspas ' ', uma vez atribuido dados do tipo string para uma variavel, por exemplo nome = 'Maria' , devemos lembrar de o referenciar como tal. Por exemplo em uma máscara lembrar de que o tipo de dado é %s."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 115,
      "text": "Trabalhando com strings No Python 3, se condicionou usar por padrão ' ' aspas simples para que se determine que aquele conteúdo é uma string , porém em nossa língua existem expressões que usam ' como apóstrofe, isso gera um erro de sintaxe ao interpretador . Por exemplo: 'marca d' água ' O retorno será um erro de sintaxe porque o interpretador quando abre aspas ele espera que feche aspas apenas uma vez, nessa expressão existem 3 aspas, o interpretador fica esperando que você \"feche\" aspas novamente, como isso não ocorre ele gera um erro. O legal é que é muito fácil contornar uma situação dessas, uma vez que python suporta, com a mesma função, \" \"aspas duplas, usando o mesmo exemplo anterior , se você escrever \"marca d'água\" ele irá ler perfeitamente todos caracteres (incluindo o apóstrofe) como string. O mesmo ocorre se invertermos a ordem de uso das aspas. Por exemplo: frase1 = 'Era um dia \"muuuito\" frio' print(frase1) O retorno será: Era um dia \"muuuito\" frio Vimos anteriormente, na seção de comentários, que uma forma de comentar o código, quando precisamos fazer um comentário de múltiplas linhas, era as colocando entre \"\"\" aspas triplas (pode ser ''' aspas simples ou \"\"\" aspas d"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 115,
      "text": "seção de comentários, que uma forma de comentar o código, quando precisamos fazer um comentário de múltiplas linhas, era as colocando entre \"\"\" aspas triplas (pode ser ''' aspas simples ou \"\"\" aspas duplas). Um texto entre aspas triplas é interpretado pelo interpretador como um comentário, ou seja, o seu conteúdo será por padrão ignorado, mas"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 116,
      "text": "se atribuirmos esse texto de várias linhas a uma variável, ele passa a ser um objeto comum, do tipo string . \"\"\"Hoje tenho treino Amanhã tenho aula Quinta tenho consulta\"\"\" *Esse texto nessa forma é apenas um comentário. texto1 = \"\"\"Hoje tenho treino Amanhã tenho aula Quinta tenho consulta\"\"\" print(texto1) *Agora esse texto é legível ao interpretador , inclusive você pode printar ele ou usar da forma como quiser , uma vez que agora ele é uma string ."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 117,
      "text": "Formatando uma string Quando estamos trabalhando com uma string também é bastante comum que por algum motivo precisamos formatá-la de alguma forma, e isso tamb ém é facilmente realizado desde que dados os comandos corretos."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 118,
      "text": "Convertendo uma string para minúsculo frase1 = 'A linguagem Python é muito fácil de aprender .' print(frase1.lower()) Repare que na segunda linha o comando print( ) recebe como parâmetro o conteúdo da variável frase1 acrescido do comando .lower( ), convertendo a exibição dessa string para todos caracteres minúsculos. O retorno será: a linguagem python é muito fácil de aprender ."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 119,
      "text": "Convertendo uma string para maiúsculo Da mesma forma o comand o .upper( ) fará o oposto de .lower( ), convertendo tudo para maiúsculo. Ex: frase1 = 'A linguagem Python é muito fácil de aprender .' print(frase1.upper()) O retorno será: A LINGUAGEM PYTHON É MUIT O FÁCIL DE APRENDER. Lembrando que isso é uma formatação, ou seja, os valores da string não serão modificados, essa modificação não é permanente, ela é apenas a maneira com que você está pedindo para que o conteúdo da string seja mostrado. Se você usar esses coma ndos em cima da variável em questão aí sim a mudança será permanente, por exemplo: frase1 = 'A LINGUAGEM PYTHON É MUIT O FÁCIL DE APRENDER.' frase1 = frase1.lower() print(frase1) O retorno será: a linguagem python é muito fácil de aprender . Nesse caso você estará alterando permanentemente todos caracteres da string para minúsculo."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 120,
      "text": "Buscando dados dentro de uma string Você pode buscar um dado dentro do texto convertendo ele para facilitar achar esses dados, por exemplo um nome que você não sabe se lá dentro está escrito com a inicial maiúscula, todo em maiúsculo ou todo em minúsculo, para não ter que testar as 3 possibilidades, você pode usar comandos como: frase1 = 'A LINGUAGEM PYTHON É MUIT O FÁCIL DE APRENDER.' frase1 = frase1.lower() print('py' in frase1.lower()) O retorno será True. Primeiro toda string foi convertida para minúscula, por segundo foi procurado ‘py’ que nesse caso consta dentro da string ."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 121,
      "text": "Desmembrando uma string Outro comando interessante é o .split( ), ele irá desme mbrar uma string em palavras separadas, para que você possa fazer a formatação ou o uso de apenas uma delas, por exemplo: frase1 = 'A LINGUAGEM PYTHON É MUIT O FÁCIL DE APRENDER.' frase1 = frase1.lower() print(frase1.split()) O resultado será: ['a', 'linguagem', 'python', 'é', 'muito', 'fácil', 'de', 'aprender .']"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 122,
      "text": "Alterando a cor de um texto Supondo que você quer imprimir uma mensagem de erro que chame a atenção do usuár io, você pode fazer isso associando também uma cor a este texto, por meio de um código de cores, é possível criar variáveis que irão determinar a cor de um texto, por exemplo: ERRO = '\\033[91m' #código de cores “vermelho” NORMAL = '\\033[0m' print(ERRO , 'Mensagem de erro aqui' , NORMAL) O Resultado será: Mensagem de erro aqui. Uma vez que você declarou as cores como variáveis, você pode incorporar elas nos próprios parâmetros do código (note também que aqui como é uma variável criada para um caso especial, ela inclusive foi criada com nomenclatura toda maiúscula para eventualmente destaca-la de outras variáveis comuns no corpo do código). print(ERRO + 'Mensagem de erro' + NORMAL) O resultado será: Mensagem de erro aqui. Apenas como referência, segue uma tabela com os principais códigos ANSI de cores tanto para a fonte quanto para o fundo. Cor Fonte Fundo Preto \\033[1;30m \\033[1;40m Vermelho \\033[1;31m \\033[1;41m Verde \\033[1;32m \\033[1;42m Amarelo \\033[1;33m \\033[1;43m Azul \\033[1;34m \\033[1;44m Magenta \\033[1;35m \\033[1;45m Cyan \\033[1;36m \\033[1;46m Cinza Claro \\033[1;37m "
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 122,
      "text": "40m Vermelho \\033[1;31m \\033[1;41m Verde \\033[1;32m \\033[1;42m Amarelo \\033[1;33m \\033[1;43m Azul \\033[1;34m \\033[1;44m Magenta \\033[1;35m \\033[1;45m Cyan \\033[1;36m \\033[1;46m Cinza Claro \\033[1;37m \\033[1;47m Cinza Escuro \\033[1;90m \\033[1;100m"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 123,
      "text": "Vermelho Claro\\033[1;91m \\033[1;101m Verde Claro \\033[1;92m \\033[1;102m Amarelo Claro \\033[1;93m \\033[1;103m Azul Claro \\033[1;94m \\033[1;104m Magenta Claro \\033[1;95m \\033[1;105m Cyan Claro \\033[1;96m \\033[1;106m Branco \\033[1;97m \\033[1;107m"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 124,
      "text": "Alterando a posição de exibição de um texto Estamos acostumad os a, enquanto trabalhamos dentro de um editor de texto, usar do artifício de botões de atalho que podem fazer com que um determinado texto fique centralizado ou alinhado a um dos lados da página, por exemplo. Internamente isto é feito pelos comandos center( ) (centralizar), ljust( ) (alinhar à esquerda) e rjust( ) (alinhar à direita). Exemplo de centralização: frase1 = 'Bem V indo ao Meu Programa!!!' print(frase1.center( 50)) Repare que a função print aqui tem como parâmetro a variável frase1 acrescida do comando center(50) , ou seja, centralizar dentro do intervalo de 50 caracteres. (A string inteira terá 50 caracteres, como frase1 é menor do que isto, os outros caracteres antes e depois dela serão substituídos por espaços. O retorno será: ‘ Bem V indo ao Meu Programa!!! ‘ Exemplo de alinhamento à direita: frase1 = 'Bem V indo ao Meu Programa!!!' print(frase1.rjust( 50)) O retorno será: ‘ Bem V indo ao Meu Programa!!!’"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 125,
      "text": "Formatando a apresentação de números em uma string Existirão situaçõ es onde, seja em uma string ou num contexto geral , quando pedirmos ao Python o resultado de uma operação numérica ou um valor pré estabelecido na matemática (como pi por exemplo) ele irá exibir este número com mais casas decimais do que o necessário. Ex: from math import pi print(f'O número pi é: {pi}') Na primeira linha estamos importando o valor de pi da biblioteca externa math . Em seguida dentro da string estamos usando uma máscara que irá ser substituída pelo valor de pi, mas nesse caso, como padrão. O retorno será: O número pi é : 3.141592653589793 Num outro cenário, vamos imaginar que temos uma variável com um valor int extenso mas só queremos exibir suas duas primeiras casa s decimais, nesse caso, isto pode ser feito pelo comando .f e uma máscara simples. Ex: num1 = 34.295927957329247 print('O valor da ação fechou em %.2f' %num1) Repare que dentro da string existe uma máscara de substituição % seguida de .2f, estes 2f significam ao interpretador que nós queremos que sejam exibidas apenas duas casas decim ais após a vírgula. Neste caso o retorn o será: O valor da ação fechou em 34.30 Usando o mesmo exemplo"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 125,
      "text": " estes 2f significam ao interpretador que nós queremos que sejam exibidas apenas duas casas decim ais após a vírgula. Neste caso o retorn o será: O valor da ação fechou em 34.30 Usando o mesmo exemplo mas substituindo .2f por .5f, o resultado será: O valor da ação fechou em 34.29593 (foram exibidas 5 casas “após a vírgula”)."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 127,
      "text": "13 – Listas Listas em Python são o equivalente a Arrays em outras linguagens de programação, mas calma que se você está começando do zero, e começando com Python, esse tipo de conceito é bastante simples de entender . Listas são um dos tipos de dados aos quais iremos traba lhar com frequencia, uma lista será um objeto que permite guardar diversos dado s dentro dele, de forma organizada e indexada. É como se voce pegasse várias variáveis de vários tipos e colocasse em um espaço só da memór ia do seu computador , dessa maneira, com a indexação correta, o interpretador consegue buscar e ler esses dados de forma muito mais rapida do que trabalha r com eles individualmente. Ex: lista = [ ] Podemos facilmente criar uma lista com já valores inseridos ou adicionalos manualmente conforme nossa necessidade, sempre respeitando a sintaxe do tipo de dado. Ex: lista2 = [ 1, 5, 'Maria' , 'João' ] Aqui criamos uma lista já com 4 dados inseridos no seu índice, repare que os tipos de dado s podem ser mesclados, temos ints e strings na composição dessa lista, sem problema algum. Podemos assim deduzir também que uma lista é um tipo de variável onde conseguimos colocar diversos tipos de dados sem causa"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 127,
      "text": "sclados, temos ints e strings na composição dessa lista, sem problema algum. Podemos assim deduzir também que uma lista é um tipo de variável onde conseguimos colocar diversos tipos de dados sem causar conflito."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 128,
      "text": "Adicionando dados manualmente Se queremos adicionar manualmente um dado ou um valor a uma lista, este pode facilmente ser feito pelo comando append( ). Ex: lista2 = [ 1, 5, 'Maria' , 'João' ] lista2.append( 4) print(lista2) Irá adicionar o valor 4 na posição zero do indice da lista. O retorno será: [1, 5, 'Maria', 'João', 4] Lembrando que por enquanto, esses comandos são sequenciais, ou seja, executar o primeiro .append ira colocar um dado armazenado na posição 0 do índice, o segundo .append automaticamente ira guardar um dado na posição 1 do índice, e assim por diante..."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 129,
      "text": "Removendo dados manualmente Da mesma forma, podemos executar o comando .remove( ) para remover o conteúdo de algum índice da lista. lista2 = [ 1, 5, 'Maria' , 'João' ] lista2.append( 4) lista2.remove( 'Maria' ) print(lista2) Irá remover o dado Maria , que nesse caso estava armazenado na posição 2 do indice. O retorno será: [1, 5, 'João', 4] Lembrando que no comando .remove você estará dizendo que conteúdo você quer excluir da lista, supondo que fosse uma lista de nomes [‘Paulo’, ‘Ana’, ‘Maria’] o comando .remove(‘Maria’) irá excluir o dado ‘ Maria’ , o proprio comando busca dentro da lista onde esse dado específico estava guardado e o remove, independentemente de sua posição ."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 130,
      "text": "Removendo dados via índice Para deletarmos o conteúdo de um índice específico, basta executar o comando del lista[nº do índice] lista2 = [ 'Ana' , 'Carlos' , 'João' , 'Sonia' ] del lista2[ 2] print(lista2) O retorno será: ['Ana', 'Carlos', 'Sonia'] Repare que inicialmente temos uma lista ['Ana', 'Carlos', 'João', 'Sonia'] e executarmos o comando del lista[2] iremos deletar 'João' pois ele está no índice 2 da lista. Nesse caso 'Sonia' que era índice 3 passa a ser índice 2, ele assume a casa anterior , pois não existe “espaço vazio” numa lista."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 131,
      "text": "Verificando a posição de um elemento Para verificarmos em que posição da lista está um determinado elemento, basta executarmos o comando .index( ) Ex: lista2 = [ 1, 5, 'Maria' , 'João' ] lista2.append( 4) print(lista2.index( 'Maria' )) O retorno será 2, porque 'Maria' está guardado no índice 2 da lista. Repserentação visual: Se você perguntar sobre um elemento que não está na lista o interpretador simplesmente retornará uma mensagem de erro dizendo que de fato, aquele elemento não está na nossa lista."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 132,
      "text": "Verificando se um elemento consta na lista Podemos também trabalhar com operadore aqui para consultar em nossa lista se um determinado elemento consta nela ou não. Por exemplo, execut ando o código 'João' in lista devemos receber um retorno T rue ou False. lista2 = [ 1, 5, 'Maria' , 'João' ] lista2.append( 4) print('João' in lista2) O retorno será: True"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 133,
      "text": "Formatando dados de uma lista Assim como usamos comand os para modificar/formatar uma string anteriormente, podemos aplicar os mesmos comandos a uma lista, porém é importante que fique bem claro que aqui as modificações ficam imediatamente alteradas (no caso da string , nossa formatação apenas alterava a forma como seria exibida, mas na variável a string permanecia integra). Ex: lista1 = [] lista1.append( 'Paulo' ) lista1.append( 'Maria' ) print(lista1) Inicialmente criamos uma lista vazia e por meio do método append( ) inserimos nela duas strings . Por meio da função print( ) podemos exibir em tela seu conteúdo: O retorno será [Paulo, Maria] Representação visual: lista1.reverse() print(lista1) Se fizermos o comando lista1.reverse( ) e em seguida dermos o comando print(lista1) o retorno será [Maria, Paulo] , e desta vez esta alteração será permanente."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 134,
      "text": "Listas dentro de listas Também é possível adicionar listas dentro de listas, parece confuso, mas na prática, ao inserir um novo dado dentro de um índice, se você usar a sintaxe de lista [ ] você estará adicionando, ali naquela posição do índice, uma nova lista. Ex: lista = [ 1, 2, 4, 'Paulo' ] Adicionando uma nova lista no índice 4 da lista atual ficaria: lista = [ 1, 2, 4, 'Paulo' ] lista = [ 1, 2, 4, 'Paulo' , [2, 5, 'Ana' ]] print(lista) O retorno será [1, 2, 4, 'Paulo', [2, 5, 'Ana']] Representação visual:"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 135,
      "text": "Tuplas Uma Tupla trabalha assim como uma lista para o interpretador , mas a princip al diferença entre elas é que lista é dinâmica (você pode alterá la à vontade) enquanto uma tupla é estática (elementos atribuídos são fixos) e haverão casos onde será interessante usar uma ou outra. Um dos princip ais motivos para se usar uma tupla é o fato de poder incluir um elemento, o nome Paulo por exemplo, várias vezes em várias posições do índice, coisa que não é permitid a em uma lista, a partir do momento que uma lista tem um dado ou valor atribuído, ele não pode se repetir . Segunda diferença é que pela sintaxe uma lista é criada a partir de colchetes, uma tupla a partir de parênteses novamente. minhatupla = tuple ( ) Para que o interpretador não se confunda, achando que é um simples objeto com um parâmetro atribuído, pela sintaxe, mesmo que haja só um elemento na tupla, deve haver ao menos uma vírgula como separador . Ex: minhatupla = tuple (1,) Se você executar type(minhatupla) você verá tuple como retorno, o que está correto, se não houvesse a vírgula o interpretador iria retornar o valor int (já que 1 é um número inteiro). Se você der um comando dir(minhatupla) você verá que basicamen"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 135,
      "text": "ple como retorno, o que está correto, se não houvesse a vírgula o interpretador iria retornar o valor int (já que 1 é um número inteiro). Se você der um comando dir(minhatupla) você verá que basicamente temos index e count como comandos padrão que podemos executar , ou seja, ver seus dados e contá-los também. Você pode acessar o índice exatmente como fazia com sua lista. Ex: minhatupla = tuple (1,) minhatupla[ 0] O retorno será: 1"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 136,
      "text": "Outro ponto a ser comentado é que, se sua tupla possuir apenas um elemento dentro de si, é necessário indicar que ela é uma tupla ou dentro de si colocar uma vírgula como separador mesmo que não haja um segundo elemento. Já quando temos 2 ou mais elementos dentro da tupla, não é mais necessário indicar que ela é uma tupla, o interpretador identificará automaticamente. Ex: minhatupla = tuple ('Ana' ) minhatupla2 = ( 'Ana' ,) minhatupla3 = ( 'Ana' , 'Maria' ) Em minhatupla existe a atribu ição de tipo tuple( ), em minhatupla2 existe a vírgula como separador mesmo não havendo um segundo elemento, em minhatupla3 já não é mais necessário isto para que o identifique o tipo de dado como tupla. Como uma tupla tem valores já predefinidos e imutáveis, é comum haver mais do mesm o elemento em diferentes posições do indice. Ex: tuplacores = ( 'azul' , 'branco' , 'azul' , 'vermelho' , 'preto' , 'azul' , 'amarelo' ) Executando o código tuplacores.count('azul') tuplacores = ( 'azul' , 'branco' , 'azul' , 'vermelho' , 'preto' , 'azul' , 'amarelo' ) print(tuplacores.count( 'azul' )) O retorno será 3 porque existem dentro da tupla ' azul' 3 vezes. Representação visual:"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 137,
      "text": "Pilhas Pilhas nada mais são do que listas em que a inserção e a remoção de elementos acontecem na mesma extremidade. Para abstrairmos e entendermos de forma mais fácil, imagine uma pilha de papé is, se você colocar mais um papel na pilha, será em cima dos outros, da mesma forma que o primeiro papel a ser removido da pilha será o do topo."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 138,
      "text": "Adicionando um elemento ao topo de pilha Para adicionarmos um elemento ao topo da pilha podemos usar o nosso já conhecido .append( ) recebendo o novo elemento como parâmetro . pilha = [ 10, 20, 30] pilha.append( 50) print(pilha) O retorno será: [10, 20, 30, 50]"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 139,
      "text": "Removendo um elemento do topo da pilha Para removermos um elemento do topo de uma pilha podemos usar o comando .pop( ), e neste caso como está subentendido que será removido o último elemento da pilha (o do topo) não é necessário declarar o mesmo como parâmetro . pilha = [ 10, 20, 30] pilha.pop() print(pilha) O retorno será: [10, 20]"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 140,
      "text": "Consultando o tamanho da pilha Da mesma forma como cons ultamos o tamanho de uma lista, podemos consultar o tamanho de uma pilha, para termos noção de quantos elementos ela possui e de qual é o topo da pilha. Ex: pilha = [ 10, 20, 30] pilha.append( 50) print(pilha) print(len(pilha)) O retorno será: [10, 20, 30, 50] 4 Representação visual: Na primeira linha, referente ao primeiro print( ), nos mostra os elementos da pilha (já com a adição do “50” em seu topo. Por fim na segunda linha, referente ao segundo print( ) temos o valor 4, dizendo que esta pilha tem 4 elementos;"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 142,
      "text": "14 – Dicionários Enquanto listas e tuplas são estruturas indexadas, um dicionário, além da sintaxe também diferente, se resume em chave:valor . Assim como em um dicion ário normal você tem uma palavra e seu significado, aqui a estrutura lógica será essa. A sintaxe de um dicionário é definida por chaves { }, deve seguir a ordem chave:valor e usar vírgula como separador , para não gerar um erro de sintaxe. Ex: fernando = { 'nome' : 'Fernando Feltrin' , 'idade' : 31, 'formacao' : ['Engenheiro da Computação' , 'Técnico em TI' ]} Repare que inicialmente o dicionário foi atribuido a um objeto, depois que seguindo a sintaxe foram criados 3 campos (nome, idade e formação) e dentro de formação ainda foi criado uma lista, onde foram adicionados dois elementos ao índice. Uma prática comum tanto em listas, quanto em dicionários, é usar de uma tabulação que torne visualmente o código mais organizado, sempre que estivermos trabalhando com estes tipos de dados teremos uma vírgula como separador dos elementos, e é perfeitamente normal após uma vírgula fazer uma quebra de linha para que o código fique mais legível. Esta prática não afeta em nada a leitura léxica do interpretador nem a performance d"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 142,
      "text": "lementos, e é perfeitamente normal após uma vírgula fazer uma quebra de linha para que o código fique mais legível. Esta prática não afeta em nada a leitura léxica do interpretador nem a performance de operação do código. fernando = { 'nome' : 'Fernando Feltrin' , 'idade' : 31,"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 143,
      "text": "'formacao' : ['Engenheiro da Computação' , 'Técnico em TI' ]} Executando um type(fernando) o retorno será dict, porque o interpretador , tudo o que estiver dentro de { } chaves ele interpretará como chaves e valores de um dicionário. Assim como existem listas dentro de listas, você pode criar listas dentro de dicionários e até mesmo dicionários dentro de dicionários sem problema algum. Você pode usar qualquer tipo de dado como chave e valor , o que não pode acontecer é esquecer de declarar um ou outro pois irá gerar erro de sintaxe. Da mesma forma como fazíamos com listas, é interessante saber o tamanho de um dicionário, e assim como em listas, o comando len( ) agora nos retornará a quantidade de chaves:valores inclusos no dicionário. Ex: fernando = { 'nome' : 'Fernando Feltrin' , 'idade' : 31, 'formacao' : ['Engenheiro da Computação' , 'Téc em TI' ]} print(len(fernando)) O retorno será 3."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 144,
      "text": "Consultando chaves/valores de um dicionário Você pode consultar o valor de dentro de um dicionário pelo comando .get( ). Ex: fernando = { 'nome' : 'Fernando Feltrin' , 'idade' : 31, 'formacao' : ['Engenheiro da Computação' , 'Técnico em TI' ]} print(fernando.get( 'idade' )) O retorno será 31."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 145,
      "text": "Consultando as chaves de um dicionário É poss ível consultar quanta s e quais são as chaves que estão inclusas dentro de um dicionário pelo comando . keys( ). Ex: fernando = { 'nome' : 'Fernando Feltrin' , 'idade' : 31, 'formacao' : ['Engenheiro da Computação' , 'Técnico em TI' ]} print(fernando.keys()) O retorno será: dict_keys(['nome', 'idade', 'formacao'])"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 146,
      "text": "Consultando os valores de um dicionário Assim como é possível fazer a leitura somente dos valores, pelo comando . values( ) . Ex: fernando = { 'nome' : 'Fernando Feltrin' , 'idade' : 31, 'formacao' : ['Engenheiro da Computação' , 'Técnico em TI' ]} print(fernando.values()) O retorno será: dict_values(['Fernando Feltrin', 31, ['Engenheiro da Computação', 'Técnico em TI']])"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 147,
      "text": "Mostrando todas chaves e valores de um dicionário Por fim o comando .items( ) retornará todas as chaves e valores para sua consulta. Ex: fernando = { 'nome' : 'Fernando Feltrin' , 'idade' : 31, 'formacao' : ['Engenheiro da Computação' , 'Técnico em TI' ]} print(fernando.items()) O retorno será: dict_items([('nome': 'Fernando Feltrin', 'idade': 31, 'formacao': ['Engenheiro da Computação', 'Técnico em TI'])])"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 148,
      "text": "Manipulando dados de um dicionário Quanto temos um dicionário já com valores definidos, pre- programados, mas queremos alterá-los, digamos, atualiza r os dados dentro de nosso dicionario , podemos fazer isso manualmente atraves de alguns simples comandos. Digamos que tinhamos um dicionario inicial: pessoa = { 'nome' : 'Alberto Feltrin' , 'idade' : '42', 'formação' : ['Tec. em Radiologia' ], 'nacionalidade' : 'brasileiro' } print(pessoa) O retorno será: {'nome': 'Alberto Feltrin', 'idade': '42', 'formação': ['Tec. em Radiologia'], 'nacionalidade': 'brasileiro'} Representação visual: pessoa = { 'nome' : 'Alberto Feltrin' , 'idade' : '42', 'formação' : ['Tec. em Radiologia' ], 'nacionalidade' : 'brasileiro' } pessoa[ 'idade' ] = 44 print(pessoa)"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 149,
      "text": "Executando o comando pessoa['idade'] = 44 estaremos atualizando o valor 'idade ' para 44 no nosso dicionário, consultando o dicionário novamente você verá que a idade foi atualizada. Executando novamente print(pessoa) o retorno será: {'nome': 'Alberto Feltrin', 'idade': 44, 'formação': ['Tec. em Radiologia', 'nacionalidade']: 'brasileiro'}"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 150,
      "text": "Adicionando novos dados a um dicionário Além de substituir um valor por um mais atual, també m é possível adicio nar manualm ente mais dados ao dicionário, assim como fizemos anteriormente com nossas listas, através do comando .append( ) . Ex: pessoa = { 'nome' : 'Alberto Feltrin' , 'idade' : '42', 'formação' : ['Tec. em Radiologia' ], 'nacionalidade' : 'brasileiro' } pessoa[ 'formação' ].append( 'Esp. em T omografia' ) print(pessoa) O retorno será: {'nome': 'Alberto Feltrin', 'idade': 44, 'formação': ['Tec. em Radiologia', 'Esp em Tomografia'], 'nacio nalidade': 'brasileiro'} Representação visual: *Importante salientar que para que você possa adicionar mais valores a uma chave, ela deve respeitar a sintaxe de uma lista."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 152,
      "text": "15 – Conjuntos numéricos Se você lembrar das aulas do ensino médio certamente lembrará que em alguma etapa lhe foi ensinado sobre conjuntos numéricos, que nada mais era do que uma foram de categorizarmos os números qanto suas características (reais, inteiros, etc...). Na programação isto se repete de forma parecida, uma vez que quando queremos trabalhar com conjuntos numéricos normalmente estamos organizando números. Um conjunto é ainda outra possibilidade de armazenamento de dados que temos, de forma que ele parece uma lista com sintaxe de dicionário, mas não indexável e que não aceita valores repetidos, confuso não? A questão é que como aqui podemos ter valores repetidos, assim como conjuntos numéricos que usávamos no ensino médio, aqui podemos unir dois conjuntos, fazer a intersecção entre eles, etc... V amos aos exemplos: a = {1, 2, 3} Se executarmos o comando type(a) o retorno será set. O interpretador consegue ver na sintaxe que não é nem uma lista, nem uma tupla e nem um dicionário, mas apenas um conjunto de dados alinhados. Trabalhando com mais de um conjunto, podemos fazer operações entre eles. Por exemplo:"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 153,
      "text": "União de conjuntos A união de dois conjuntos é feita através do operador .union( ), de forma que a operação irá na verdade gerar um terceiro conjunto onde constam os valores dos dois anteriores. Ex: c1 = { 1, 2} c2 = { 2, 3} c1.union(c2) #c1 união com c2, matematicamente juntar 2 conjuntos. O retorno será: {1, 2, 3} Repare que a união dos dois conjuntos foi feita de forma a pegar os valores que não eram comuns aos dois conjuntos e incluir , e os valores que eram comuns aos dois conjuntos simplesmente manter , sem realizar nenhuma operação."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 154,
      "text": "Interseção de conjuntos Já a interseçã o entre eles fará o oposto, anulando valores avulsos e mantendo só os que eram comum aos dois conjuntos. Interseção de dois conjuntos através do operador .intersection( ). Ex: c1 = { 1, 2} c2 = { 2, 3} c1.intersection(c2) O retorno será: {2} #Único elemento em comum aos dois conjuntos Lembrando que quando executamos expressões matemáticas elas apenas alteram o que será mostrado para o usuário, a integridado dos dados iniciais se mantem. Para alterar os dados iniciais, ou seja, salvar essas alterações, é possível executar o comando .update( ) após as expre ssões, assim os valores serão alterados de forma permanente. Ex: c1 = { 1, 2} c2 = { 2, 3} c1.union(c2) c1.update(c2) Agora consultando c1 o retorno será {1, 2, 3}"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 155,
      "text": "Verificando se um conjunto pertence ao outro Também é possivel verificar se um conjunto está contido dentro do outro, a través da expressão <= Ex: c2 <= c1 O retorno será True porque os valores de c2 (2 e 3) estão contidos dentro de c1 (que agora é 1, 2 e 3)."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 156,
      "text": "Diferença entre conjuntos Outra expressão matemática bastante comum é fazer a diferença entre dois conjuntos. Ex: {1, 2, 3} - {2} O retorno será: {1, 3} #O elemento 2 foi subtraído dos conjuntos."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 157,
      "text": "16 – Interpolação Quando estam os escrevendo nossos primeiros códigos, costumamos escrever todas expressões de forma literal e, na verdade, não há problema nenhum nisto. Porém quando estamos avançando nos estudos de programação iremos ver aos poucos que é poss ível fazer a mesma coisa de diferentes formas, e a proficiência em uma linguagem de programação se dá quando conseguirmos criar códigos limpos, legíveis, bem interpretados e enxutos em sua sintaxe. O ponto que eu quero cheg ar é que pelas boas práticas de programação, posteriormente usaremos uma simbologia em nossas expressões que deixarão nosso cógido mais limpo, ao mesmo tempo um menor número de caracteres por linha e um menor número de linhas por código resultam em um programa que é executado com performance superior . Um dos conceitos que iremo s trabalhar é o de máscaras de substituição que como o próprio nome já sugere, se dá a uma série de símbolos reservados pelo sistema que servirão para serem substituídos por um determinado dado ao longo do código. Vamos ao exemplo: nome1 = input ('Digite o seu nome' ) A partir daí poderíamos simplesmente mandar exibir o nome que o usuário digitou e que foi atribuído a variável nome"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 157,
      "text": "nado dado ao longo do código. Vamos ao exemplo: nome1 = input ('Digite o seu nome' ) A partir daí poderíamos simplesmente mandar exibir o nome que o usuário digitou e que foi atribuído a variável nome1 . Ex: nome1 = input ('Digite o seu nome' ) print(nome1) O resultado será o nome que o usuário digitou anteriormente. Porém existe uma forma mais elaborada, onde exibiremos uma mensagem e dentro da mensagem haverá uma máscara que será substituída pelo nome digitado pelo usuário. Vamos supor que o usuário irá digitar “Fernando”, então teremos um código assim:"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 158,
      "text": "nome1 = input ('Digite o seu nome' ) print('Seja bem vindo %s'%(nome1)) O resultado será: Seja bem vindo Fernando Repare que agora existe uma mensagem de boas vindas seguida da máscara %s (que neste caso está deixando espaço aser substituído por uma string ) e após a frase existe um operador que irá ler o que está atribuído a variável nome1 e irá substituir pela máscara. As máscaras de substituição podem suportar qualquer tipo de dado desde que referencia dos da forma correta: %s(string) ou %d(número inteiro) por exemplo. Também é possível usar mais de uma máscara se necessário, desde que se respeite a ordem das máscaras com seus dados a serem substituídos e a sintaxe equivalente, que agora é representada por { } contendo dentro o número da ordem dos índices dos dados a serem substituídos pelo comando .format( ). Por exemplo: nota1 = '{0} está reprovado, assim como seu colega {1}' print(nota1.format( 'Pedro' , 'Francisco' )) O Resultado será: Pedro está reprovado, assim como seu colega Francisco Este tipo de interpolação também funcionará normalmente sem a necess idade de identificar a ordem das máscaras, podendo deixar as { } chaves em branco."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 159,
      "text": "Avançando com interpolações nome = 'Maria' idade = 30 Se executarmos o comando print( ) da seguinte forma: print('Nome: %s Idade: %d' % (nome, idade)) O interp retador na hora de exibir este conteúdo irá substibuir %s pela variável do tipo string e o %d pela variável do tipo int declarada anteriormente, sendo assim, o retorno será: Nome: Maria Idade: 30 Python vem sofrendo uam serie de \"atualizações\" e uma delas de maio r impacto diz respeito a nova forma de se fazer as interpolações, alguns programadores consideraram essa mudança uma \"mudança para pior\", mas é tudo uma questão de se acostumar com a nova sintaxe. Por quê estou dizendo isto, porque será bastante comum você pegar exemplos de códigos na web seguindo a sintaxe antiga, assim como códigos já escritos em Python 3 que adotaram essa nova sintaxe que mostrarei abaixo. Importante salientar que as sintaxes antigas não serão (ao menos por enquanto) descontinuadas, ou seja, você pode escrever usando a que quiser , ambas funcionarão, mas será interessante começar a se acostumar com a nova. Seguindo o mesmo exemplo anterior , agora em uma sintaxe intermediaria: print('Nome: {0} Idade: {1}'.format(nome, idade)) O resultado será: No"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 159,
      "text": " mas será interessante começar a se acostumar com a nova. Seguindo o mesmo exemplo anterior , agora em uma sintaxe intermediaria: print('Nome: {0} Idade: {1}'.format(nome, idade)) O resultado será: Nome: Maria Idade: 30 Repare que agora o comando vem seguido de um índic e ao qual sera substituido pelos valores encontrados no .format( )."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 160,
      "text": "E agora por fim seguindo o padrão da nova sintaxe, mais simples e funcional que os anteriores: nome = 'Maria' idade = 30 print(f'Nome: {nome }, Idade: {idade }') Repare que o operador .format( ) foi abreviado para simplesmente f no início da sentença, e dentro de suas máscaras foram referenciadas as variáveis a serem substituídas. O resultado será: Nome: Maria Idade: 30 O ponto que eu quero que você observe é que a medida que as linguagens de programaçã o vão se modernizando, elas tendem a adotar sintaxes e comandos mais fáceis de serem lidos, codificados e executados. A nova sinta xe, utilizando de chaves { } para serem interpoladas, foi um grande avanço também no sentido de que entre chaves é possível escrev er expressões (por exem plo uma expressão matemática) que ela será lida e interpretada normalmente, por exemplo: nome = 'Maria' idade = 30 print(f'Nome: {nome }, Idade: {idade }') print(f'{nome } tem 3 vezes minha idade, ela tem {3 * idade } anos' ) O resultado será: Nome: Maria, Idade: 30 Maria tem 3 vezes minha idade, ela tem 90 anos Repare que a expressão matemática de multiplicação foi realizada dentro da máscara de substituição, e ela não gerou nenhum erro pois o interpr"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 160,
      "text": " Idade: 30 Maria tem 3 vezes minha idade, ela tem 90 anos Repare que a expressão matemática de multiplicação foi realizada dentro da máscara de substituição, e ela não gerou nenhum erro pois o interpretador está trabalhando com seu valor atribuído, que neste caso era 30."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 161,
      "text": "Representação visual:"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 162,
      "text": "17 – Funções Já vimos anteriormente as funções print( ) e input( ), duas das mais utilizadas quando estamos criando estruturas básicas para nossos programas. Agora que você já passou por outros tópicos e já acumula uma certa bagagem de conhecimento, seria interessante nos aprofunda rmos mais no assunto funções, uma vez que existem muitas possibilidades novas quando dominarmos o uso das mesmas. Uma função, independentemente da linguagem de programação, é um bloco de códigos que podem ser executados e reutilizados livremente, quantas vezes forem necessá rias. Uma função pode conter dentro de seus parâmetros uma série de instruções a serem executad as cada vez que a referenciamos, sem a necessidade de escrever várias vezes o mesmo bloco de código. Para ficar mais claro imagine que no corpo de nosso código serão feitas diversas vezes a operação de somar dois valores e atribuir seu resultado a uma variável, é possível criar uma vez esta calculadora de soma e definir ela como uma função, de forma que eu posso posteriormente no mesmo código reutilizar ela apenas mudando seus parâmetros."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 163,
      "text": "Funções predefinidas A linguagem Python já conta com uma série de funções pré definidas e pré carregadas por sua IDE, prontas para uso. Como dito anteriormente, é muito comum utilizarmos, por exemplo, a função print( ) que é uma função dedicada a exibir em tela o que é lhe dado como parâmetro (o que está dentro dos parênteses). Outro exemplo seria a função len( ) que mostra o tamanho de um determinado dado. Existe a possibilidade de importarmos módulos externos, ou seja, funções já criadas e testadas que estão disponíveis para o usuário porém fazem parte de bibliotecas externas, que não vêm carregadas por padrão. Por exemplo é possível importar de uma biblioteca chamada math as funções sin( ), cos( ) e tg( ), que respectivamente, como seu nome sugere, funções prontas para calcular o seno, o cosseno e a tangente de um determinado valor ."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 164,
      "text": "Funções personalizadas Seguindo o nosso raciocínio, temos funções prontas pré carregadas, funções prontas que simplesmente podemo s importar para nosss código e haverão situações onde o meio mais rápido ou prático será criar uma função própria personalizada para uma determinada situação. Basicamente quand o necessitamos criar uma função personalizada, ela começará com a declaração de um def, é o meio para que o interpretador assuma que a partir dess a palavra reservada está sendo criada uma função. Uma função personalizada pode ou não receber parâmetros (linhas/blocos de código entre parênteses), pode retornar ou não algum dado ou valor oo usuário e por fim, terá um bloco de código inden tado para receber suas instruções."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 165,
      "text": "Função simples, sem parâmetros def boas_vindas (): print('Olá, seja bem vindo ao meu programa!!!' ) print('Espero que você tenha uma boa experiência...' ) print(boas_vindas()) Analisando o código podemos perceber que na primeira linha está o comando def seguido do nome dado a nova função, neste caso boas_vindas( ). Repare que após o nome existe dois pontos : e na linha abaixo, indentado, existem dois comandos print( ) com duas frases. Por fim, dado o comando print(boas_vindas()) foi chamada a função e seu conteúdo será exibido em tela. O retorno será: Olá, seja bem vindo ao meu programa!!! Espero que você tenha uma boa experiência... Representação visual: Como mencionado anteriormente, uma vez definida essa função boas_vindas( ) toda vez que eu quiser usar ela (seu conteúdo na verdade) basta fazer a referência corretamente."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 166,
      "text": "Função composta, com parâmetros def eleva_numero_ao_cubo (num): valor_a_retornar = num * num * num return (valor_a_retornar) num = eleva_numero_ao_cubo( 5) print(num) Repare que foi definida a função eleva_numero_ao_cubo(num) com num como parâmetro, posteriormente foi criada uma variável temporária de nome valor_a_retornar que pega num e o multiplica por ele mesmo 3 vezes (elevando ao cubo), por fim existe a instrução de retornar o valor atribuído a valor_a_retornar . Seguindo o código existe uma variável num que chama a função eleva_numero_ao_cubo e dá como parâmetro o valor 5 (que pode ser alterado livremente), e finalizando executa o comando print( ) de num que irá axecutar toda a mecânica criada na função eleva_numero_ao_cubo com o parâmetro dado, neste caso 5. O retorno será: 125 Representação visual:"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 167,
      "text": "Função composta, com *args e **kwargs Outra possibilidade que existe em Python é a de trabalharmos com *args e com **kwargs , que nada mais são do que instruções reservadas ao sistema para que permita o uso de uma quantidade variável de argumentos. Por conversão se usa a nomenc latura args e kwargs mas na verdade você pode usar o nome que quiser , o marcador que o interpretador buscará na verdade serão os * asteriscos simples ou duplos. Importante entender também que, como estamos falando em passar um número variável de parâmetros, isto significa que internamente no caso de *args os mesmos serão tratados como uma lista e no caso de **kwargs eles serão tratados como dicionário. Exemplo *args def print_2_vezes (*args): for parametro in args: print(parametro + '!' + parametro + '!') print_2_vezes( 'Olá Mundo!!! ' ) Definida a função print_2_vezes(*args) é passado como instrução um comando for, ou seja um laço que irá verificar se a variável temporaria parametro está contida em args , como instrução do laço é passado o comando print , que irá exibir duas vezes e concatenar o que estiver atribuido a variável temporária parametro . Por fim, seguindo o código é chamad a a função print_2_v"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 167,
      "text": " instrução do laço é passado o comando print , que irá exibir duas vezes e concatenar o que estiver atribuido a variável temporária parametro . Por fim, seguindo o código é chamad a a função print_2_vezes e é passado como parâmetro a string ‘Olá Mundo!!!’ . Lembrando que como existem instruç ões dentro de instruções é importante ficar atento a indentação das mesmas. O retorno será: Olá Mundo!!! !Olá Mundo!!! Representação visual:"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 168,
      "text": "Exemplo de **kwargs: def informacoes (**kwargs): for dado , valor in kwargs.items(): print(dado + '-' + str(valor)) informacoes( nome ='Fernando' , idade =30, nacionalidade ='Brasileiro' ) Definida a função informacoes(**kwargs) é passado como instrução o comando for, que irá verificar a presença dos dados atribuídos a dado e valor , uma vez que kwargs espera que, como num dicionário, sejam atribuidos chaves:valores. Por fim, se estes parametros estiverem contidos em kwargs será dado o comando print dos valores de dados e valores, convertidos para string e concatenados com o sepa rador -. Então é chamada a função informacoes e é passado como chaves e valores os dados contidos no código acima. O retorno será: nome-Fernando idade-30 nacionalidade-Brasileiro Representação visual:"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 171,
      "text": "18 – Comandos dir( ) e help( ) O Python como padrão nos fornece uma série de operadores que facilitam as nossas vidas para executar comandos com nossos códigos, mas é interessante voce raciocinar que o que convencionalmente usamos quando estamos codificando nossas ideias não chega a ser 10% do que o python realmente tem para oferecer , então, estudando mais a fundo a documentação ou usando o comando dir, podemos perguntar a um tipo de objeto (int, float , string , list, etc...) todos os recursos internos que ele possui, além disso é possível importar para o python novas funcionalidades, que veremos futuramente neste mesmo curso. Como exemplo digamos que estamos criando uma lista para guardar nela diversos tipos de dados. Pela sintaxe, uma lista é um objeto/variável que pode receber qualquer nome e tem como caracteristica o uso de colchetes [ ] para guardar dentro os seus dados. Ex: Lista1 = [] Lista vazia lista2 = [ 1,'Carlos' ] Lista com o valor 1 alocad o na posição 0 do índice e com 'Carlos' alocado na posição 1 do índice. Representação visual: Usando o comando dir(lista2) Iremos obter uma lista de todas as possíveis funções que podem ser executadas sobre uma lista ['__add__', '"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 171,
      "text": " 'Carlos' alocado na posição 1 do índice. Representação visual: Usando o comando dir(lista2) Iremos obter uma lista de todas as possíveis funções que podem ser executadas sobre uma lista ['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__',"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 172,
      "text": "'__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'appe nd', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort'] Muito parecido com o dir( ) é o comando help( ), você pode usar o comando help(lista2) e você receberá também uma lista (agora muito mais detalhada) com todas possíveis funções a serem executadas sobre a suas listas. Ex: lista2 = [ 1,'Carlos' ] print(help(lista2)) O retorno será: | list(iterable=(), /) | | Built-in mutable sequence. | | If no argument is given, the constructor creates a new empty list. | The argument must be an iterable if specified. | | Methods defined here: | | __add__(self, value, /) | Return self+value. | | __contains__(self, key , /) | Return key in self. | | __delitem__(self, key , /) | Delete self[key]. | | __eq__(self, value, /) | Return self==value. | | __ge__(self, value, /) | Return self>=value. | | __getattribute_"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 172,
      "text": " key , /) | Return key in self. | | __delitem__(self, key , /) | Delete self[key]. | | __eq__(self, value, /) | Return self==value. | | __ge__(self, value, /) | Return self>=value. | | __getattribute__(self, name, /)"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 173,
      "text": "| Return getattr(self, name). | | __getitem__(...) | x.__getitem__(y) <==> x[y] | | __gt__(self, value, /) | Return self>value. | | __iadd__(self, value, /) | Implement self+=value. | | __imul__(self, value, /) | Implement self*=value. | | __init__(self, /, *args, **kwargs) | Initialize self. See help(type(self)) for accurate signature. | | __iter__(self, /) | Implement iter(self). | | __le__(self, value, /) | Return self<=value. | | __len__(self, /) | Return len(self). | | __lt__(self, value, /) | Return self<value. | | __mul__(self, value, /) | Return self*value. | | __ne__(self, value, /) | Return self!=value. | | __repr__(self, /) | Return repr(self). | | __reversed__(self, /) | Return a reverse iterator over the list. | | __rmul__(self, value, /) | Return value*self. | | __setitem__(self, key , value, /) | Set self[key] to value. | | __sizeof__(self, /)"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 174,
      "text": "| Return the size of the list in memory , in bytes. | | append(self, object, /) | Append object to the end of the list. | | clear(self, /) | Remove all items from list. | | copy(self, /) | Return a shallow copy of the list. | | count(self, value, /) | Return number of occurrences of value. | | extend(self, iterable, /) | Extend list by appending elements from the iterable. | | index(self, value, start=0, stop=9223372036854775807, /) | Return first index of value. | | Raises V alueError if the value is not present. | | insert(self, index, object, /) | Insert object before index. | | pop(self, index=-1, /) | Remove and return item at index (default last). | | Raises IndexError if list is empty or index is out of range. | | remove(self, value, /) | Remove first occurrence of value. | | Raises V alueError if the value is not present. | | reverse(self, /) | Reverse *IN PLACE*. | | sort(self, /, *, key=None, reverse=False) | Stable sort *IN PLACE*. | | ---------------------------------------------------------------------- | Static methods defined here: | | __new__(*args, **kwargs) from builtins.type | Create and return a new object. See help(type) for accurate signature. | | ------------"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 174,
      "text": "------------------------------- | Static methods defined here: | | __new__(*args, **kwargs) from builtins.type | Create and return a new object. See help(type) for accurate signature. | | ----------------------------------------------------------------------"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 175,
      "text": "| Data and other attributes defined here: | | __hash__ = None Repare que foi classificado e listado cada recurso poss ível de ser executado em cima de nossa lista2 , assim como o retorno que é esperado em cada uso."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 176,
      "text": "19 – Builtins e bibliotecas pré-alocadas Builtins, atraves do comando dir( ), nada mais é do que uma forma de vocÊ pesquisar quais são os módulos e recursos que já vieram pré-alocados em sua IDE. De forma que você pode pesquisar quais são as funcionalidades que estão disponíveis, e, principalmente as indisponíveis, para que você importe o módulo complementar necessário. Para ficar mais claro, imagine que você consegue fazer qualquer operação matemática básica pois essas funcionalidades já estão carregadas, pré-alocadas e prontas para uso em sua IDE. Caso você necessite usar expressões matemáticas mais complexas, é necessário importar a biblioteca math para que novas funcionalidades sejam inclusas em seu código. Na prática você pode executar o comando dir(__builtins__) para ver tudo o que está disponível em sua IDE em tempo real. Ex: print(dir(__builtins__)) O retorno será: ['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesW arning', 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationW arning', 'EOF Error', 'Ellipsis', 'Enviro"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 176,
      "text": "fferError', 'BytesW arning', 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationW arning', 'EOF Error', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FileExistsError', 'FileNotFoundError', 'FloatingPointError', 'Futur eWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportW arning', 'IndentationError', 'IndexError', 'InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'ModuleNotFoundError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationW arning', 'PermissionError', 'ProcessLookupError', 'RecursionError', 'ReferenceError', 'ResourceW arning', 'RuntimeError',"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 177,
      "text": "'RuntimeW arning', 'StopAsyncIteration', 'StopIteration', 'SyntaxError', 'SyntaxW arning', 'SystemError', 'SystemExit', 'TabError', 'TimeoutE rror', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeT ranslateError', 'UnicodeW arning', 'UserW arning', 'ValueError', 'Warning', 'WindowsError', 'ZeroDivisionError', '__build_class__', '__debug__', '__doc__', '__import__', '__loader__', '__name__', '__package__', '__spec__', 'abs', 'all', 'any', 'ascii', 'bin', 'bool', 'breakpoint', 'bytearray', 'bytes', 'callable', 'chr', 'clas smethod', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globa ls', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map' , 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'rang e', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'stati cmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip'] Cada elemento dessa lista é "
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 177,
      "text": "t', 'property', 'quit', 'rang e', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'stati cmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip'] Cada elemento dessa lista é um módulo pré-alocado, pronta para uso. Importante lembrar que o que faz com que certas palavras e expressões fiquem reservadas ao sistema é justamente um módulo ou biblioteca carrega dos no builtin. Não é possível excluir tudo o que está pré-carrega do, mas só a fim de exemplo, se você excluísse esses módulos básicos o interpretador não teria parâmetros para verificar no código o que é o que de acordo com a sintaxe. Repare na sintaxe, __builtins__ é um tipo de variável mas ela é reservada do sistema, você não pode alterá-la de forma alguma, assim como outros elementos com prefixo ou sufixo __."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 178,
      "text": "Importando bibliotecas Em Python, de acordo com a nossa necessidade, existe a possibilidade de trabalharmos com as bibliotecas básicas já inclusas, ou importarmos outras bibliotecas que nos tragam novas funcionalidades. Python como já dissemos anterioemente algumas vezes, é uma linguagem de programação \"com pilhas inclusas\", ou seja, as bibliotecas básicas que você necessita para grande parte das funções básicas já vem incluídas e pré-alocadas, de forma que basta chamarmos a função que queremos para de fato usá-la. Porém, dependendo de casos específicos, podemos precisar fazer o uso de funções que não são nativas ou que até mesmo são de bibliotecas externas ao Python padrão, sendo assim necessário que importemos tais bibliotecas para acessarmos suas funções. Em Python existem duas formas básicas de trabalhar mos com as importações, de forma bastante simples, podemos importar uma biblioteca inteira a referenciando pelo nome após o comando import, ou podemos importar apenas algo de dentro de uma biblioteca externa para incor mporarmos em nosso códig o, através do comando from (nome da biblioteca) import (nome da função). Por exemplo: O Python em todas suas versões já conta com funçõe"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 178,
      "text": "o de uma biblioteca externa para incor mporarmos em nosso códig o, através do comando from (nome da biblioteca) import (nome da função). Por exemplo: O Python em todas suas versões já conta com funções matemáticas pré-alocadas, porém para usarmos alguam s funções ou constantes matemáticas, é necessaário importá-las . Supondo que por algum motivo nosso código precise de pi, para que façamos o cálculo de alguma coisa. Podemos definir manualmente o valor de pi e atribuir a algum objeto, ou podemos importá-lo de alguma biblioteca externa. No primeiro exemplo, podemos importar a biblioteca math , assim, quando referenciarm os o valor de pi ele já estará pré- alocado para uso, por exemplo."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 179,
      "text": "import math raio = 15.3 print('Area do circulo' , math.pi * raio ** 2) O valor de pi, que faz parte da biblioteca math será multiplicado pelo raio e elevado ao quadrado. Como você está importando esse item da bibliot eca math , não é necessário especificar o seu valor , neste caso, o valor de pi (3,1416) já está associado a pi. O resultado será: 735.41 No segundo exemplo, podemos importar apenas a função pi de dentro da biblioteca math, da seguinte forma. from math import pi raio = 15.3 print('Area do circulo' , pi * raio ** 2) O valor de pi será multiplicado pelo raio e elevado ao quadrado. O retorno será: 735.41 Por fim, apenas para concluir o nosso raciocínio, uma biblioteca é um conjunto de parametros e funções já prontas para facilitar a nossa vida, aqui, podemos definir manualmente o valor de pi ou usar ele já pronto de dentro de uma biblioteca. Apenas faça o seguinte exercício mental, imagine ter que programar manualmente todas as funções de um programa (incluindo as interfaces, entradas e saídas, etc...), seria absolutamente inviável. Todas linguagens de alto nível já possuem suas funções de forma pré-configuradas de forma que basta incorporá-las ao nosso builtin e fazer o "
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 179,
      "text": " entradas e saídas, etc...), seria absolutamente inviável. Todas linguagens de alto nível já possuem suas funções de forma pré-configuradas de forma que basta incorporá-las ao nosso builtin e fazer o uso."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 181,
      "text": "20 – Módulos e pacotes Um módulo, na linguagem Python, equivale ao método de outras linguagens, ou seja, o programa ele executa dentro de um módulo principal e a medida que vamos o codificando, ele pode ser dividivo em partes que podem ser inclusive acessadas remotamente. Um programa bastante simples pode rodar inteiro em um módulo, mas conforme sua complexidade aumenta, e também para facilitar a manutenção do mesmo, ele começa a ser dividido em partes. Já uma função inteira que você escreve e define, e que está pronta, e você permite que ela seja importada e usada dentro de um programa, ela recebe a nomenclatura de um pacote. Por padrão, implicito, quando você começa a escrever um programa do zero ele está rodando como modulo __main__ . Quem vem de outras linguagens de programação já está familiarizado a, quando se criava a estrutura básica de um programa, manualmente criar o método main. Em Python essa e outras estruturas básicas já estão pré-definidas e funcionando por padrão, inclusive fazendo a resolução dos nomes de forma interna e automática."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 182,
      "text": "Modularização Uma vez entendido como trabalhamos com funções, sejam elas pré definidas ou person alizadas, hora de entendermos o que significa modularizações em programação. Apesar do nome assustar um pouco, um módulo nada mais é do que pegarmos blocos de nosso código e o salvar em um arquivo externo, de forma que podemos importar o mesmo posteriormente conforme nossa necessidade. Raciocine que como visto em capítulos anteriores, uma função é um bloco de código que está ali pré-configurado para ser usado dentro daquele código, mas e se pudéssemos salvá-lo de forma a reutilizar o mesmo em outro código, outro programa até mesmo de um terceiro. Isto é possível simplesmente o transformando em um módulo. Como já mencionado anterio rmente diversas vezes, Pytho n é uma linguagem com pilhas inclusas, e isto significa que ela já nos oferece um ambiente pré-configurado com uma série de bibliotecas e módulos pré carregados e prontos para uso. Além disto é possível importar novo s módulos para adicionar novas funcion alidades a nosso código assim como também é possível criarmos um determinado bloco de código e o exportar para que se torne um módulo de outro código. Seguindo com nosso raciocíni"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 182,
      "text": "cionar novas funcion alidades a nosso código assim como também é possível criarmos um determinado bloco de código e o exportar para que se torne um módulo de outro código. Seguindo com nosso raciocínio aqui é onde começaremos a trabalhar mais diretamente importando e usando o conteúdo disponível em arquivos externos, e isto é muito fácil de se fazer desde que da maneira correta. Em modularização tudo começa com um determinado bloco de código que se tornará um módulo, código pronto e revisado, sem erros e pronto para executar a sua função desejada, salve o mesmo com um nome de facil aces so e com a extensão .py. Em Python todo arquível legível pela IDE recebe inicialmente a extensão reservada ao sistema .py. Posteriormente compilando o executável"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 183,
      "text": "de seu programa isto pode ser alterado mas por hora, os arquivos que estamos trabalhando recebem a extensão .py. Partindo para prática: Vamos modularizar o código abaixo: def msg_boas_vindas (): print('Seja Muito Bem V indo ao Meu Programa' ) def msg_para_o_usuario (nome): print(f'{nome }, espero que esteja tendo uma boa experiência...' ) Salve este bloco de código com um nome de fácil identificação, por exemplo, boasvindas.py Representação visual: Agora vamos importar esse módulo para dentro de outro arquivo de seu código. Em sua IDE, abra ou crie outro arquivo em branco qualquer , em seguida vamos usar o comando import para importar para dentro desse código o nosso módulo previamente salvo boasvindas.py . import boasvindas Em seguida, importado o módulo, podemos dar comandos usando seu nome seguido de uma instrução, por exemplo ao digitarmos boasvindas e inserirmos um ponto, a IDE irá nos mostrar que comandos podemos usar de dentro dele, no nosso caso, usaremos por enquanto a primeira opção, que se refere a função msg_boas_vindas( ). import boasvindas boasvindas.msg_boas_vindas()"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 184,
      "text": "Se mandarmos rodar o código, o retorno será: Seja Muito Bem Vindo ao Meu Programa Seguindo com o uso de nosso módulo, temos uma segunda função criada que pode receb er uma string como argumento. Então pela lógica usamos o nome do módulo, “ponto”, nome da função e passamos o argumento. Por exemplo a string ‘Fernando’ . import boasvindas boasvindas.msg_boas_vindas() boasvindas.msg_para_o_usuario( 'Fernando' ) O Retorno será: Seja Muito Bem V indo ao Meu Programa Fernando, espero que esteja tendo uma boa experiência... Outro exemplo, supondo que estamos criando uma calculadora, onde para obtermos uma performance melhor (no que diz respeito ao uso de memória), separamos cada operação realizada por essa calculadora em um módulo diferente. Dessa forma, no corpo de nossa aplicação principal podemos nos focar ao código que irá interagir com o usuário e chamar módu los e suas funções enqua nto as funções em si só são executadas de forma independente e no momento certo. Ex: Inicialmente criamos um arquivo de nome soma.py que ficará responsá vel por conter o código da função que irá somar dois números. def soma (num1 , num2): s = int(num1) + int(num2) return s Repare no código, dentro desse a"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 184,
      "text": "um arquivo de nome soma.py que ficará responsá vel por conter o código da função que irá somar dois números. def soma (num1 , num2): s = int(num1) + int(num2) return s Repare no código, dentro desse arquivo temos apenas três linhas que contém tudo o que precisamos, mas em outras situações, a idéia de modularizar bloco s de código é que eles podem ser bastante extensos dependendo de suas funcionalidades. Aqui"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 185,
      "text": "apenas criamo s uma função de nome soma( ) que recebe como parâmetros duas variáveis num1 e num2 , internamente a variável temporária s realiza a operação de somar o primeiro número com o segundo e guardar em si esse valor . Por fim, esse valor é retornado para que possa ser reutilizado fora dessa função. Agora criamos um arquivo de nome index.py e dentro dele o seguinte código: import soma print(f'O resultado da soma é: {soma.soma( 8,3)}') Note que inicialmente estamos importando o arquivo soma.py (na importação não é necessário o uso da extensão do arquiv o). Por fim criamos uma mensagem onde na máscara de substituição estamos executando a função soma e passando como parâmetros (para num1 e num2 ) os números 8 e 3. Nesse caso o retorno será 11. Caso você queira criar a interação com o usuário, para nesse exemplo anterior , que o mesmo digite os números, esse processo deve ser feito dentro do módulo da função. Em soma.py def soma (num1 , num2 ): num1 = input ('Digite um número: ' ) num2 = input ('Digite outro número: ' ) s = int(num1) + int(num2) return s Em index.py import soma print(f'O resultado da soma é: {soma.soma( 0,0)}') Apenas note que este código é idêntico ao anterior ,"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 185,
      "text": "m2 = input ('Digite outro número: ' ) s = int(num1) + int(num2) return s Em index.py import soma print(f'O resultado da soma é: {soma.soma( 0,0)}') Apenas note que este código é idêntico ao anterior , e na execução do programa, esses valores 0 e 0 definidos aqui serão substituídos e processados pelos valores que o usuário digitar ."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 186,
      "text": "Uma dúvida bastante comum a quem está aprendendo a programar em Python é se precisamos usar a extensão do arquivo quando import amos algum módulo e a resposta é não. Porém, o arquivo de módulo em ques tão precisa estar na mesma pasta em que estamos trabalhando com os demais arquivos, para que a IDE o ache e consiga o importar . Na verdade, o Python inicialmente procurará o arquivo em ques tão no diretório atual, se não encontrar ele buscará o arquivo nos diretórios salvos como PATH. O recomendável é que você mantenha seus arquivos agrupados em um diretório comum. Outro conceito importante de ser citado a esta altura é o conceito de Pacotes. Em Python não existe uma grande distinção entre esta forma de se trabalhar com módulos se comparado a outras linguagens de programação. Raciocine que, a medida que você for modularizando seu código, é interessante também dividir categorias de módulos em pastas para melhor organização em geral. Toda vez que criarmos pastas que guardam módulos dentro de si, em Python costumamos chamar isso de um pacote. Raciocine também que quanto mais modularizado e organizado é seu código, mais fácil será fazer a manutenção do mesmo ou até mesmo a implementação "
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 186,
      "text": "de si, em Python costumamos chamar isso de um pacote. Raciocine também que quanto mais modularizado e organizado é seu código, mais fácil será fazer a manutenção do mesmo ou até mesmo a implementação de novas funcionalidades porque dessa forma, cada funcionalidade está codificada em um bloco independente, e assim, algum arquivo corrom pido não prejudica muito o funcionamento de todo o programa. Por fim, na prática, a grande diferença que haverá quando se trabalha com módulos agrupa dos por pacotes será a forma com que você irá importar os mesmos para dentro de seu código principal. Importando de módulos: import soma"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 187,
      "text": "Importando o módulo soma (supondo que o mesmo é um arquivo de nome soma.py no mesmo diretório). import soma as sm Importando soma e o referenciando como sm por comodidade. from soma import calculo_soma Importando somente a função calculo_soma do módulo soma . Importando de pacotes: import calc.calculadora_soma Importando calculadora_soma que faz parte do pacote calc. Essa sintaxe calc . calculadora_soma indica que calc é uma subpasta onde se encontra o módulo calculadora_soma . from calc.calculadora_soma import soma Importando a função soma , do módulo calculadora_soma , do pacote calc. from calc.calculadora_soma import soma as sm Importando a função soma do módulo calculadora_soma do pacote calc e a referenciando como sm. Por fim, tenha em mente que todo programa, dependendo claro de sua complexidade, pode possuir incontáveis funcionalidades explícitas ao usuário, mas que o programador definiu manualmente cada uma delas e as categorizou, seguindo uma hierarquia, em funções, módulos, pacotes e bibliotecas. Você pode fazer o uso de toda essa hierarquia criando a mesma manualmente ou usando de funções/módulos/pacotes e bibliotecas já pront as e pré-configurada s disponíveis para o Py"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 187,
      "text": "acotes e bibliotecas. Você pode fazer o uso de toda essa hierarquia criando a mesma manualmente ou usando de funções/módulos/pacotes e bibliotecas já pront as e pré-configurada s disponíveis para o Python. O uso de uma biblioteca inteira ou partes específicas dela tem grande impacto"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 188,
      "text": "na performance de seu programa, pelas boas práticas de programação, você deve ter na versão final e funcional de seu programa apenas aquilo que interessa, modularizar os mesmos é uma prática comum para otimizar o código. Ex: Criamos um pacote de nome vendas (uma pasta no diretório com esse nome) onde dentro criamos o arquivo calc_preco.py que será um módulo. Na sequência criamos uma função interna para calc_preco. Aqui, apenas para fins de exemplo, uma simples função que pegará um valor e aplicará um aumento percentual. Em vendas\\calc_preco.py def aum_preco (preco , porcentagem): npreco = preco + (preco * (porcentagem / 100)) return npreco Em index.py import vendas.calc_preco preco = 19.90 preco_novo = vendas.calc_preco.aum_preco(preco , 4) print(f'O valor corrigido é: {preco_novo }') Repare que pela sintaxe, inicialmente importamos o módulo calc_preco do pacote vendas . Em seguida, como já fizemos outras vezes em outros exemplos, usamos essa função passando parâmetros (um valor inicial e um aumento, nesse caso, de 4%) e por fim exibimos em tela o resultado dessa função. Poderíamos otimizar esse código da seguinte forma: from vendas.calc_preco import aum_preco as ap preco = 19.90 p"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 188,
      "text": "l e um aumento, nesse caso, de 4%) e por fim exibimos em tela o resultado dessa função. Poderíamos otimizar esse código da seguinte forma: from vendas.calc_preco import aum_preco as ap preco = 19.90 preco_novo = ap(preco , 4)"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 189,
      "text": "print(f'O valor corrigido é: {preco_novo }') O resultado seria o mesmo, com um ganho de performance por parte do processamento. Nesse exemplo, o retorno seria: 20.69. Apenas a nível de curiosidade, se você consultar a documentação do Python verá uma infinidade de códigos prontos e pré-configurados para uso. Dependendo o uso, Python tem à disposição bibliotecas inteiras, que contém dentro de si inúmeros pacotes, com inúmeros módulos, com inúmeras funções a disposição, bastando as importar da maneira correta e incorporar em seu código."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 190,
      "text": "21 – Programação orientada a objetos"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 191,
      "text": "Classes Antes de mais nada é importante salientar aqui que, em outras linguag ens de programação quando começam os a nos aprofundar nos estudos de classes normalmente há uma separação desde tipo de conteúdo dos demais por estar entrando na área comumente chamada de orientação a objetos , em Python não há necessidade de fazer tal distinção uma vez que toda a linguagem em sua forma já é nativa orientada a objetos, logo, progressivamente fomos avançando em seus conceitos e avançaremos muito mais sem a necessidade dessa divisão. Apenas entenda que classes estão diretamente ligadas a programação orientada a objeto, que nada mais é uma abstração de como lidaremos com certos tipos de problemas em nosso código, criando e usando objetos de uma forma mais complexa, a partir de estruturas “moldes”. Uma classe dentro das linguagens de programação nada mais é do que um objeto que ficará reservado ao sistema tanto para indexação quanto para uso de sua estrutura, é como se criassemos uma espécie de molde de onde podemos criar uma série de objetos a partir desse molde. Assim como podemos inserir diver sos outros objetos dentro deles de forma que fiquem instanciáveis (de forma que permita manipular"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 191,
      "text": "olde de onde podemos criar uma série de objetos a partir desse molde. Assim como podemos inserir diver sos outros objetos dentro deles de forma que fiquem instanciáveis (de forma que permita manipular seu conteúdo), modularizados, oferecendo uma complexa mas muito eficiente maneira de se trabalhar com objetos. Parece confuso mas na prática é relativamente simples, tenha em mente que para Python toda variável é um objeto, a forma como lhe insta nciamos e/ou irá fazer com que o interpretador o trate com mais ou menos privilégios dentro do código. O mesmo acontece quando trabalharmos com classes. Porém o fato de haver este tipo de dado específico “classe” o define como uma estrutura lógica modelável e reutilizável para nosso código."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 192,
      "text": "Uma classe fará com que uma variável se torne de uma categoria reservada ao sistema para que possamos atribuir dados, valores ou parâmetros de maior complexidade, é como se transformássemos uma simples variável em uma super variável, de maior possibilidade de recur sos e de uso. Muito cuidado para não confundir as coisas, o que é comum de acontecer no seu primeiro contato com programação orientada a objetos, raciocine de forma direta que uma classe será uma estrutura molde que poderá comportar dados dentro de si assim como servir de molde para criação de novas variáveis externas. Pela sintaxe convencionalm ente usamos o comando class (palavra reservada ao sistema) para especificar que a partir deste ponto estamos trabalhando com este tipo de dado, na sequência definimos um nome para essa classe, onde por convenção, é dado um nome qualquer desde que o mesmo se inicie com letra maiúscula. Por exemplo: class Carro: carro1 = 'Gol modelo 2016 completo' carro2 = 'Celta ano 2015 4 portas' carro3 = 'Uno ano 2015 baixa quilometragem' carro4 = 'Clio 2018 flex doc vencido' print(Carro.carro1) O Retorno será: Gol modelo 2016 completo Inicialmente foi criada a classe Carro (class é uma palavra "
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 192,
      "text": "ro3 = 'Uno ano 2015 baixa quilometragem' carro4 = 'Clio 2018 flex doc vencido' print(Carro.carro1) O Retorno será: Gol modelo 2016 completo Inicialmente foi criada a classe Carro (class é uma palavra reservada ao sistema e o nome da classe deve ser case sensitive, ou seja, iniciar com letra maiúscula), dentro dessa classe foram inseridos 4 carros com suas respectivas características. Por fim, o comando print( ) mandou exibir em tela a instância carro1 que pertence a Carro . Segu indo a lógica do conceito explicado anteriormente, Carro é uma super variável que tem carro1 (uma simples variáv el) contida nele. O prefixo class faz com que o"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 193,
      "text": "interpretador reconheça essa hierarquia de variáveis e trabalhe da maneira correta com elas. Abstraindo esse exemplo para simplificar seu entendimento, Carro é uma classe/categoria/tipo de objeto, dentro dessa categoria existem diversos tipos de carros, cada um com seu nome e uma descrição relacionada ao seu modelo. Representação visual: Para entendermos de forma prática o conceito de uma “super variável”, podemos raciocinar vendo o que ela tem de diferente de uma simples variável contendo dados de qualquer tipo. Raciocine que pelo básico de criação de variáveis, quando precisávamos criar, por exemplo, uma variável pessos que dentro de si, como atributos, guardasse dados como nome, idade, sexo, etc... isto era feito transformando esses dados em uma lista ou dicionár io, ou até mesmo criando várias variáveis uma para cada tipo de dado, o que na prática, em programas de maior complexidade, não é nada eficiente. Criando uma classe Pessoa , poderíamos da mesma forma ter nossa variável pessoa , mas agora instanciando cada atributo como objeto da classe Pessoa , teríamos acesso direto a esses dados posteriormente, ao invés de buscar dados de índice de um dicionário por exemplo. Dessa for"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 193,
      "text": "oa , mas agora instanciando cada atributo como objeto da classe Pessoa , teríamos acesso direto a esses dados posteriormente, ao invés de buscar dados de índice de um dicionário por exemplo. Dessa forma, instanciar , referenciar , manipular esses dados a partir de uma classe também se torna mais direto e eficiente a partir do momento que você domina essa técnica. Ex:"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 194,
      "text": "class Pessoa: pass pessoa1 = Pessoa() pessoa1.nome = 'Fernando' pessoa1.idade = 32 print(pessoa1.nome) print(pessoa1.idade) Apenas inicia ndo o entendimento desse exemplo, inicialmente definimos a classe Pessoa que por sua vez está vazia de argumentos. Em seguida criamos a variável pessoa1 que recebe como atribuição a classe Pessoa( ), a partir desse ponto, podemos começar a inserir dados (atributos) que ficarão guardados na estrutura dessa classe. Simplesmente aplicando sobre a variável o comando pessoa1.nome = ‘Fernando’ estamos criando dentro dessa variável pessoa1 a variável nome que tem como stributo a string ‘Fernando’ , da mesma forma, dentro da variável pessoa1 é criada a variável idade = 32. Note que pessoa1 é uma super variável por conter dentro de si outras variáveis com diferentes dados/valores/atributos... Por fim, passando como parâm etro para nossa função print( ) pessoa1.nome e pessoa1.idade . O retorno será: Fernando 32 No exemplo anterior , bastan te básico, a classe em si estava vazia, o que não é o convencional, mas ali era somente para exemplificar a lógica de guardar variáveis e seus respectivos atributos dentro de uma classe. Normalmente a lógica de se usar c"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 194,
      "text": "em si estava vazia, o que não é o convencional, mas ali era somente para exemplificar a lógica de guardar variáveis e seus respectivos atributos dentro de uma classe. Normalmente a lógica de se usar classes é justamente que elas guardem dados e se necessário executem funções a partir dos mesmos. Apenas para entender o básico sobre esse processo, analise o bloco de código seguinte: class Pessoa: def acao1 (self):"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 195,
      "text": "print('Ação 1 está sendo executada...' ) pessoa1 = Pessoa() pessoa1.acao1() Criada a classe Pessoa , dentro dela é definida a função acao1(self) que por sua vez exibe em tela uma mensagem. Na sequência é criada a variável pessoa1 que tem como atrituição tudo o que estiver dentro da classe Pessoa . Assim como no exemplo anterior adicionamos variáveis com atributos dentro dessa classe a partir da variável inicial, podemos também chamar uma função interna da classe sobre essa variável diretamente aplicando sobre si o nome da função, nesse caso pessoa1.acao1( ) executará a função interna na respectiva variável. O retorno será: Ação 1 está sendo executada... Por fim, note que para tal feito simplesmente referenciamos a variável pessoa1 e chamamos diretamente a função .acao1( ) sobre ela."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 196,
      "text": "Definindo uma classe Em Python podemos manualmente definir uma classe respeitando sua sintaxe adequada, seguindo a mesma lógica de sempre, há uma maniera correta de identificar tal tipo de objeto para que o interpretador o reconh eça e trabalhe com ele. Basicamente quando temos uma função dentro de uma classe ela é chamada de método dessa classe, que pode executar qualquer coisa. Outro ponto é que quando definimos uma classe manualmente começamos criando um construtor para ela, uma função que ficará reservada ao sistema e será chamada sempre que uma instância dessa classe for criada/usad a para que o interpretador crie e use a instância da variável que usa essa classe corretamente. Partindo para prática, vamos criar do zero uma classe chamada Usuario : class Usuario: def __init__ (self, nome , idade): self.nome = nome self.idade = idade def boas_vindas (self): print(f'Usuário: {self.nome }, Idade: {self.idade }') usuario1 = Usuario( nome ='Fernando' , idade ='31') usuario1.boas_vindas() print(usuario1.nome) Repare que o código começa com a palavra reservada class seguida do nome da classe que estamos definindo, Usuario , que pela sintaxe o nome de uma classe começa com letra maiúsc"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 196,
      "text": ") print(usuario1.nome) Repare que o código começa com a palavra reservada class seguida do nome da classe que estamos definindo, Usuario , que pela sintaxe o nome de uma classe começa com letra maiúscula. Em seguida é declarado e definido o construtor da classe __init__ , que sempre terá self como parâmetro (instância padrão), seguido de quantos parâmetros personalizados o usuário criar, desde que separados por vírgula. Pela indentação existem duas chamadas de self para atribuir um nome a variável nome e uma idade a variável"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 197,
      "text": "idade . Na sequência há uma nova função apenas chamando a função print para uma string que interage com as variáveis temporárias declaradas anteriormente. Por fim é criada uma variável usuario1 que recebe a classe Usuário e a atribui dados para nome e idade . Na execução de usuario1.boas_vindas( ) tudo construido e atribuido até o momento finalmente irá gerar um retorno ao usuário. Há ainda uma linha adicional que apenas chama a função boas_vindas para a variável usuário1 , apenas por convenção mesmo. O retorno será: Usuário: Fernando, Idade: 31 Fernando Representação visual:"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 198,
      "text": "Alterando dados/valores de uma instância Muito bem, mas e se em algum momento você precisa alterar algum dado ou valor de algo instanciado dentro de uma classe, isto é possível? Sim e de forma bastante fácil, por meio de atribuição direta ou por intermédio de funções que são específicas para manipulação de objetos de classe. Exemplo de manipulação direta: usuario1 = Usuario( nome ='Fernando' , idade ='31') usuario1.nome = 'Fernando Feltrin' usuario1.boas_vindas() print(usuario1.nome) Aproveitando um trecho do código anterior , repare que na terceira linha é chamada a variável usuario1 seguid a de .nome atribuindo uma nova string ‘Fernando Feltrin’ . Ao rodar novamente este código o retorno será: Usuário: Fernando Feltrin, Idade: 31 Exemplo de manipulação via função específica: usuario1 = Usuario( nome ='Fernando' , idade ='31') usuario1.nome = 'Fernando Feltrin' setattr (usuario1 , 'nome' , 'Fernando B. Feltrin' ) delattr (usuario1 , 'idade' ,) setattr (usuario1 , 'idade' , '32') print(usuario1.nome) print(usuario1.idade) Repare que estamos trabalhando ainda no mesmo trecho de código anterior , porém agora na terceira linha temos a função setattr( ) que tem como parâmetro a variáve"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 198,
      "text": "(usuario1.nome) print(usuario1.idade) Repare que estamos trabalhando ainda no mesmo trecho de código anterior , porém agora na terceira linha temos a função setattr( ) que tem como parâmetro a variável usuario1 e irá pegar sua instância nome e alterar para nova strin g ‘Fernando B. Feltrin’ . Logo em seguida existe a função delattr( ) que pega a variável usuario1 e deleta o que houver de dado sob a instância idade , logo na"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 199,
      "text": "sequência uma nova chamada da função setattr( ) irá pegar novamente a variável usuario1 , agora na instância idade e irá atribuir o novo valor , ‘32’, em forma de string mesmo. Por fim, dando os respectivos comandos print para que sejam exibidas as instâncias nome e idade da variável usuario1 o retorno serão os valores atualizados. Neste caso o retorno será: Usuário Fernando B. Feltrin, Idade: 32 Representação visual: Em suma, quando estamos trabalhando com classes existirão funções específicas para que se adicionem novos dados (função setattr(variavel, ‘instancia’ , ‘novo dado’) ), assim como para excluir um determinado dado interno de uma classe (função delattr(variavel, ‘instancia’) )."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 200,
      "text": "Aplicando recursividade O termo recursividade em linguagens de programação diz respeito a quando um determinado objeto ou função chamar ele mesmo dentro da execução de um bloco de código executando sobre si um incremento. Imagine que você tem um objeto com dois parâmetros, você aplicará uma condição a ser atingida, porém para deixar seu código mais enxuto você passará funções que retornam e executam no próprio objeto. Por exemplo: def imprimir (maximo , atual): if atual >= maximo: return print(atual) imprimir(maximo , atual + 1) imprimir( 10, 1) O resultado será: 1 2 3 4 5 6 7 8 9 Repare que o que foi feito é que definimos um objeto imprimir onde como parametros (variáveis) temos maximo e atual , em seguida colocamos a condição de que se atual for maior ou igual a maximo , pare a execução do códig o através de seu retorno. Se essa condição não for atingida, imprima atual , em sequida chame novamente o objeto imprimir , mudando seu segundo parâmetro para atual + 1. Por fim, definimos que imprimir recebe como argumentos (o que iremos atribuir a suas variáveis) 10 para maximo"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 201,
      "text": "e 1 para atual. Enquanto atual não for maior ou igual a 10 ele ficará repetindo a execução desse objeto o incrementando em 1. Em outras palavras, estamos usando aquele conceito de increvento, visto em for anteriormente, mas aplicado a objetos. Existe a possibilidade de deixar esse código ainda mais enxuto em sua recursividade, da seguinte forma: def imprimir (maximo , atual): if atual < maximo: print(atual) imprimir(maximo , atual + 1) imprimir( 10, 1) O Retorno será: 1 2 3 4 5 6 7 8 9 Representação visual:"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 203,
      "text": "Herança Basicamente quando falamos em herança, a lógica é exatamente a mesma de uma herança “na vida real”, se sou herdeiro de meus pais, automaticamente eu herdo certas características e comportamentos dos mesmos. Em programação a herança funciona da mesma forma, temos um objeto com capacidade de herdar certos parametros de outro, na verdade uma classe que herda métodos, parâmetros e outras propriedades de sua classe referência. Imagin e que você tem um objeto Carro com uma série de características (modelo, ano, alcool ou gasolina, manual ou automático), a partir dele é criado um segundo objeto Civic, que é um Carro inclusive com algumas ou todas suas características. Dessa forma temos objetos que herdam características de objetos anteriores. Em Python, como já vimos anteriormente, a estrutura básica de um programa já é pré configurada e pronta quando iniciamos um novo projeto em nossa IDE, fica subentendido que ao começar um projeto do zero estamos trabalhando em cima do método principal do mesmo, ou método __main__. Em outras linguagens inclus ive é necessário criar tal método e importar bobliotecas para ele manualmente. Por fim quando criamos uma classe que será herdada ou que "
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 203,
      "text": "ipal do mesmo, ou método __main__. Em outras linguagens inclus ive é necessário criar tal método e importar bobliotecas para ele manualmente. Por fim quando criamos uma classe que será herdada ou que herdará características, começamos a trabalhar com o método __init__ que poderá, por exemplo, rodar em cima de __main__ sem substitu ir suas características, mas sim adiciona r novos atributos específicos. Na prática, imagine que temos uma classe Carros , e como herdeira dela teremos duas novas classes chamadas Gol e Corsa , que pela sintaxe deve ser montada com a seguinte estrutura lógica: class Carros(): def __init__ (self, nome , cor): self.nome = nome self.cor = cor"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 204,
      "text": "def descricao (self): print(f'O carro: {self.nome } é {self.cor}') class Gol(Carros): def __init__ (self, nome , cor): super ().__init__ (nome , cor) class Corsa(Carros): def __int__ (self, nome ,cor): super ().__init__ (nome , cor) Repare que primeiro é declarada a classe Carros , sem parâmetro nenhum, porém com um bloco de código indentado, ou seja, que pertence a ele. Dentro deste bloco existe o construtor com os tipos de dados aos quais farão parte dessa classe, neste caso, iremos atribuir inform ações de nome e de cor a esta class e. Há um segundo método definido onde é uma declaração de descrição, onde será executada a impressão de uma string que no corpo de sua sentença irá substituir as máscaras pelas informações de nome e cor que forem repassadas. Então é criada a classe Gol que tem como parâmetro Carros , sendo assim, Gol é uma classe filha de Carros . Na linha de código indentada existe o construtor e a função super( ) que é responsável por herdar as informações contidas na classe mãe. O mesmo é feito com a classe filha Corsa . A partir disto, de toda essa estrutura montada, é possível criar variáveis que agora sim atribuirão dados de nome e cor para as classes anteriorm"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 204,
      "text": "classe mãe. O mesmo é feito com a classe filha Corsa . A partir disto, de toda essa estrutura montada, é possível criar variáveis que agora sim atribuirão dados de nome e cor para as classes anteriormente criadas. class Carros(): def __init__ (self, nome , cor): self.nome = nome self.cor = cor def descricao (self): print(f'O carro: {self.nome } é {self.cor}')"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 205,
      "text": "class Gol(Carros): def __init__ (self, nome , cor): super ().__init__ (nome , cor) class Corsa(Carros): def __int__ (self, nome ,cor): super ().__init__ (nome , cor) gol1 = Gol( 'Gol 2019 Completo' , 'branco' ) corsa2 = Corsa( 'Corsa 2017 2 Portas' , 'vermelho' ) print(gol1.descricao()) print(corsa2.descricao()) Repare que é criada a variável gol1 que recebe a classe Gol e passa como parâmetro duas strings , que pela sequência serão substituídas por nome e cor na estrutura da classe. O mesmo é feito criando a variável corsa2 e atribuindo parametros a classe Corsa . Por fim é dado o comando print , que recebe como parâme tro a variável gol1 seguid o da função definida descricao . gol1 receberá os dados atribuídos a classe Gol e .descricao irá executar sua função print , substituindo as devidas máscaras em sua sentença. O retorno será: O carro: Gol 2019 Completo é branco O carro: Corsa 2017 2 Portas é vermelho"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 207,
      "text": "Em suma, é possível trabalhar livremente com classes que herdam características de outras, claro que estruturas de tamanha complexidade apenas serão usadas de acordo com a necessidade de seu código possuir de trabalhar com a manipulação de tais tipos de dados."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 208,
      "text": "Polimorfismo Polimorfismo basicamente é a capacidade de você reconhecer e reaproveitar as funcionalidades de um objeto para uma situação adversa, se um objeto que você já possui já tem as características que você necessita pra quê você iria criar um novo objeto com tais características do zero. Na verdade já fizemos polimorfismo no capítulo anterior enquanto usávamos a função super( ) que é dedicada a possibilitar de forma simples que possamos subescrever ou extender métodos de uma classe para outra conforme a necessidade. class Carros(): def __init__ (self, nome , cor): self.nome = nome self.cor = cor class Gol(Carros): def __init__ (self, nome , cor): super ().__init__ (nome , cor) Repare que a classe filha Gol possui seu método construt or e logo em seguida usa da função super( ) para buscar de Carros os parâmetros que ela não tem."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 209,
      "text": "Encapsulamento O conceito de encapsulamento basicamente é que existe como um objeto e suas funcionalidades ficar encapsulado, fechado de forma que eu consiga instanciá-los sem mesmo conhecer seu conteúdo interior e também é uma forma de tornar um objeto privado, reservado ao sistema de forma que possamos usar livremente porém se o criamos e encapsulamos a idéia é que ele realmente seja imutável. Principalmente quando usarmos um código de terce iros, muitas das vezes teremos o conhecimento daquele objeto, sua funcionalidade e conseguiremos incorporá-lo em seu código sem a necessidade de alterar ou configurar algo de seu conteúdo, apenas para uso mesmo. Imagine uma cápsula de um determinado remédio, você em grande parte das vezes desconhece a maioria dos componen tes químicos que estão ali dentro, porém você sabe o princípio ativo (para que serve) aquele remédio e o toma conforme a necessidade. Porém, outro fator importante é que em outras linguagens de programação este conceito de tornar um objeto privado é muito levado a sério, de forma que em certos casos ele é realmente imutável. Em Python, como ela é uma linguagem dinamicamente tipada, na verdade não existirão objetos com atribu"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 209,
      "text": "r um objeto privado é muito levado a sério, de forma que em certos casos ele é realmente imutável. Em Python, como ela é uma linguagem dinamicamente tipada, na verdade não existirão objetos com atributos privados ao sistema, até porque não há necessidade disso, você ter o controle sempre é importante, e quando necessário, bastará transformar um objeto em um __objeto__ para que o mesmo fique reservado ao sistema e ainda seja possível o modificar ou incrementar caso necessário. objeto1 = 'Descrição por extenso' #variável/objeto de uso comum. __objeto1__ = 'Descrição por extenso' #variável/objeto que está reservado ao sistema."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 210,
      "text": "print(__objeto1__) O retorno será: Descrição por extenso Como em Python tudo é objeto, tudo é dinâmico, e a linguagem coloca o controle total em suas mãos, há a convenção de alguns autores de que o encapsulamento em Python seria mais um aspecto estético (ao bater o olho em qualquer underline duplo __ saber que ali é algo reservad o ao sistema) do que de fato ter de se preocupar com o acesso e a manipulação daquele tipo de variável/objeto, dado ou arquivo."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 211,
      "text": "22 – T racebacks / exceções Uma das situações que ainda não havíamos comentado, mas que certamente já ocorreu com você ao longo de seus estudos foi o fato de que em certas circunstâncias, quando houver algum erro de lógica ou de sintaxe, o interpretador irá gerar um código de erro. Tais códigos em nossa IDE são chamados de tracebacks e eles tem a finalidade de tentar apontar ao usuário qual é o erro e em que linha do código o mesmo está ocorrendo. Na prática grande parte das vezes um traceback será um erro genérico que apenas irá nos informar o erro, mas não sua solução. Partindo para camada de software que o usuário tem acesso, nada pior do que ele tentar executar uma determinada função de seu programa e o mesmo apresentar algum erro e até mesmo travar e fechar sozinho. Lembre-se que sempre será um erro humano, de lógica ou de sintaxe. Por exemplo: num1 = 13 num2 = ad soma = num1 + num2 print(soma) O retorno será: Traceback (most recent call last): File \"C:/Users/Fernando/teste_001.py\", line 2, in <module> num2 = ad NameError: name 'ad' is not defined Repare no código, declaradas duas variáveis num1 e num2 e uma terceira que faz a soma das duas anteriores, executado o comando prin"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 211,
      "text": "\", line 2, in <module> num2 = ad NameError: name 'ad' is not defined Repare no código, declaradas duas variáveis num1 e num2 e uma terceira que faz a soma das duas anteriores, executado o comando print o retorno será um traceback . Analisando o traceback ele nos mostra que na execução no nosso atual arquivo (no exemplo"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 212,
      "text": "teste_001.py ), na linha 2 o dado /valor ad não é reconhecido como nenhum tipo de dado."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 213,
      "text": "Comandos try , except e finally Pelas boas práticas de programação, uma solução elegante é prevermos os possíveis erros e/ou na pior das hipóteses apenas mostrar algum a mensagem de erro ao usuário, apontando que está havendo alguma exceção, algo não previsto durante a execução do programa. Ainda trabalhando em cima do exemplo anterior , o traceback se deu pelo fato de estarmos tentando somar um int de valor 13 e um dado ad que não faz sentido algum para o interpretador . Através do comando try (em tradução livre do inglês = tentar) podemos fazer , por exemplo, com que o interpretador tente executar a soma dos valores daquelas variáveis. Se não for possível, será executado o comando except (em tradução livre = exceç ão), que terá um print mostrando ao usuário uma mensagem de erro e caso for possível realizar a opera ção o mesmo executará um comando finally (em tradução livre = finalm ente) com o retorno e resultado previsto. try: num1 = int(input ('Digite o primeiro numero: ' )) num2 = int(input ('Digite o segundo numero: ' )) except : print('Numero invalido, tente novamente;' ) finally : soma = int(num1) + int(num2) print(f'O resultado da soma é: {soma }') Repare que o comando ini"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 213,
      "text": " int(input ('Digite o segundo numero: ' )) except : print('Numero invalido, tente novamente;' ) finally : soma = int(num1) + int(num2) print(f'O resultado da soma é: {soma }') Repare que o comando inicial deste bloco de código é o try, pela indentação, note que é declarada a variavel num1 que pede para o usuário que digite o primeiro número, em seguida é declarada uma segunda variavel de nome num2 e novamente se pede para que o usuário digite o segundo número a ser somado. Como ja vimos"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 214,
      "text": "anteriormente, o comando input aceita qualquer coisa que o usuário digitar , de qualquer tamanho, inclusive com espaços e comandos especiais, o input encerra sua fase de captação quando o usuário finalmente aperta ENTER . Supondo que o usuário digitou nas duas vezes que lhe foi solicitado um número, o código irá executar o bloco finally , que por sua vez cria a variá vel temporária soma , faz a devida soma de num1 e num2 e por fim exibe em tela uma string com o resultado da soma . Mas caso ainda no bloco try o usuário digitar algo que não é um número, tornando impossível a soma dos mesmos, isto irá gerar uma exceção, o bloco except é responsável por capturar esta exceção, ver que algo do bloco anterior está errado, e por fim, neste caso, exibe uma mensagem de erro previamente declarada. Este é um exemplo de calculadora de soma de dois números onde podemos presumir que os erros que ocorrerão são justamente quando o usuário digitar algo fora da normalidade. Importante salientar que se você olhar a documentação do Python em sua versão 3 você verá que existem vários muitos tipos de erro que você pode esperar em seu código e por fins de performance (apenas por curiosidade, Python 3 ofer"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 214,
      "text": "cê olhar a documentação do Python em sua versão 3 você verá que existem vários muitos tipos de erro que você pode esperar em seu código e por fins de performance (apenas por curiosidade, Python 3 oferece reconhecimento a 30 tipos de erro possíveis), junto do comando except : você poderia declarar o tipo de erro para poupar processamento. Supondo que é um programa onde o tipo de arquivo pode gerar uma exceção, o ideal, pelas boas práticas de programação seria declarar um except TypeError: assim o interpretador sabe que é previsto aquele tipo de erro em questão (de tipo) e não testa todos os outros possíveis erros. Porém em seus primeiros programas não há problema nenhum em usar um except : que de forma básica chama esta função que irá espera r qualquer tipo de erro dentro de seu banco de dados sintático. Na prática você verá que é bastante comum usarmos try e except em operações onde o programa interage com o usuá rio, uma vez que é ele que pode inserir um dado inválido no programa gerando erro."
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 216,
      "text": "23 – Considerações finais Muito bem, como tudo o que tem um começo tem um fim, e chegamos ao final deste pequeno livro sobre Python. Espero que a leitura deste livro tenha sido tão prazerosa para você quan to foi para mim escrevê-lo. E mais importante do que isso, espero que de fato você tenha aprendido a dar os seus primeiros passos dentro dessa linguagem de programação que é incrível. Seja por hobby ou para fina profissionais, lembre-se que este é apenas o passo inicial de seu aprendizado de Python, há um mundo de possibilidades esperando por você dentro de todas as áreas da programação em que você pode de especializar . Agradeço a compra deste material e lhe desejo sucesso em suas novas empreitadas. Sem mais. Fernando Feltrin"
    },
    {
      "source": "Python do ZERO à Programação Orientada a Objetos (Fernando Belomé Feltrin).pdf",
      "page": 217,
      "text": "Gostou de aprender sobre programação, com minha metodologia, em Python especificamente? Quer dar um passo além? Que tal aprender sobre redes neurais artificiais, ciência de dados e aprendizado de máquina de forma simples e objetiva. Ciência de dados e Aprendizado de Máquina é o segundo livro de minha autoria onde explico de forma simples e objetiva o que são redes neurais artificiais e quais são suas principais aplicações. É um livro que lhe oferecerá uma abordag em prática sobre essa área de inteligência artificial, também com as devidas explicações para cada linha de código!"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 1,
      "text": "Algoritmia e Programação Jorge Santos Instituto Superior de Engenharia do Porto Departamento de Engenharia Informática Fevereiro de 2006"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 3,
      "text": "Índice 1 Algoritmia e Programação 1 1.1 Conceitos básicos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 1.1.1 Introdução . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 1.1.2 Programação estruturada . . . . . . . . . . . . . . . . . . . . . . 3 1.1.3 Notação utilizada . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 1.1.4 Operadores utilizados nos algoritmos . . . . . . . . . . . . . . . 6 1.2 Instruções sequenciais . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 1.2.1 Saída de dados . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 1.2.2 Entrada de dados . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 1.2.3 Atribuição . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8 1.2.4 Exercícios Resolvidos . . . . . . . . . . . . . . . . . . . . . . . . 9 1.2.4.1 Cambiar moedas . . . . . . . . . . . . . . . . . . . . . . 9 1.2.4.2 Distância euclidiana entre dois pontos . . . . . . . . . 10 1.2.4.3 Determinar perímetro e área de circunferência . . . . . 11 1.2.5 Exercícios Propostos . . . . . . . . . . . . . . . . . . . . . . . . . 11 1.2.5.1 Calcular índice de massa corpórea (IMC) . . . . . . . . 11 1.2.5.2 Conve"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 3,
      "text": "o e área de circunferência . . . . . 11 1.2.5 Exercícios Propostos . . . . . . . . . . . . . . . . . . . . . . . . . 11 1.2.5.1 Calcular índice de massa corpórea (IMC) . . . . . . . . 11 1.2.5.2 Converter horas, minutos e segundos . . . . . . . . . . 11 1.2.5.3 Teorema de Pitágoras . . . . . . . . . . . . . . . . . . . 12 1.2.5.4 Converter temperaturas . . . . . . . . . . . . . . . . . . 12 1.3 Instruções de Decisão . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12 1.3.1 Decisão binária . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12 1.3.2 Decisão múltipla . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 1.3.3 Exercícios Resolvidos . . . . . . . . . . . . . . . . . . . . . . . . 16 1.3.3.1 Distância entre dois pontos . . . . . . . . . . . . . . . . 16 1.3.3.2 Classiﬁcar em função da média . . . . . . . . . . . . . 17 1.3.3.3 Determinar o máximo de 3 valores . . . . . . . . . . . 18 1.3.3.4 Determinar triângulo válido . . . . . . . . . . . . . . . 20 1.3.4 Exercícios Propostos . . . . . . . . . . . . . . . . . . . . . . . . . 20 1.3.4.1 Classiﬁcar triângulo . . . . . . . . . . . . . . . . . . . . 20 1.3.4.2 Divisão . . . . . . . . . . . . . . . . . . . "
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 3,
      "text": "Exercícios Propostos . . . . . . . . . . . . . . . . . . . . . . . . . 20 1.3.4.1 Classiﬁcar triângulo . . . . . . . . . . . . . . . . . . . . 20 1.3.4.2 Divisão . . . . . . . . . . . . . . . . . . . . . . . . . . . 21 1.3.4.3 Resolver equação da forma ax2+bx+c=0. . . . . . 21 1.3.4.4 Converter entre escalas de temperaturas . . . . . . . . 21 1.3.4.5 Calcular índice de massa corpórea (IMC) . . . . . . . . 21 iii"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 4,
      "text": "1.3.4.6 Determinar ano bissexto . . . . . . . . . . . . . . . . . 22 1.3.4.7 Parque de estacionamento . . . . . . . . . . . . . . . . 22 1.4 Instruções de Repetição (Ciclos) . . . . . . . . . . . . . . . . . . . . . . . 22 1.4.1 Ciclo condicional: repetir-até . . . . . . . . . . . . . . . . . . . . 23 1.4.2 Ciclo condicional: enquanto-fazer . . . . . . . . . . . . . . . . . 23 1.4.3 Ciclo determinístico: para-fazer . . . . . . . . . . . . . . . . . . . 24 1.4.4 Exercícios Resolvidos . . . . . . . . . . . . . . . . . . . . . . . . 25 1.4.4.1 Calcular somatório entre dois limites . . . . . . . . . . 26 1.4.4.2 Calcular factorial de um número . . . . . . . . . . . . 26 1.4.4.3 Determinar se um número é primo . . . . . . . . . . . 27 1.4.4.4 Determinar nome e idade da pessoa mais nova de um grupo . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28 1.4.4.5 Determinar o aluno melhor classiﬁcado e a média das notas de uma turma . . . . . . . . . . . . . . . . . . . . 29 1.4.5 Exercícios Propostos . . . . . . . . . . . . . . . . . . . . . . . . . 30 1.4.5.1 Divisão através de subtracções sucessivas . . . . . . . 30 1.4.5.2 Determinar o máximo e mínimo de uma série . . . . . 31 1.4.5"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 4,
      "text": "s Propostos . . . . . . . . . . . . . . . . . . . . . . . . . 30 1.4.5.1 Divisão através de subtracções sucessivas . . . . . . . 30 1.4.5.2 Determinar o máximo e mínimo de uma série . . . . . 31 1.4.5.3 Determinar quantidade de números primos . . . . . . 31 1.4.5.4 Determinar se um número é perfeito . . . . . . . . . . 31 1.4.5.5 Calcular potência por multiplicações sucessivas . . . . 31 1.4.5.6 Maior número ímpar de uma sequência de valores . . 31 1.4.5.7 Algarismos de um número . . . . . . . . . . . . . . . . 31 1.4.5.8 Apresentação gráﬁca de temperaturas . . . . . . . . . 32 1.4.5.9 Soma dos algarismo de um número . . . . . . . . . . . 32 1.4.5.10 Jogo de adivinhar o número . . . . . . . . . . . . . . . 32 1.4.5.11 Capicua de um número . . . . . . . . . . . . . . . . . . 32 1.4.5.12 Conversão de base numérica . . . . . . . . . . . . . . . 32 1.5 Traçagens e Teste . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33 1.6 Programação modular . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34 1.6.1 Sub-rotinas, parâmetros e variáveis locais . . . . . . . . . . . . . 35 1.6.1.1 Funções . . . . . . . . . . . . . . . . . . . . . . . . . . . 35 1.6.1.2 Procedimentos "
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 4,
      "text": ". . . . . . . . . . . . 34 1.6.1 Sub-rotinas, parâmetros e variáveis locais . . . . . . . . . . . . . 35 1.6.1.1 Funções . . . . . . . . . . . . . . . . . . . . . . . . . . . 35 1.6.1.2 Procedimentos . . . . . . . . . . . . . . . . . . . . . . . 37 1.6.2 Exercícios resolvidos . . . . . . . . . . . . . . . . . . . . . . . . . 37 1.6.2.1 Função que devolve o maior algarismo de um número 37 1.6.2.2 Função que indica se um número é perfeito . . . . . . 38 1.6.3 Exercícios propostos . . . . . . . . . . . . . . . . . . . . . . . . . 38 1.6.3.1 Função média de dois números . . . . . . . . . . . . . 39 1.6.3.2 Função lei de Ohm . . . . . . . . . . . . . . . . . . . . . 39 1.6.3.3 Função somatório . . . . . . . . . . . . . . . . . . . . . 39 1.6.3.4 Funções para codiﬁcar e descodiﬁcar números . . . . 39 1.6.3.5 Números primos . . . . . . . . . . . . . . . . . . . . . . 40 1.7 Vectores . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40 1.7.1 Exercícios resolvidos . . . . . . . . . . . . . . . . . . . . . . . . . 43 1.7.1.1 Funções manipulando vectores . . . . . . . . . . . . . 43 iv"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 5,
      "text": "1.7.2 Exercícios propostos . . . . . . . . . . . . . . . . . . . . . . . . . 45 1.7.2.1 Determinar desvio padrão de uma série . . . . . . . . 45 1.7.2.2 Prova de atletismo . . . . . . . . . . . . . . . . . . . . . 45 1.8 Ordenação e pesquisa de vectores . . . . . . . . . . . . . . . . . . . . . . 45 1.8.1 Ordenação por selecção . . . . . . . . . . . . . . . . . . . . . . . 46 1.8.2 Pesquisa Sequencial . . . . . . . . . . . . . . . . . . . . . . . . . 47 1.8.3 Exercicios resolvidos . . . . . . . . . . . . . . . . . . . . . . . . . 48 1.8.3.1 Inverter um vector . . . . . . . . . . . . . . . . . . . . . 48 1.8.4 Exercícios propostos . . . . . . . . . . . . . . . . . . . . . . . . . 49 1.8.4.1 Junção ordenada de vectores . . . . . . . . . . . . . . . 49 1.8.4.2 Método de ordenação por troca directa . . . . . . . . . 49 1.8.4.3 Filtro gráﬁco . . . . . . . . . . . . . . . . . . . . . . . . 49 v"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 6,
      "text": "vi"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 7,
      "text": "Lista de Figuras 1.1 Estrutura de um computador . . . . . . . . . . . . . . . . . . . . . . . . 2 1.2 Notação dos Fluxogramas . . . . . . . . . . . . . . . . . . . . . . . . . . 5 1.3 Fluxograma e sintaxe - Instruções sequenciais . . . . . . . . . . . . . . . 6 1.4 Fluxograma e sintaxe - Saída de dados . . . . . . . . . . . . . . . . . . . 7 1.5 Fluxograma e sintaxe - Entrada de dados . . . . . . . . . . . . . . . . . 7 1.6 Fluxograma e sintaxe - Atribuição . . . . . . . . . . . . . . . . . . . . . 8 1.7 Fluxograma e sintaxe - Instrução decisão se-então . . . . . . . . . . . . 12 1.8 Fluxograma e sintaxe - Instrução decisão se-então-senão . . . . . . . . 13 1.9 Fluxograma e sintaxe - Instrução decisão múltipla seleccione-caso .15 1.10 Fluxograma da determinação do máximo de 3 valores . . . . . . . . . . 18 1.11 Fluxograma e sintaxe - Instrução ciclo repetir-até . . . . . . . . . . . 23 1.12 Fluxograma e sintaxe - Instrução ciclo enquanto-fazer . . . . . . . . . 24 1.13 Fluxograma e sintaxe - Instrução ciclo para-fazer . . . . . . . . . . . . 25 1.14 Divisão inteira através de subtracções sucessivas . . . . . . . . . . . . . 33 1.15 Fluxograma e sintaxe - Função . . . . . . . . . . "
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 7,
      "text": "taxe - Instrução ciclo para-fazer . . . . . . . . . . . . 25 1.14 Divisão inteira através de subtracções sucessivas . . . . . . . . . . . . . 33 1.15 Fluxograma e sintaxe - Função . . . . . . . . . . . . . . . . . . . . . . . 36 1.16 Fluxograma e sintaxe - Procedimento . . . . . . . . . . . . . . . . . . . . 37 1.17 Ilustração da lei de Ohm . . . . . . . . . . . . . . . . . . . . . . . . . . . 39 1.18 Vector unidimensional: notas . . . . . . . . . . . . . . . . . . . . . . . . 41 1.19 Vector bidimensional (matriz): imagem . . . . . . . . . . . . . . . . . . 42 1.20 Imagem vídeo - original . . . . . . . . . . . . . . . . . . . . . . . . . . . 49 1.21 Imagem vídeo - em tratamento . . . . . . . . . . . . . . . . . . . . . . . 50 vii"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 8,
      "text": "viii"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 9,
      "text": "Lista de Tabelas 1.1 Operadores relacionais, lógicos e aritméticos . . . . . . . . . . . . . . . 6 1.2 Índice de massa corpórea . . . . . . . . . . . . . . . . . . . . . . . . . . 22 1.3 Traçagem do algoritmo 1.14 . . . . . . . . . . . . . . . . . . . . . . . . . 34 Lista de Algoritmos 1.1 Cambiar euro para dólar . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10 1.2 Calcular distância euclidiana entre pontos . . . . . . . . . . . . . . . . . 10 1.3 Determinar perímetro e área de circunferência . . . . . . . . . . . . . . . 11 1.4 Máquina de furação - decisão múltipla . . . . . . . . . . . . . . . . . . . 15 1.5 Máquina de furação - decisão binária . . . . . . . . . . . . . . . . . . . . 16 1.6 Calcular distância euclidiana entre pontos . . . . . . . . . . . . . . . . . 17 1.7 Classiﬁcar em função da média . . . . . . . . . . . . . . . . . . . . . . . . 17 1.8 Calcular máximo de 3 números . . . . . . . . . . . . . . . . . . . . . . . . 19 1.9 Calcular máximo de 3 números . . . . . . . . . . . . . . . . . . . . . . . . 19 1.10 Validar triângulo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20 1.11 Calcular somatório entre dois limites . . . . . . . . . . . "
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 9,
      "text": ". . . . . . . . . . . . . . . . . . . . . 19 1.10 Validar triângulo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20 1.11 Calcular somatório entre dois limites . . . . . . . . . . . . . . . . . . . . 26 1.12 Calcular factorial de um número . . . . . . . . . . . . . . . . . . . . . . . 27 1.13 Determinar se um número é primo . . . . . . . . . . . . . . . . . . . . . . 27 1.14 Determinar se um número é primo . . . . . . . . . . . . . . . . . . . . . . 28 1.15 Determinar nome/idade da pessoa mais nova . . . . . . . . . . . . . . . 29 1.16 Determinar o aluno melhor classiﬁcado e a média das notas de uma turma 30 1.17 Divisão inteira através de subtracções sucessivas (numerado) . . . . . . 33 1.18 Função maior(n) que devolve o maior algarismo de um número . . . . 38 1.19 Função perfeito(N) que indica se um número é perfeito . . . . . . . . . . 38 1.20 Manipulação de Vectores (leitura, diferença entre máximo e mínimo e número de pares e ímpares) . . . . . . . . . . . . . . . . . . . . . . . . . . 45 1.21 Utilizar a pesquisa sequencial) . . . . . . . . . . . . . . . . . . . . . . . . 47 ix"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 10,
      "text": "x"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 11,
      "text": "Resumo Estes apontamentos têm como objectivo principal apoiar os leitores que pretendam aprender programação de computadores Os conteúdos propostos têm como objectivo fornecer bases sólidas de metodo- logias de programação que auxiliem a compreensão de programas computacionais simples, a sua adaptação e desenvolvimento de novas aplicações, e estimular a capa- cidade dos leitores para: analisar e resolver problemas de programação. A estrutura destes apontamentos foi deﬁnida de acordo com a abordagem de aprender-por-exemplo , pelo que, os conceitos são apenas introduzidos de acordo com a necessidade de explicar a resolução de um determinado algoritmo. Neste manual introduzem-se as bases da algoritmia de acordo com o paradigma da programação estruturada. Em cada secção é apresentada um pequena introdu- ção teórica sobre o tópico em destaque, apresentados problemas e propostas soluções para os mesmos, adicionalmente são propostos exercícios para resolução. Na codiﬁ- cação/apresentação das soluções é geralmente Pseudo-Código e/ou Fluxogramas . Este documento compila exercícios de vários anos de ensino de muitos docentes do departamento nos quais me incluo. Ao longo do manual poderão ser"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 11,
      "text": "soluções é geralmente Pseudo-Código e/ou Fluxogramas . Este documento compila exercícios de vários anos de ensino de muitos docentes do departamento nos quais me incluo. Ao longo do manual poderão ser encontrados exemplos e exercícios propostos pelos docentes nas disciplinas de Algoritmia e Progra- mação ,Linguagens de Programação I do curso de Engenharia Informática do Departa- mento de Engenharia Informática (DEI), bem como de Programação I eProgramação II do curso Engenharia Electrotécnica do Departamento de Engenharia Electrotécnica (DEE), ambos do ISEP . xi"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 12,
      "text": "xii"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 13,
      "text": "Agradecimentos Gostaria de agradecer aos colegas que permitiram a utilização do seu material peda- gógico, em particular, Alberto Sampaio, Ana Almeida Figueiredo, Ana Madureira, Carlos Vaz de Carvalho, Conceição Neves, Isabel Sampaio e José Avelino. Estou igualmente grato a todos aqueles que reviram o manual e deram inúmeras sugestões para o seu melhoramento, nomeadamente Berta Baptista, Paulo Ferreira e Nuno Silva. Pese embora a inúmeras sugestões/correções propostas pelos referidos colegas, quaisquer erros e gralhas que subsistam no documento são, naturalmente, da minha inteira responsabilidade. Porto, Fevereiro de 2006 Jorge Santos xiii"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 14,
      "text": "ISEP/DEI - Jorge Santos xiv"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 15,
      "text": "Capítulo 1 Algoritmia e Programação Objectivos •Familiarizar os alunos com os conceitos e a terminologia associados à Informá- tica •Programar com clareza usando a metodologia da Programação Estruturada 1.1 Conceitos básicos Nesta secção são introduzidos os conceitos básicos necessários à disciplina de algo- ritmia e programação. Em particular, os conceitos de programação estruturada, pro- grama, estrutura de dados e algoritmo. 1.1.1 Introdução Informática é a ciência que estuda a informação, em particular, preocupa-se com a estrutura, criação, gestão, armazenamento, pesquisa, disseminação e transferência de informação. Para além disso, a informática estuda a aplicação da informação nas organizações. A palavra informática é resultado da contracção das palavras: in- formação auto mática . A matéria prima da informática é a informação, na sua forma mais simples, dados e a ferramenta básica é o computador. O computador está para a informática assim como o telescópio para astronomia. Um computador é um conjunto de circuitos eléctricos e electrónicos capaz de re- alizar de modo autónomo uma determinada tarefa, por obediência a um programa armazenado internamente. Assim, um computador po"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 15,
      "text": "mputador é um conjunto de circuitos eléctricos e electrónicos capaz de re- alizar de modo autónomo uma determinada tarefa, por obediência a um programa armazenado internamente. Assim, um computador pode ser visto como um sistema de computação que compreende hardware esoftware (ver ﬁgura 1.1). •Hardware - esta é a componente material/física do computador, que fornece a capacidade de: 1"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 16,
      "text": "ISEP/DEI - Jorge Santos Mémoria CPU Periféricos HardwareFerramentas de desenvolvimento Sistema OperativoSoftware AplicaçõesCOMPUTADOR Figura 1.1: Estrutura de um computador –executar um determinado tipo de instruções a uma determinada veloci- dade; –armazenar um conjunto de bytes; –comunicar com um conjunto de periféricos. Estas componentes físicas têm que receber ordens do que fazer e como se arti- cular. Esta é a função do software. •Software - esta é a componente lógica do computador, que consiste num con- junto de programas que dirigem o funcionamento do computador. Para uma melhor sistematização do software e as respectivas funções, este pode ser organizado nas seguintes categorias: –Software de Sistema Operativo - conjunto de programas que comunica di- rectamente com o hardware e é responsável pela gestão de recursos e peri- féricos. Neste conjunto incluem-se o sistema operativo e os programas de controle do funcionamento do hardware, tais como programas de parame- trização, drivers e aﬁns. –Ferramentas de desenvolvimento - conjunto de aplicações utilizadas no de- senvolvimento de aplicações. Neste conjunto incluem-se as linguagens de programação (compiladores e interpretador"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 16,
      "text": "ers e aﬁns. –Ferramentas de desenvolvimento - conjunto de aplicações utilizadas no de- senvolvimento de aplicações. Neste conjunto incluem-se as linguagens de programação (compiladores e interpretadores) e os sistemas de gestão de bases de dados. 2"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 17,
      "text": "Algoritmia e Programação –Aplicações - conjunto de aplicações que se destinam à utilização pelo utili- zador ﬁnal do sistema de computação. Regra geral o nível de abstracção é mais elevado do que nas categorias anteriores. Neste conjunto incluem-se as aplicações por medida, ferramentas de gestão, folhas de cálculo, editores de texto, etc. 1.1.2 Programação estruturada Numa primeira fase, nas décadas de 50 e 60, o desenvolvimento do hardware era o responsável pela expansão dos computadores. A maioria do investimento era feito a este nível, sendo a programação vista como uma arte. Na década de 70, incentivados pela melhoria das características de hardware (mi- niaturização e baixo custo) os informáticos foram confrontados com projectos cada vez mais soﬁsticados. Constata-se nessa altura a inversão dos custos dispendidos com hardware e software, para além do problema da ﬁabilidade do software passar a ser uma preocupação. Surge então a necessidade de transformar a tarefa de construir software numa actividade com rigor comparável a uma disciplina de engenharia nascendo assim uma nova disciplina – a Engenharia de Software – cujo objectivo é a produção de Software de modo eﬁciente em cus"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 17,
      "text": "ware numa actividade com rigor comparável a uma disciplina de engenharia nascendo assim uma nova disciplina – a Engenharia de Software – cujo objectivo é a produção de Software de modo eﬁciente em custos controlados e segurança. A produção de software, como de qualquer outro produto de engenharia passa por diferentes fases como sejam: planeamento, análise, projecto, programação, im- plementação e manutenção. Para cada uma das fases do desenvolvimento do soft- ware foram estudadas métodos e técnicas especíﬁcas. A programação estruturada enquadra-se num desses métodos e permite fasear o processo de construção de um programa descrevendo o processo computacional de um modo não ambíguo - Algo- ritmo . A programação estruturada deﬁne um conjunto de regras para elaboração de pro- gramas. A programação estruturada baseia-se no desenho modular dos programas e no reﬁnamento gradual do topo para a base. De acordo com este paradigma um programa pode ser deﬁnido pela forma se- guinte: Programa =Estrutura de Dados +Algoritmo Um algoritmo manipula dados que podem ser de diversos tipos, designadamente: números (inteiros ou reais), caracteres, cadeias de caracteres, endereços (apontado- res), lógic"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 17,
      "text": "rutura de Dados +Algoritmo Um algoritmo manipula dados que podem ser de diversos tipos, designadamente: números (inteiros ou reais), caracteres, cadeias de caracteres, endereços (apontado- res), lógicos (verdadeiro e falso). As estrutura de dados são o modo como os dados estão organizados, acedidos e alterados. De entre as mais relevantes destacam-se: variáveis simples, vectores mono e multi-dimensionais, listas, ﬁlas, árvores, grafos e ﬁcheiros. Um algoritmo consiste num conjunto ﬁnito e bem-deﬁnido de instruções que des- crevem os passos lógicos necessários à realização de uma tarefa ou resolução de um 3"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 18,
      "text": "ISEP/DEI - Jorge Santos problema, dado o estado inicial (único), a execução do algoritmo conduz ao estado ﬁnal (único). Considere-se por exemplo a seguinte receita para a confecção de uma omeleta de queijo. OMELETA DE QUEIJO FRESCO Ingredientes: •170 gr de queijo fresco •6 ovos grandes •30 gr de manteiga ou margarina •Sal q.b. Modo de Preparação: Ponha o queijo fresco numa tigela e esmague-o com uma colher de pau, até formar um puré espesso e cremoso. Bata os ovos e misture-os com o queijo, adicionando um pouco de água fria. Tempere a gosto. Derreta um pouco de gordura numa frigideira de base larga e adicione a mistura de ovos e queijo. Cozinhe em lume brando até que a omeleta ﬁque pronta mas não demasiado cozida. Estabelecendo um paralelo entre esta receita culinária e um programa, os ingredi- entes são as estruturas de dados e o modo de preparação é o algoritmo. Naturalmente que uma receita culinária usa a linguagem natural e como tal é muito difícil a sua in- terpretação por parte de um computador. De acordo com o paradigma da programação estruturada qualquer programa pode ser descrito utilizando exclusivamente as três estruturas básicas de controlo: •Instruções de Sequência - a"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 18,
      "text": "e um computador. De acordo com o paradigma da programação estruturada qualquer programa pode ser descrito utilizando exclusivamente as três estruturas básicas de controlo: •Instruções de Sequência - as instruções de sequência são instruções atómicas (simples) permitem a leitura/escrita de dados, bem como o cálculo e atribuição de valores; •Instruções de Decisão - as instruções de decisão, ou selecção, permitem a selec- ção em alternância de um ou outro conjunto de acções após a avaliação lógica de uma condição; •Instruções de Repetição - as instruções de repetição, ou ciclos, permitem a exe- cução, de forma repetitiva, de um conjunto de instruções. Esta execução de- pende do valor lógico de uma condição que é testada em cada iteração para decidir se a execução do ciclo continua ou termina. Na descrição de algoritmos são utilizados diferentes formalismos conforme o ob- jectivo ou audiência. Entre os mais comuns encontram-se o pseudo-código e ﬂuxo- gramas. 4"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 19,
      "text": "Algoritmia e Programação •Pseudo-código - consiste na descrição do algoritmo numa linguagem parecida com a linguagem natural (português, inglês ou outra) de forma estruturada. O objectivo deste formalismo é centrar a atenção do programador na lógica ou ﬂuxo do algoritmo, abstraindo-se das questões relacionadas com a sintaxe es- pecíﬁca de uma determinada linguagem de programação; •Fluxograma - consiste na descrição de um algoritmo de forma gráﬁca. Este for- malismo inclui um conjunto de símbolos gráﬁcos que representação os diferen- tes tipos de instruções anteriormente descritas: sequência, decisão e repetição. 1.1.3 Notação utilizada Na representação de ﬂuxogramas será utilizada a notação apresentada na ﬁgura 1.2: Início/Fim Entrada de dados Saída de dadosDecisãoProcessamentoExecução de sub-rotina Início de sub-rotina Fim iteração (Ciclo) Figura 1.2: Notação dos Fluxogramas Na escrita dos programas em pseudo-código serão considerados as seguintes op- ções: •Os algoritmos são delimitados pelas etiquetas início efim; •As etiquetas Entrada: eSaída: são utilizadas na explicitação das entradas e saídas de dados, respectivamente, mais relevantes para o funcionamento do algoritmo; •Os c"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 19,
      "text": "dos pelas etiquetas início efim; •As etiquetas Entrada: eSaída: são utilizadas na explicitação das entradas e saídas de dados, respectivamente, mais relevantes para o funcionamento do algoritmo; •Os comentários são precedidos do caracter ’#’ e são meramente documentais, como tal, não são executados; •As acções são descritas através de verbos no inﬁnitivo; •Foram utilizadas diferentes formatações para os conceitos a seguir explicitados, com o objectivo de tornar a leitura dos algoritmos mais simples: –variável ; 5"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 20,
      "text": "ISEP/DEI - Jorge Santos –palavra chave ; –# comentário ; 1.1.4 Operadores utilizados nos algoritmos Na escrita de algoritmos são utilizados os operadores relacionais, lógicos e aritméti- cos mais comuns de acordo com a semântica deﬁnida na tabela 1.1. <menor que >maior que ≥maior ou igual que ≤menor ou igual que =igual ̸=diferentee,∧ conjunção ou,∨disjunção não,¬negação+ soma - subtracção * multiplicação / divisão div divisão inteira % resto da divisão inteira Tabela 1.1: Operadores relacionais, lógicos e aritméticos 1.2 Instruções sequenciais As instruções do tipo sequencial são as mais simples de todas apresentando uma uma estrutura atómica. São responsáveis por permitirem fazer a entrada/saída de dados, execução de cálculos e atribuição de valores a variáveis. A noção de ordem/sequência é representada através da seta de ﬂuxo (ver ﬁgura 1.3). instrução1 instrução2 instrução3 inicio . . . <instrução1>; <instrução2>; <instrução3>; . . . fim Figura 1.3: Fluxograma e sintaxe - Instruções sequenciais 1.2.1 Saída de dados As instruções de escrita permitem fazer a saída de dados (tipicamente para o écran) sejam estes variáveis e/ou textos e/ou resultado de cálculos. Na ﬁgura 1.4é aprese"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 20,
      "text": " sequenciais 1.2.1 Saída de dados As instruções de escrita permitem fazer a saída de dados (tipicamente para o écran) sejam estes variáveis e/ou textos e/ou resultado de cálculos. Na ﬁgura 1.4é apresen- tada sintaxe proposta para a escrita de uma ou várias variáveis. 6"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 21,
      "text": "Algoritmia e Programação escrever inicio . . . escrever <lista-de-variaveis/textos>; . . . fim Figura 1.4: Fluxograma e sintaxe - Saída de dados Conforme os exemplos seguintes: início # Escrever o conteúdo da variável x ; escrever x; # Escrever o conteúdo das variáveis nome e idade ; escrever nome ,idade ; # Escrever um texto seguido do valor da variável x ; escrever \"O valor de x é:\", x; # Escrever o resultado da operação 4*4, 16 ; escrever 4*4; # Escrever 4*4 ; escrever \"4*4\"; ﬁm 1.2.2 Entrada de dados As instruções de leitura permitem fazer a entrada de dados, tipicamente a partir de um teclado, colocando-os em variáveis. Na ﬁgura 1.5é apresentada a sintaxe pro- posta para a leitura de uma ou várias variáveis. ler inicio . . . ler <lista-de-variaveis>; . . . fim Figura 1.5: Fluxograma e sintaxe - Entrada de dados No caso de se pretender ler mais do que uma variável, os nomes das variáveis separam- se por vírgulas. Considerem-se os seguintes exemplos: 7"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 22,
      "text": "ISEP/DEI - Jorge Santos início # ler a variável x ; lerx; # ler as variáveis nome e idade ; lernome ,idade ; ﬁm 1.2.3 Atribuição A instrução designada por atribuição permite atribuir o valor de uma expressão a uma variável. A variável que aparece no lado esquerdo da instrução vai assim rece- ber o valor da expressão que aparece no lado direito da mesma instrução. Do lado direito da atribuição podemos ter: um número, um texto, o resultado de um cálculo ou o conteúdo de uma outra qualquer variável. Na ﬁgura 1.6é apresentada a sintaxe proposta para a atribuição. var/c223expr inicio . . . <variável> ←<expressão>; . . . fim Figura 1.6: Fluxograma e sintaxe - Atribuição Considerem-se os seguintes exemplos: início # Atribuir o valor 5 à variável x ; x←5; # Atribuir o resultado da operação 5*5-2=23 à variável resultado ; resultado ←5*5-2; # Atribuir o valor da variável n à variável maximo ; maximo ←n; # Atribuir o texto \"Olá Mundo\"à variável txt ; txt←\"Olá mundo\"; ﬁm No exemplo seguinte são realizados dois incrementos consecutivos da variável contador . De início é atribuído o valor 1 a contador e posteriormente esta tomará o valor 2 e 3. 8"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 23,
      "text": "Algoritmia e Programação início # Inicialização da variável contador ; contador ←1; # Incremento da variável contador ; contador ←contador +1; # O resultado desta instrução é 2 ; escrever contador ; # Incremento da variável contador ; contador ←contador +1; # O resultado desta instrução é 3 ; escrever contador ; ﬁm As linguagens de programação mais divulgadas utilizam o símbolo =para re- presentar a atribuição. A razão de ser dessa opção é de ordem prática: resulta da inexistência do símbolo ’ ←’ nos teclados dos computadores. Note-se que caso fosse utilizado símbolo ’=’ o aspecto da instrução seria: contador=contador+1, o que constitui uma impossibilidade em termos estritamente matemáticos. Chama-se a atenção para o facto de as linguagens estudadas normalmente pelos principiantes em informática serem linguagens imperativas. Isto é, o que o progra- mador escreve no programa não são expressões matemáticas mas ordens (daí o impe- rativo ) para o computador cumprir. O computador vai ver a atribuição não como uma igualdade matemática (seja ela escrita com ’ ←’ ou com ’ =’), mas como uma ordem para primeiro calcular o valor da expressão à direita e depois guardar esse valor na variável "
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 23,
      "text": " atribuição não como uma igualdade matemática (seja ela escrita com ’ ←’ ou com ’ =’), mas como uma ordem para primeiro calcular o valor da expressão à direita e depois guardar esse valor na variável indicada à esquerda. 1.2.4 Exercícios Resolvidos Nesta secção são apresentados alguns problemas e respectivas soluções com o objec- tivo de ilustrar a utilização de instruções sequenciais. 1.2.4.1 Cambiar moedas O algoritmo 1.1permite cambiar euros em dólares considerando a taxa de conversão 1,17. 9"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 24,
      "text": "ISEP/DEI - Jorge Santos Entrada :taxa, valorEuro Saída :valorDolar início taxa←1,17; # Ler valor em euros ; escrever \"Introduza valor em euros=\"; lervalorEuro ; # Calcular valor em dólar ; valorDolar ←valorEuro *taxa; # Mostrar resultado ; escrever \"Valor em dolar=\", valorDolar ; ﬁm Algoritmo 1.1 :Cambiar euro para dólar Sugestão: Escreva uma variação deste algoritmo que permita câmbios entre quais- quer moedas. 1.2.4.2 Distância euclidiana entre dois pontos O algoritmo 1.2permite realizar o cálculo da distância euclidiana entre dois pontos, sendo que cada ponto é deﬁnido pelas coordenadas (x,y). A distância pode ser calcu- lada de acordo com a fórmula 1.2.1 . distância =√ (x2−x1)2+ (y2−y1)2 (1.2.1) Entrada :x1, y1, x2, y2 Saída :distancia início # Ler coordenadas do ponto 1 ; escrever \"Coordenadas ponto1 (x/y):\"; lerx1,y1 ; # Ler coordenadas do ponto 2 ; escrever \"Coordenadas ponto2 (x/y):\"; lerx2,y2 ; # Calcular distância ; distancia ←√ (x2−x1)2+ (y2−y1)2; # Mostrar resultado ; escrever \"Distância=\", distancia ; ﬁm Algoritmo 1.2 :Calcular distância euclidiana entre pontos 10"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 25,
      "text": "Algoritmia e Programação 1.2.4.3 Determinar perímetro e área de circunferência O algoritmo 1.3permite determinar o perímetro e área de uma circunferência, a partir do valor do raio. Entrada :raio Saída :perimetro, area início pi←3,1415; # Ler o valor do raio ; escrever \"Introduza valor do raio:\"; lerraio; # Calcular perímetro e área ; area←pi∗raio2; perimetro ←2∗pi∗raio; # Apresentar resultados ; escrever \"Área=\", area; escrever \"Perímetro=\", perimetro ; ﬁm Algoritmo 1.3 :Determinar perímetro e área de circunferência 1.2.5 Exercícios Propostos Nesta secção são propostos alguns problemas com vista à aplicação conjugada de instruções sequenciais. 1.2.5.1 Calcular índice de massa corpórea (IMC) O índice de massa corpórea (IMC) de um indivíduo é obtido dividindo-se o seu peso (em Kg) por sua altura (em m) ao quadrado. Assim, por exemplo, uma pessoa de 1,67m e pesando 55kg tem IMC igual a 20,14, já que: IMC =peso altura2=55kg 1, 67 m∗1, 67 m=20, 14 Escreva um programa que solicite ao utilizador o fornecimento do seu peso em kg e de sua altura em me a partir deles calcule o índice de massa corpórea do utilizador. 1.2.5.2 Converter horas, minutos e segundos Descreva um algoritmo que a par"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 25,
      "text": "ador o fornecimento do seu peso em kg e de sua altura em me a partir deles calcule o índice de massa corpórea do utilizador. 1.2.5.2 Converter horas, minutos e segundos Descreva um algoritmo que a partir de um determinado número de segundos cal- cula o número de horas, minutos e segundos correspondentes. Conforme o seguinte exemplo: 8053 s=2h+14m+13s 11"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 26,
      "text": "ISEP/DEI - Jorge Santos 1.2.5.3 Teorema de Pitágoras Descreva um algoritmo para determinar a hipotenusa de um triângulo rectângulo, dados os catetos. 1.2.5.4 Converter temperaturas Descreva um algoritmo que a partir de uma temperatura expressa em graus Fahre- nheit (tempF), calcule a temperatura expressa em graus Celsius (tempC). A conversão pode ser realizada de acordo com a fórmula 1.2.2 . tempF =32+9∗tempC 5(1.2.2) 1.3 Instruções de Decisão As instruções de decisão, ou selecção, permitem a selecção em alternância de um ou outro conjunto de acções após a avaliação lógica de uma condição. 1.3.1 Decisão binária A decisão binária permite bifurcar a execução de um algoritmo em dois ﬂuxos dis- tintos, para tal é utilizada instrução se. Esta instrução pode ser utilizada de duas formas:se-então ese-então-senão . Na ﬁgura 1.7é apresentada a sintaxe para o primeiro caso. se a condição for verdadeira é executado o bloco-instruções caso contrário nada acontece. se bloco de instruçõesentão inicio . . . se <condição> então <bloco-instruções> fim-se . . . fim Figura 1.7: Fluxograma e sintaxe - Instrução decisão se-então Considere-se o seguinte exemplo utilizando a forma se-então , no qual um a"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 26,
      "text": "o . . . se <condição> então <bloco-instruções> fim-se . . . fim Figura 1.7: Fluxograma e sintaxe - Instrução decisão se-então Considere-se o seguinte exemplo utilizando a forma se-então , no qual um aluno é aprovado se tem nota maior ou igual a 9,5: 12"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 27,
      "text": "Algoritmia e Programação Entrada :nota início escrever \"Introduza nota:\"; lernota; senota≥9,5então escrever \"O aluno foi aprovado\"; ﬁm-se ﬁm Note-se que um bloco de instruções é delimitado pelas instruções então efim-se . No segundo caso (ver ﬁgura 1.8), em que a instrução tem a estrutura se-então-senão , se a condição for verdadeira é executado o bloco-instruções1 senão é executado o bloco-instruções2 . se bloco de instruções 2senão bloco de instruções 1então inicio . . . se<condição > então <bloco-instruções1 > senão <bloco-instruções2 > fim-se . . . fim Figura 1.8: Fluxograma e sintaxe - Instrução decisão se-então-senão Considere-se o seguinte exemplo utilizando a forma se-então-senão . Entrada :lado1, lado2 Saída :area início # Ler as medidas dos lados ; escrever \"Introduza medidas dos lados:\"; lerlado1 ,lado2 ; # Calcular área ; area←lado1 *lado2 ; selado1 =lado2 então escrever \"Área do quadrado=\", area; senão escrever \"Área do rectângulo=\", area; ﬁm-se ﬁm 13"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 28,
      "text": "ISEP/DEI - Jorge Santos Neste exemplo são lidas as medidas dos lados de uma ﬁgura rectangular, sendo que no caso particular de os dois lados serem iguais estamos na presença de um quadrado. Em qualquer um dos casos é apresentada a mensagem correspondente. 14"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 29,
      "text": "Algoritmia e Programação 1.3.2 Decisão múltipla A instrução de de decisão múltipla é um caso particular de instruções encadeadas do tipose-então-senão . Normalmente é utilizada no teste de múltiplos valores de uma variável. A sintaxe proposta para a decisão múltipla encontra-se descrita na ﬁgura 1.9. seleccionar bloco de instruções nbloco de instruções 1bloco de instruções 2bloco de instruções 3caso 1 caso 2 caso 3 caso n ... inicio . . . seleccionar <variável > caso <valor1> <bloco-instruções1> caso <valor2> <bloco-instruções2> caso <valor3> <bloco-instruções3> . . . senão <bloco-instruçõesN> fim-seleccionar . . . fim Figura 1.9: Fluxograma e sintaxe - Instrução decisão múltipla seleccione-caso Considere uma máquina que permite apenas três operações, ligar, desligar e furar. O algoritmo 1.4permite modelar o funcionamento da respectiva máquina. Sendo que aquando da digitação das letras: ’L’, ’D’ e ’F’, são apresentadas, respectivamente, as mensagens: Ligar ,Desligar eFurar . No caso da letra digitada ser outra é apresentada uma mensagem de erro. Entrada :letra início # Ler letra ; escrever \"Introduza letra (L/D/F):\"; lerletra; # Testar casos e escrever mensagem respectiva ; selecci"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 29,
      "text": " letra digitada ser outra é apresentada uma mensagem de erro. Entrada :letra início # Ler letra ; escrever \"Introduza letra (L/D/F):\"; lerletra; # Testar casos e escrever mensagem respectiva ; seleccionar letra caso ’L’escrever \"Ligar\"; caso ’D’escrever \"Desligar\"; caso ’F’escrever \"Furar\"; senão escrever \"Operação inválida\"; ﬁm-seleccionar ﬁm-seleccionar ﬁm Algoritmo 1.4 :Máquina de furação - decisão múltipla Note-se que tal como acontece no caso da instrução se-então a componente senão é opcional. 15"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 30,
      "text": "ISEP/DEI - Jorge Santos O algoritmo 1.5tem um funcionamento idêntico ao 1.4mas é implementado atra- vés da instrução se-então-senão . Entrada :letra início # Ler letra ; escrever \"Introduza letra (L/D/F):\"; lerletra; # Testar casos e escrever mensagem respectiva ; seletra=’L’ então escrever \"Ligar\"; senão seletra=’D’ então escrever \"Desligar\"; senão seletra=’F’ então escrever \"Furar\"; senão escrever \"Operação inválida\"; ﬁm-se ﬁm-se ﬁm-se ﬁm Algoritmo 1.5 :Máquina de furação - decisão binária 1.3.3 Exercícios Resolvidos Nesta secção são apresentados alguns problemas e respectivas soluções com o objec- tivo de ilustrar a utilização de instruções de decisão. 1.3.3.1 Distância entre dois pontos O algoritmo 1.6permite realizar o cálculo da distância euclidiana entre dois pontos, sendo que cada ponto é deﬁnido pelas coordenadas (x,y). no cálculo da distância pode ser utilizada a fórmula 1.3.1 . distância =√ (x2−x1)2+ (y2−y1)2 (1.3.1) Caso os pontos sejam coincidentes mostra mensagem \"Pontos Coincidentes\" . 16"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 31,
      "text": "Algoritmia e Programação Entrada :x1, y1, x2, y2 Saída :distancia início # Ler coordenadas do ponto 1 ; escrever \"Coordenadas ponto1 (x/y):\"; lerx1, y1 ; # Ler coordenadas do ponto 2 ; escrever \"Coordenadas ponto2 (x/y):\"; lerx2, y2 ; # Calcular distância e mostrar resultado ; distancia ←√ (x2−x1)2+ (y2−y1)2; sedistancia=0 então escrever \"Os pontos são coincidentes\"; senão escrever \"Distância=\", distancia ; ﬁm-se ﬁm Algoritmo 1.6 :Calcular distância euclidiana entre pontos 1.3.3.2 Classiﬁcar em função da média O algoritmo 1.7permite ler as notas de um aluno às disciplinas de Matemática, Por- tuguês, Inglês e Geograﬁa e calcular a média. Em função da média mostra uma men- sagem com o conteúdo \"Aprovado\" ou\"Reprovado\" . Consideram-se notas positivas as notas iguais ou superiores a 9,5. Entrada :mat, por, ing, geo início # Ler as notas do aluno ; escrever \"Introduza notas (mat, por, ing, geo):\"; lermat, por, ing, geo ; # Calcular média ; media←mat+por+ing+geo 4; semedia≥9,5então escrever \"Aprovado\"; senão escrever \"Reprovado\"; ﬁm-se ﬁm Algoritmo 1.7 :Classiﬁcar em função da média 17"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 32,
      "text": "ISEP/DEI - Jorge Santos 1.3.3.3 Determinar o máximo de 3 valores Considere-se o problema de ler três números e calcular o maior deles. O ﬂuxograma 1.10 permite capturar com grande facilidade a noção de ﬂuxo e passos alternativos. Na resolução do problema foi adoptada uma estratégia de isolamento dos vários ca- sos, primeiro é testado o número A, depois o número Be caso nenhum dos dois seja o máximo, por exclusão de partes, se concluí que o número Cé o maior de todos. Início ler A,B,C“Introduza três números” A>B Fimescrever MaiorB>C Maior/c223B Maior/c223C Maior/c223AA>Centão senão entãoentão senão Figura 1.10: Fluxograma da determinação do máximo de 3 valores Note-se que a utilização de ﬂuxogramas está regra geral limitada à representação de pequenos programas ou processos com elevado grau de abstracção porque caso contrário o ﬂuxograma estender-se-ia por inúmeras páginas tornando a sua interpre- tação muito difícil. No algoritmo 1.8foi codiﬁcado em pseudo-código a solução anteriormente deli- neada no ﬂuxograma da ﬁgura 1.10. 18"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 33,
      "text": "Algoritmia e Programação Entrada :A, B, C Saída :maximo início # Ler números ; escrever \"Introduza número1, número2 e número3:\"; lerA, B, C ; seA≥Bentão seA≥Centão maximo ←A; ﬁm-se senão seB≥Centão maximo ←B; senão maximo ←C; ﬁm-se ﬁm-se escrever \"O número maior é:\", maximo ; ﬁm Algoritmo 1.8 :Calcular máximo de 3 números O algoritmo 1.9apresenta uma solução alternativa para o mesmo problema. Entrada :num1, num2, num3 Saída :maximo início # Ler números ; escrever \"Introduza número1, número2 e número3:\"; lernum1, num2, num3 ; # Até prova em contrário o primeiro dos números é o maior ; maximo ←num1 ; senum2≥maximo então maximo ←num2 ; ﬁm-se senum3≥maximo então maximo ←num3 ; ﬁm-se escrever \"O número maior é:\", maximo ; ﬁm Algoritmo 1.9 :Calcular máximo de 3 números Sugestão: Baseando-se nas soluções propostas escreva um algoritmo que permita a determinação do máximo entre 5 números. Qual é a solução mais elegante? 19"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 34,
      "text": "ISEP/DEI - Jorge Santos 1.3.3.4 Determinar triângulo válido O algoritmo 1.10 permite ler três pontos geométricos e determinar se estes formam um triângulo. Pode ser utilizada a fórmula da distância entre dois pontos para cal- cular as medidas dos lados do triângulo. Note-se que um triângulo só é válido se a medida de cada um dos seus lados é menor que a soma dos lados restantes. Entrada :x1, y1, x2, y2, x2, y2 início # Ler coordenadas do ponto 1 ; escrever \"Coordenadas ponto1 (x/y):\"; lerx1, y1 ; # Ler coordenadas do ponto 2 ; escrever \"Coordenadas ponto2 (x/y):\"; lerx2, y2 ; # Ler coordenadas do ponto 3 ; escrever \"Coordenadas ponto3 (x/y):\"; lerx3, y3 ; # Calcular a medida dos lados ; a←√ (x2−x1)2+ (y2−y1)2; b←√ (x3−x2)2+ (y3−y2)2; c←√ (x1−x3)2+ (y1−y3)2; # Validar triângulo de acordo com a fórmula ; se(a<b+c) e (b<a+c) e (c<a+b)então # Triângulo válido ; escrever \"Os três pontos formam um triângulo\"; senão # Pelo menos 2 pontos são coincidentes ou os 3 são colineares ; escrever \"Os pontos não formam um triângulo\"; ﬁm-se ﬁm Algoritmo 1.10 :Validar triângulo 1.3.4 Exercícios Propostos Nesta secção são propostos alguns problemas com vista à aplicação de instruções de decisão. 1.3.4"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 34,
      "text": "pontos não formam um triângulo\"; ﬁm-se ﬁm Algoritmo 1.10 :Validar triângulo 1.3.4 Exercícios Propostos Nesta secção são propostos alguns problemas com vista à aplicação de instruções de decisão. 1.3.4.1 Classiﬁcar triângulo Classiﬁcar um triângulo quanto aos lados, sendo que um triângulo com todos lados iguais é designado Equilátero , com todos os lados diferentes entre si é designado Es- caleno e caso tenha apenas dois lados iguais entre si, designa-se Isósceles . 20"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 35,
      "text": "Algoritmia e Programação 1.3.4.2 Divisão Descreva um algoritmo que dados dois valores, divide o primeiro pelo segundo. Note que não é possível fazer a divisão por zero, neste caso deve ser apresentada a mensa- gem adequada. 1.3.4.3 Resolver equação da forma ax2+bx+c=0 Calcular as raízes de uma equação na forma ax2+bx+c=0. Note que os valores a, b e c podem ser zero, podendo dar origem a equações sem solução ou equações de primeiro grau. Considere as fórmulas 1.3.2 e1.3.3 na resolução do problema. binómio =b2−4ac (1.3.2) x=−b∓√ binómio 2a(1.3.3) 1.3.4.4 Converter entre escalas de temperaturas Escrever um programa que faça conversões entre as três escalas de temperaturas, Kelvin, Celsius e Fahrenheit, com base em três valores de entrada: a temperatura e escala actual e escala pretendida. Conforme o seguinte exemplo: As entradas 38, ’C’ e ’K’, signiﬁcam que o utilizador pretende converter a tem- peratura 38 Celsius para Kelvin. Considere as fórmulas 1.3.4 e1.3.5 na resolução do programa. tempF =32+9∗tempC 5(1.3.4) tempC =tempK +273 (1.3.5) Sugestão: Tentar a resolução com as estruturas se-então-senão e alternativamente utilizar a estrutura de múltipla decisão. 1.3.4.5 Calcular índice "
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 35,
      "text": "tempF =32+9∗tempC 5(1.3.4) tempC =tempK +273 (1.3.5) Sugestão: Tentar a resolução com as estruturas se-então-senão e alternativamente utilizar a estrutura de múltipla decisão. 1.3.4.5 Calcular índice de massa corpórea (IMC) O índice de massa corpórea (IMC) de um indivíduo é obtido dividindo-se o seu peso (em Kg) por sua altura (em m) ao quadrado. Assim, por exemplo, uma pessoa de 1,67 m e pesando 55 Kg tem IMC igual a 20,14, já que: IMC =peso altura2=55kg 1, 67 m∗1, 67 m=20, 14 Considerando a tabela 1.2, escreva um programa que leia o peso em kge a altura emmde uma determinada pessoa de forma a calcular o índice de massa corpórea do mesmo e de seguida, estabeleça as comparações necessárias entre o IMC calculado e os valores da tabela 1.2e escreva uma das frases, conforme for o caso: 21"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 36,
      "text": "ISEP/DEI - Jorge Santos IMC Interpretação Até 18,5 (inclusive) Abaixo do peso normal De 18,5 a 25 (inclusive) Peso normal De 25 a 30 (inclusive) Acima do peso normal Acima de 30 Obesidade Tabela 1.2: Índice de massa corpórea •Você está abaixo do peso normal. •O seu peso está na faixa de normalidade. •Você está acima do peso normal. •Você precisa de perder algum peso. 1.3.4.6 Determinar ano bissexto Um ano é bissexto se é divisível por 4, excepto se, além de ser divisível por 4, for também divisível por 100. Então ele só é bissexto se também for divisível por 400. Escrever um algoritmo que leia o valor de um ano e escreva se o ano é ou não bissexto. 1.3.4.7 Parque de estacionamento Considere um parque de estacionamento que pratica os preços seguintes: •1ahora: 2e •2ahora: 1,5e •a partir da 2ahora: 1e/hora O tempo de permanência no parque é contabilizado em horas e minutos. Por exemplo, se uma viatura permanecer 2 horas e 30 minutos no parque, pagará 2 e(1a hora) + 1,5e(2ahora) + 0,5e(30 minutos a 1 e/hora) = 4e. Elabore um algoritmo que, lido o tempo que determinada viatura permaneceu estacionada no parque, diga a quantia que deve ser paga. 1.4 Instruções de Repetição (Ciclos) As in"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 36,
      "text": " minutos a 1 e/hora) = 4e. Elabore um algoritmo que, lido o tempo que determinada viatura permaneceu estacionada no parque, diga a quantia que deve ser paga. 1.4 Instruções de Repetição (Ciclos) As instruções de repetição, ou ciclos, permitem a execução de forma repetitiva de um conjunto de instruções. Esta execução depende do valor lógico de uma condição que é testada em cada iteração para decidir se a execução do ciclo continua ou termina. Note-se que as diferentes instruções de ciclos a seguir apresentadas consistem em variações da mesma estrutura. 22"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 37,
      "text": "Algoritmia e Programação 1.4.1 Ciclo condicional: repetir-até O ciclorepetir-até executa um bloco de instruções até que uma determinada condi- ção lógica seja verdadeira. Este ciclo testa a condição lógica após a primeira iteração, ou seja, o teste é realizado à saída. Este ciclo deve ser utilizado sempre que se desejar que o código seja executado pelo menos uma vez. Na ﬁgura 1.11 é apresentada a sintaxe proposta para o ciclo repetir-até . até condiçãobloco de instruções falso verdaderepita inicio . . . repetir <bloco-instruções> até <condição>; . . . fim Figura 1.11: Fluxograma e sintaxe - Instrução ciclo repetir-até Considere-se o seguinte exemplo em que a utilização da estrutura repetir-até permite garantir que o valor da nota introduzida está situado entre 0 e 20. Entrada :nota início repetir escrever \"Introduzir nota entre 0-20:\"; lernota; aténota≥0 enota≤20; ﬁm 1.4.2 Ciclo condicional: enquanto-fazer O cicloenquanto executa um bloco de instruções enquanto uma determinada condi- ção lógica for verdadeira. Este ciclo testa a condição lógica à entrada. Na ﬁgura 1.12 é apresentada a sintaxe proposta para o ciclo enquanto-fazer . Considere-se o seguinte exemplo em que a utilização"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 37,
      "text": "ão lógica for verdadeira. Este ciclo testa a condição lógica à entrada. Na ﬁgura 1.12 é apresentada a sintaxe proposta para o ciclo enquanto-fazer . Considere-se o seguinte exemplo em que a utilização da estrutura enquanto-fazer permite calcular e escrever a tabuada de um número. 23"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 38,
      "text": "ISEP/DEI - Jorge Santos enquanto condição bloco de instruções falsoverdade fim enquanto inicio . . . enquanto <condição> fazer <bloco-instruções> fim-enquanto . . . fim Figura 1.12: Fluxograma e sintaxe - Instrução ciclo enquanto-fazer Entrada :numero início # Ler o número para o qual será apresentada a tabuada ; escrever \"Introduza número:\"; lernumero ; i←1; enquanto i≤10fazer resultado ←numero *i; escrever numero , \"*\",i, \"=\",resultado ; # Incrementar a variável i; i←i+1; ﬁm-enquanto ﬁm 1.4.3 Ciclo determinístico: para-fazer O ciclopara-fazer executa um bloco de instruções com um número pré-determinado de vezes. Na ﬁgura 1.13 é apresentada a sintaxe proposta para o ciclo para-fazer . •Obloco-início - é um conjunto de instruções que são executadas à priori ; •Acondição é uma expressão lógica é testada em cada iteração do ciclo, sendo necessário que o seu valor lógico seja verdade para que o ciclo continue em execução; •Obloco-iter é composto por um conjunto de instruções que são executadas em cada iteração. 24"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 39,
      "text": "Algoritmia e Programação condição bloco de instruçõesfaça fim para-façaitera n vezes inicio . . . para <bloco-início>;<condição>;<bloco-iter> fazer <bloco-instruções> fim-para . . . fim Figura 1.13: Fluxograma e sintaxe - Instrução ciclo para-fazer Considere-se o seguinte exemplo em que a utilização da estrutura para-fazer permite calcular a soma os 100 primeiros números inteiros. Saída :soma início soma←0; parai←1;i<100;i←i+1fazer soma←soma +i; ﬁm-para escrever soma ; ﬁm Neste exemplo é introduzido um conceito importante para a programação, o con- ceito de acumulador. A variável soma em cada iteração é adicionada do valor da variável i, permitindo que no ﬁnal: soma =1+2+3+4+5+· · ·+100=5050 Por outro lado, a instrução i←i+1 faz com que a variável itome todos os valores inteiros de 1 a 100. 1.4.4 Exercícios Resolvidos Nesta secção são apresentados alguns problemas e respectivas soluções com o ob- jectivo de ilustrar a utilização de instruções cíclicas. Nas soluções são exploradas situações com utilização simples dos ciclos e/ou imbricados. 25"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 40,
      "text": "ISEP/DEI - Jorge Santos 1.4.4.1 Calcular somatório entre dois limites O algoritmo 1.11 permite calcular a somatório dos números existentes num intervalo deﬁnido por limites inferior e superior. Note que o utilizador pode introduzir os li- mites na ordem que entender, desta forma os intervalos [5-10] e [10-5] são igualmente válidos. Entrada :limite1, limite2 Saída :soma início # Ler intervalo ; escrever \"Introduza número1:\"; lerlimite1 ; escrever \"Introduza número2:\"; lerlimite2 ; # Determinar o limite inferior e superior ; selimite1 >limite2 então maximo ←limite1 ; minimo ←limite2 ; senão maximo ←limite2 ; minimo ←limite1 ; ﬁm-se # Calcular soma propriamente dita ; soma←0; parai←minimo ;i≤maximo ;i←i+1fazer soma←soma +i; ﬁm-para # Mostrar resultado ; escrever soma ; ﬁm Algoritmo 1.11 :Calcular somatório entre dois limites 1.4.4.2 Calcular factorial de um número O algoritmo 1.12 permite calcular o factorial de um número sabendo que: factorial (n) ={n=0→ 1 n≥1→ n∗factorial (n−1) Exemplo: factorial (5)=5*4*3*2*1=120 26"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 41,
      "text": "Algoritmia e Programação Entrada :numero Saída :factorial início # Ler o número para o qual se pretende calcular o factorial ; escrever \"Introduza número:\"; lernumero ; # Efectuar o cálculo ; factorial ←1; parai←1;i≤numero ;i←i+1fazer factorial ←factorial *i; ﬁm-para # Apresentar resultado ; escrever factorial ; ﬁm Algoritmo 1.12 :Calcular factorial de um número 1.4.4.3 Determinar se um número é primo Um número é primo se for apenas divisível por si próprio e pela unidade, por exem- plo: 11 é número primo (visto que é apenas divisível por 11 e por 1), enquanto que 21 não é primo, pois tem os seguintes divisores: 1,3,7 e 21. Entrada :numero início escrever \"Introduza número:\"; lernumero ; # A variável ndiv será utilizada na contagem do número de divisores de um número ; ndiv←0; parai←1;i≤numero ;i←i+1fazer # Determinar se i é divisor do número ; senumero %i=0ei̸=1ei̸=numero então ndiv←ndiv+1; ﬁm-se ﬁm-para # Testar se existem divisores diferentes de 1 e do próprio número ; sendiv>0então escrever \"O número \", numero , \"não é primo\"; senão escrever \"O número \", numero , \"é primo\"; ﬁm-se ﬁm Algoritmo 1.13 :Determinar se um número é primo O algoritmo 1.13 permite determinar se um número"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 41,
      "text": " escrever \"O número \", numero , \"não é primo\"; senão escrever \"O número \", numero , \"é primo\"; ﬁm-se ﬁm Algoritmo 1.13 :Determinar se um número é primo O algoritmo 1.13 permite determinar se um número é primo através da contagem de divisores diferentes da unidade e do próprio número. Esta solução necessita de 27"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 42,
      "text": "ISEP/DEI - Jorge Santos testar todos os números, sendo obviamente pouco eﬁciente não se recomenda a sua utilização na prática. Por sua vez, o algoritmo 1.14 permite determinar se um número é primo de uma forma muito mais eﬁciente, visto que termina o processo assim que encontra um di- visor diferente da unidade e do próprio número. Por outro lado termina assim que o divisor atinge metade do valor do número, isto porque não é possível encontrar divisores inteiros entre metade do número e o próprio número. Entrada :numero início escrever \"Introduza número:\"; lernumero ; # Até prova em contrário um número é primo. Quando é encontrado um divisor deixa de o ser; primo←verdadeiro; i←2; enquanto primo =verdadeiro ei≤numero /2fazer # Determinar se i é divisor do número ; senumero %i=0então primo←falso; ﬁm-se i←i+1; ﬁm-enquanto # Testar se foi um encontrado algum divisor ; seprimo =falso então escrever \"O número \", numero , \"não é primo\"; senão escrever \"O número \", numero , \"é primo\"; ﬁm-se ﬁm Algoritmo 1.14 :Determinar se um número é primo 1.4.4.4 Determinar nome e idade da pessoa mais nova de um grupo O algoritmo 1.15 permite ler o nome e a idade de uma série de pessoas. Este programa de"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 42,
      "text": " Algoritmo 1.14 :Determinar se um número é primo 1.4.4.4 Determinar nome e idade da pessoa mais nova de um grupo O algoritmo 1.15 permite ler o nome e a idade de uma série de pessoas. Este programa deve terminar quando for introduzido o nome da pessoa = \"STOP\". No ﬁnal deve ser mostrado o nome e idade da pessoa mais nova. Neste programa é utilizada uma variável com a função de servir de sentinela, a variável primeiro pode assumir os valores verdadeiro oufalso em função das neces- sidades. Uma sentinela é regra geral uma variável do tipo booleano ( i.e., pode apresentar os valores verdadeiro oufalso ) e é utilizada com o ﬁto de controlar a execução de uma determinada secção do programa, este conceito é muito útil em programação. 28"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 43,
      "text": "Algoritmia e Programação Saída :nomeMin ,idadeMin início # Esta sentinela permite controlar o primeiro elemento a ser lido de forma a iniciar a variávelidadeMin ; primeiro ←verdadeiro; repetir escrever \"Introduza nome:\"; lernome ; senome̸=\"STOP\" então escrever \"Introduza idade:\"; leridade ; seprimeiro = verdadeiro então idadeMin ←idade ; # Após a primeira leitura a sentinela é alterada para falso primeiro ←falso; senão # Se a idade acabada de ler for menor que o mínimo existente então actualiza o mínimo e guarda o nome da pessoa ; seidade <idadeMin então idadeMin ←idade ; nomeMin ←nome ; ﬁm-se ﬁm-se ﬁm-se aténome =\"STOP\" ; escrever \"Nome e idade da pessoa mais nova:\", nomeMax ,idadeMax ; ﬁm Algoritmo 1.15 :Determinar nome/idade da pessoa mais nova 1.4.4.5 Determinar o aluno melhor classiﬁcado e a média das notas de uma turma O algoritmo 1.16 permite ler as notas de português obtidas pelos elementos de uma turma. Este programa termina quando for introduzido o nome do aluno \"STOP\". No ﬁnal deve ser mostrado o nome do aluno melhor classiﬁcado e a média de notas de turma. Neste programa são utilizados ciclos encadeados. Note-se que este algoritmo lê pelo menos um nome, nem que o primei"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 43,
      "text": "al deve ser mostrado o nome do aluno melhor classiﬁcado e a média de notas de turma. Neste programa são utilizados ciclos encadeados. Note-se que este algoritmo lê pelo menos um nome, nem que o primeiro nome seja \"STOP\"graças à utilização do ciclo repetir-até . No caso de o nome introduzo ser válido ( i.e., diferente de \"STOP\") então são lidas notas do aluno. 29"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 44,
      "text": "ISEP/DEI - Jorge Santos Saída :nomeMax ,notaMax ,media início soma←0; nAlunos ←0; repetir escrever \"Introduza nome:\"; lernome ; senome̸=\"STOP\" então repetir escrever \"Introduza nota de português do aluno\", nome ; aténota≥0enota≤100; soma←soma +nota; nAlunos ←nAlunos +1; senota >notaMax então notaMax ←nota; nomeMax ←nome ; ﬁm-se ﬁm-se aténome =\"STOP\" ; # Calcular média ; media←soma /nAlunos ; escrever \"Nome do aluno melhor classiﬁcado:\", nomeMax ; escrever \"Média obtida pela turma:\", media ; ﬁm Algoritmo 1.16 :Determinar o aluno melhor classiﬁcado e a média das notas de uma turma Sugestão: Resolver o último exercício utilizando ciclos do tipo enquanto-fazer . 1.4.5 Exercícios Propostos Nesta secção são propostos alguns problemas com vista à aplicação dos diferentes tipos de instruções anteriormente introduzidas com particular ênfase na instruções cíclicas. 1.4.5.1 Divisão através de subtracções sucessivas O resultado da divisão inteira de um número inteiro por outro número inteiro pode sempre ser obtido utilizando-se apenas o operador de subtracção. Assim, se quiser- mos calcular 7/2, basta subtrair o dividendo (2) ao divisor (7), sucessivamente, até que o resultado seja menor do qu"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 44,
      "text": "sempre ser obtido utilizando-se apenas o operador de subtracção. Assim, se quiser- mos calcular 7/2, basta subtrair o dividendo (2) ao divisor (7), sucessivamente, até que o resultado seja menor do que o dividendo. O número de subtracções realizadas corresponde ao quociente inteiro, conforme o exemplo seguinte: 30"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 45,
      "text": "Algoritmia e Programação 7−2=5 5−2=3 3−2=1 Descrever um algoritmo para o cálculo da divisão de um inteiro pelo outro. Note que se o dividendo for zero, esta é uma operação matematicamente indeﬁnida. 1.4.5.2 Determinar o máximo e mínimo de uma série Ler 100 valores e determinar os valores máximo e mínimo da série. 1.4.5.3 Determinar quantidade de números primos Determinar quantos são os números primos existentes entre os valores 1 e 1000 (ex- cluindo os limites do intervalo). 1.4.5.4 Determinar se um número é perfeito Um número n é perfeito se a soma dos divisores inteiros de n (excepto o próprio n) é igual ao valor de n. Por exemplo, o número 28 tem os seguintes divisores: 1, 2, 4, 7, 14, cuja soma é exactamente 28. (Os seguintes números são perfeitos: 6, 28, 496, 8128.) Escreva um algoritmo que veriﬁque se um número é perfeito. 1.4.5.5 Calcular potência por multiplicações sucessivas Escrever um programa que permita calcular uma potência do tipo baseexpoenteatra- vés de multiplicações sucessivas. Por exemplo: 24=2∗2∗2∗2. Considere as dife- rentes situações relacionadas com os valores da base e/ou expoente iguais a zero. 1.4.5.6 Maior número ímpar de uma sequência de valores Descrev"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 45,
      "text": "sucessivas. Por exemplo: 24=2∗2∗2∗2. Considere as dife- rentes situações relacionadas com os valores da base e/ou expoente iguais a zero. 1.4.5.6 Maior número ímpar de uma sequência de valores Descreva um algoritmo que lê uma sequência de números inteiros terminada pelo número zero e calcule o maior ímpar e a sua posição na sequência de valores. 1.4.5.7 Algarismos de um número Escreva um programa para extrair os algarismos que compõem um número e os vi- sualize individualmente. 31"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 46,
      "text": "ISEP/DEI - Jorge Santos 1.4.5.8 Apresentação gráﬁca de temperaturas Escreva um algoritmo que lê a temperatura de N cidades portuguesas e que repre- sente a temperatura de cada uma delas com uma barra de asteriscos (*), em que cada asterisco representa um intervalo de 2◦C. De acordo com os exemplos seguintes: Porto 11 ***** Lisboa 16 ******** Faro 20 ********** Chaves 8 **** 1.4.5.9 Soma dos algarismo de um número Escreva um programa que calcule a soma dos algarismos que compõem um número. Por exemplo: 7258 = 7+2+5+8 = 22 1.4.5.10 Jogo de adivinhar o número Escrever um programa para o o jogo de adivinhar um número. Este jogo consiste no seguinte: o programa sorteia um número e o jogador deve tentar adivinhar o número sorteado. Para isso o programa deve indicar se o palpite do jogador foi maior, menor ou se acertou no número sorteado. Caso o jogador acerte deve visualizado no écran o número de tentativas utilizadas. 1.4.5.11 Capicua de um número Escreva um programa que leia um número inteiro positivo e veriﬁque se se trata de uma capicua, isto é, uma sequência de dígitos cuja leitura é a mesma nos dois senti- dos (exemplo:32523). Sugestão: Inverter a ordem dos dígitos e veriﬁcar se o"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 46,
      "text": "eiro positivo e veriﬁque se se trata de uma capicua, isto é, uma sequência de dígitos cuja leitura é a mesma nos dois senti- dos (exemplo:32523). Sugestão: Inverter a ordem dos dígitos e veriﬁcar se o número obtido coincide com o original. Por exemplo, 327 invertido é ((7*10)+2)*10+3=723. 1.4.5.12 Conversão de base numérica Elaborar um programa para converter um número escrito em binário para o corres- pondente na base decimal. A conversão faz-se de acordo com o exemplo seguinte: 10110011(2)= =1∗27+0∗26+1∗25+1∗24+0∗23+0∗22+1∗21+1∗20 =128+0+32+0+16+0+0+2+1 =179(10) Note que os expoentes das potências na fórmula de conversão correspondem, res- pectivamente, à posição ocupada por cada algarismo no número em binário. Sendo que o algarismo mais à direita corresponde à posição zero. 32"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 47,
      "text": "Algoritmia e Programação 1.5 Traçagens e Teste A traçagem consiste em testar um algoritmo para um conjunto de valores de entrada, observando o comportamento interno do algoritmo para esses valores e ao longo dos vários passos que compõem o algoritmo. Assim, a primeira fase consiste em numerar/etiquetar os passos do algoritmo. De seguida é necessário construir uma tabela colocando na primeira linha as entidades que queremos estudar ao longo dos passos do algoritmo, a saber, variáveis e condi- ções, pois são as únicas entidades cujo valor pode variar. A última fase consiste em executar o algoritmo passo-a-passo. Considere-se o problema de calcular o quociente e resto da divisão inteira. O cálculo destes calores pode ser realizado com sucesso através da aplicação sucessiva de subtracções, de acordo com o exempliﬁcado na ﬁgura 1.14. 33 7 45Divisor Dividendo QuocienteResto 33 7 26-26 7 19-19 7 12-12 7 5- Figura 1.14: Divisão inteira através de subtracções sucessivas Note-se que o quociente corresponde ao número de vezes para o qual é possível subtrair o divisor ao dividendo, no exemplo é possível subtrair 4 vezes o número 7 do 33, sendo que 5 será o resto inteiro. Entrada :dividendo ,di"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 47,
      "text": "corresponde ao número de vezes para o qual é possível subtrair o divisor ao dividendo, no exemplo é possível subtrair 4 vezes o número 7 do 33, sendo que 5 será o resto inteiro. Entrada :dividendo ,divisor início # Ler dividendo e divisor ; P1escrever \"Introduza o dividendo e divisor\"; P2lerdividendo ,divisor ; P3quociente ←0; # Subtrair sucessivamente o divisor ao dividendo ; P4 enquanto dividendo ≥divisor fazer P5 dividendo ←dividendo -divisor ; P6 quociente ←quociente +1; ﬁm-enquanto P7resto←dividendo ; ﬁm Algoritmo 1.17 :Divisão inteira através de subtracções sucessivas (numerado) Na tabela 1.3são representados os passos nos quais as condições e/ou variáveis 33"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 48,
      "text": "ISEP/DEI - Jorge Santos podem mudar de valor (de P2aP7) e possível perceber as (quatro) iterações realiza- das dentro do ciclo enquanto-fazer , sendo que em cada iteração do ciclo são execu- tadas os passos: P4,P5eP6. Passos dividendo divisor quociente resto dividendo ≥divisor P2 33 7 P3 33 7 0 P4 33 7 0 verdade P5 26 7 0 verdade P6 26 7 1 verdade P4 26 7 1 verdade P5 19 7 1 verdade P6 19 7 2 verdade P4 19 7 2 verdade P5 12 7 2 verdade P6 12 7 3 verdade P4 12 7 3 verdade P5 5 7 3 verdade P6 5 7 4 verdade P4 5 7 4 falso P7 5 7 4 5 Tabela 1.3: Traçagem do algoritmo 1.14 1.6 Programação modular De acordo com o paradigma da programação estruturada, a escrita de algoritmos (e programas) deve ser baseada no desenho modular dos mesmos passando-se depois a um reﬁnamento gradual do topo para a base. A modularidade permite entre outros aspectos: •Criar diferentes camadas de abstracção do programa codiﬁcado e que por sua vez facilitará a resolução de problemas complexos, leitura e manutenção do có- digo mais simples; •Reduzir os custos ao desenvolvimento de software e correcção de erros; •Reduzir o número de erros emergentes durante a codiﬁcação; •Re-utilização de código de forma mais simples"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 48,
      "text": "ó- digo mais simples; •Reduzir os custos ao desenvolvimento de software e correcção de erros; •Reduzir o número de erros emergentes durante a codiﬁcação; •Re-utilização de código de forma mais simples; A noção de modularidade é crucial para a programação. A modularidade pode ser conseguida, por exemplo, através do recurso à utilização de sub-rotinas. A utilização 34"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 49,
      "text": "Algoritmia e Programação de sub-rotinas permite modularizar os programas e encapsular processamento o que resulta em programas mais simples de desenvolver e ler. Quanto mais independentes os módulos (sub-rotinas) mais atentamente o progra- mador se pode concentrar sobre cada uma ignorando os restantes. Com a chamada de uma sub-rotina num qualquer ponto de um programa é transferido o controlo para essa sub-rotina isto é, passam a ser executadas do inicio ao ﬁm as instruções presentes nessa sub-rotina, retornado-se depois ao programa principal, exactamente à instrução seguinte à da chamada da sub-rotina 1.6.1 Sub-rotinas, parâmetros e variáveis locais Na programação estruturada são normalmente referidos dois tipos de sub-rotinas: as funções e os procedimentos. A diferença entre funções e procedimentos consiste no facto de as primeiras retornarem um valor, e os segundos não. No contexto da programação uma função tem um funcionamento similar a fun- ção matemática, isto é, funciona como uma caixa preta que recebe valores (designada por parâmetros) e devolve um resultado. Por exemplo a função potencia (ver fór- mula 1.6.1 ) recebe a base e expoente, e devolve o resultado. Note-se que a l"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 49,
      "text": " caixa preta que recebe valores (designada por parâmetros) e devolve um resultado. Por exemplo a função potencia (ver fór- mula 1.6.1 ) recebe a base e expoente, e devolve o resultado. Note-se que a lista de parâmetros passados para uma função pode ser vazia. resultado =potencia (base,expoente ) (1.6.1) As variáveis deﬁnidas no âmbito das sub-rotinas são criadas no momento em que se inicia a execução da sub-rotina e destruídas no momento em que a sub-rotina ter- mina a sua execução, isto é, são variáveis locais (dentro do contexto da sub-rotina) por oposição às variáveis do programa que se designam por variáveis globais . Este conceito é muito importante e implica que: •a forma correcta de se passar valores para dentro de uma sub-rotina é através dos parâmetros (e não recorrendo a uma variável com o mesmo nome fora e dentro da sub-rotina); •a forma correcta de se obter valores de uma sub-rotina é recorrer a uma função (e não a um procedimento) que tem a possibilidade de devolver valores. 1.6.1.1 Funções A sintaxe e o ﬂuxograma propostos para a deﬁnição de uma função são apresentados na ﬁgura 1.15: A função é identiﬁcada por um nome ( nomeFuncao ), sendo a listaParâmetros constituíd"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 49,
      "text": "s. 1.6.1.1 Funções A sintaxe e o ﬂuxograma propostos para a deﬁnição de uma função são apresentados na ﬁgura 1.15: A função é identiﬁcada por um nome ( nomeFuncao ), sendo a listaParâmetros constituída por zero ou mais variáveis passadas à função. A expressão representa o valor a retornar pela função. 35"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 50,
      "text": "ISEP/DEI - Jorge Santos Execução função Função nomeFuncao(listaParametros) inicio . . . nome←<expressão> . . . fim-função Figura 1.15: Fluxograma e sintaxe - Função Considere-se no seguinte exemplo a deﬁnição e utilização da função potencia1na construção de um programa modular. Funçãopotencia (base,expoente ) início # A variável resultado é local ; resultado ←1; # Calcular a potência através de multiplicações sucessivas ; parai←1;i≤expoente ;i←i+1fazer resultado ←resultado *base; ﬁm-para # O valor calculado é retornado através do nome da função ; potencia ←resultado ; ﬁm-função Apotencia é utilizada no programa seguinte: início # Ler base e expoente ; escrever \"Introduza base=\"; lerbase; escrever \"Introduza expoente=\"; lerexpoente ; # Apresentar resultado ; escrever base,\" ˆ \",expoente ,\"=\",potencia (base,expoente ); ﬁm Executando o programa por exemplo para os valor 3 e 2, seria visualizado num monitor o seguinte texto: Introduza base=3 Introduza expoente=2 3^2=8 1Por uma questão de simplicidade são considerados apenas expoentes inteiros e positivos no cál- culo da potência. 36"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 51,
      "text": "Algoritmia e Programação 1.6.1.2 Procedimentos A sintaxe e o ﬂuxograma propostos para a deﬁnição de um procedimento são apre- sentados na ﬁgura 1.16: Execução procedimento Procedimento nomeProcedimento(listaParametros) . . . blocos-de-instruções . . . Fim-procedimento Figura 1.16: Fluxograma e sintaxe - Procedimento Considere-se no seguinte exemplo a deﬁnição e utilização do procedimento prtNumeroInvertido que permite imprimir um número inteiro invertido. Procedimento prtNumeroInvertido( numero) início enquanto numero >0fazer # O algarismo mais à direita do número é calculado através ; # da divisão inteira do número por 10 ; algarismo ←numero % 10; escrever algarismo ; # Truncar o algarismo à direita ; num←(numero -algarismo )/10; ﬁm-enquanto ﬁm-procedimento 1.6.2 Exercícios resolvidos Nesta secção são apresentados alguns problemas e respectivas soluções com o objec- tivo de ilustrar a utilização de procedimentos e funções na produção de programas modulares. 1.6.2.1 Função que devolve o maior algarismo de um número Escrever uma função que recebe um número inteiro e devolve o maior algarismo contido nesse número. 37"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 52,
      "text": "ISEP/DEI - Jorge Santos Funçãomaior(N) início # max vai conter o maior algarismo ; # alg vai conter os algarismos do número, partindo das ; # unidades para as dezenas, centenas, etc ; max←N%10; enquanto N̸=0fazer alg←N%10; N←(N-alg)/10; sealg>max então max←alg; ﬁm-se ﬁm-enquanto maior←max; ﬁm-função Funçãomaior( n)que devolve o maior algarismo de um número 1.6.2.2 Função que indica se um número é perfeito Escrever uma função que receba um número inteiro e devolva os valores booleanos verdadeiro oufalso se o número é ou não perfeito, respectivamente. Funçãoperfeito (N) início soma←0; parax←1;x≤(N/2);x←x+1fazer se(N%x)=0então soma←soma +x; ﬁm-se ﬁm-para sesoma =Nentão perfeito ←verdadeiro; senão perfeito ←falso; ﬁm-se ﬁm-função Função perfeito( N)que indica se um número é perfeito 1.6.3 Exercícios propostos Nesta secção são propostos alguns problemas relacionados com a utilização de pro- cedimentos e funções na escritas de programas modulares. 38"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 53,
      "text": "Algoritmia e Programação 1.6.3.1 Função média de dois números Escreva uma função que, dados dois números reais, retorna a média deles arredon- dada para um inteiro, e devolve os números por ordem crescente. Faça um programa que permita testar a função anterior. 1.6.3.2 Função lei de Ohm A lei de Ohm é uma relação entre a corrente (I), a tensão (V) e a resistência (R), de acordo com o circuito eléctrico representado na ﬁgura 1.17. RI/c224 V Lei de Ohm: I=V/R Figura 1.17: Ilustração da lei de Ohm a)Escreva uma função que recebe os valores de VeRcomo parâmetros, e calcule a corrente I. b)Escreva um programa que permita testar a função anterior. 1.6.3.3 Função somatório Calcular o somatórion ∑ i=12i √ i Sugestão: crie uma função para determinar cada termo ida série. 1.6.3.4 Funções para codiﬁcar e descodiﬁcar números Uma empresa pretende enviar cifrada uma sequência de inteiros decimais de 4 dí- gitos (DigDigDigDig ). A cifra consiste em: substituir cada dígito Digpor(Dig+8)%10 (i.e., adiciona 8 e calcula o resto da divisão do resultado por 10); depois troca o terceiro dígito com o primeiro e troca o quarto dígito com o segundo. a)Escreva uma função que receba um inteiro decimal de 4 d"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 53,
      "text": "iona 8 e calcula o resto da divisão do resultado por 10); depois troca o terceiro dígito com o primeiro e troca o quarto dígito com o segundo. a)Escreva uma função que receba um inteiro decimal de 4 dígitos e o devolva cifrado. b)Escreva uma função que receba um inteiro cifrado e o decifre para o valor ori- ginal. 39"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 54,
      "text": "ISEP/DEI - Jorge Santos c)Escreva uma função que apresente um «menu» com 2 opções, cifrar e decifrar número, peça ao utilizador para escolher uma das opções, e retorne a opção escolhida. d)Faça um programa que permita testar as funções anteriores. 1.6.3.5 Números primos Escreva um procedimento que imprima os números primos existentes entre dois nú- meros. Na resolução deste problema deve ser utilizada uma função que determina se um número é primo. 1.7 Vectores No contexto da programação de computadores, um vector, é uma das estruturas de dados mais simples. Um vector é conjunto de dados consecutivos, usualmente do mesmo tamanho e tipo. Cada um dos elementos do vector é acedido através do índice (número inteiro) que deﬁne a posição na qual o elemento está guardado. Considere que se pretende desenvolver um programa que dadas as notas de 4000 alunos, calcule o desvio de cada uma relativamente à média das notas. Para o cálculo dos desvios é necessário o cálculo prévio da média, o que implica manter as notas após o cálculo da média, ou seja, guardar as notas em variáveis. O problema pode ser decomposto em sub-problemas, como se segue: •Calcular a média; •Guardar as notas (para cálculos "
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 54,
      "text": "ca manter as notas após o cálculo da média, ou seja, guardar as notas em variáveis. O problema pode ser decomposto em sub-problemas, como se segue: •Calcular a média; •Guardar as notas (para cálculos posteriores); •Calcular o desvio de cada nota. Uma solução para guardar cada uma das notas (desaconselhável!!), seria deﬁnir 4000 variáveis, por exemplo: nota1 ,nota2 ,nota3 ,nota4 ,nota5 ,nota6 , . . . ,nota4000 Assim, as instruções para a leitura das notas seriam repetir 4000 vezes algo de semelhante a: início enquanto numero >0fazer escrever \"Introduza a média do aluno número 1:\"; lernota1 ; escrever \"Introduza a média do aluno número 2:\"; lernota2 ; . . . escrever \"Introduza a média do aluno número 4000:\"; lernota4000 ; ﬁm-enquanto ﬁm 40"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 55,
      "text": "Algoritmia e Programação o que naturalmente se revela completamente impraticável. A generalidade das linguagens de programação fornece este tipo de dados, cha- mado vector (ou array ) que permite ultrapassar esta limitação. A solução consiste em deﬁnir um vector cujo tamanho corresponde ao número de elementos desejados e uma variável inteira para aceder a cada índice do referido vector. Deste modo, para a leitura das 4000 notas poder-se-ia utilizar um ciclo, como a seguir se ilustra: início paranum←1;num<4000;num←num+1fazer escrever \"Introduza a nota do aluno número\", num; lernota(num); ﬁm-para ﬁm Um vector pode então ser deﬁnido como um conjunto de tamanho ﬁxo de ele- mentos do mesmo tipo ocupando posições contíguas. Antes de se utilizar um vector é necessário proceder à sua declaração, cuja sintaxe proposta é : DIM nomeVector (início ATE fim) No qual: • nomeVector - é o nome do vector (escolhido pelo programador); • inicio - é o valor início do índice; •fim– é o valor máximo do índice; O número de posições do vector obedece à formula 1.7.1 , não sendo obrigatório preencher todas as posições com valores. tamanho =ﬁm−inicio +1 (1.7.1) Por exemplo, a instruções seguinte: DIM notas(1"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 55,
      "text": "e; O número de posições do vector obedece à formula 1.7.1 , não sendo obrigatório preencher todas as posições com valores. tamanho =ﬁm−inicio +1 (1.7.1) Por exemplo, a instruções seguinte: DIM notas(1 até 20) permite deﬁnir um vector unidimensional chamado notas com 20 posições nume- radas de 1 a 20. Na ﬁgura 1.18 é apresentada uma representação gráﬁca possível deste vector. ...11 12891715 Valor20 12345 Índice ... Figura 1.18: Vector unidimensional: notas A sintaxe utilizada no acesso a cada posição do vector é a seguinte forma: 41"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 56,
      "text": "ISEP/DEI - Jorge Santos nome-do-vector[índice] Como por exemplo: início # Declaração do vector ; DIMnotas (1 até 20); # Atribuir o valor 5 à posição 3 do vector ; notas[3] ←5; # Escrever no écran o valor da posição 1 do vector ; escrever notas[1] ; ﬁm Um vector pode ter as dimensões que se pretenderem2, fazendo-se a sua separação por vírgulas. Considere-se ainda um outro exemplo, um vector bidimensional que permite re- presentar uma imagem, as duas dimensões da matriz deﬁnem o tamanho da imagem (largura e altura) e o valor guardado em cada posição, a cor do pixel. Na ﬁgura 1.19 é apresentada uma representação gráﬁca possível para esta matriz. ... ... .........800 123... ...5 1281...6 45611 ...4 5839 6401 2 ... Figura 1.19: Vector bidimensional (matriz): imagem No seguinte exemplo é procedesse à declaração e consequente utilização deste vector bidimensional : início # Declaração da matriz ; DIM imagem(1 até 800, 1 até 640); # Atribuir o valor 5 à posição deﬁnida pela coluna 2 e linha 3 da matriz ; imagem[2][3] ←5; # Escrever no écran o valor da posição deﬁnida pela coluna 1 e linha 4 da matriz ; escrever notas[1][4] ; ﬁm 2Um vector também é designado matriz quando apresenta mais do "
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 56,
      "text": "da matriz ; imagem[2][3] ←5; # Escrever no écran o valor da posição deﬁnida pela coluna 1 e linha 4 da matriz ; escrever notas[1][4] ; ﬁm 2Um vector também é designado matriz quando apresenta mais do que uma dimensão. 42"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 57,
      "text": "Algoritmia e Programação Para além da utilização descrita nesta secção, os vectores são muito utilizados de forma combinada com outras estruturas de dados ( e.g., registos) por forma a deﬁnir estruturas mais complexas como por exemplo: ﬁlas, pilhas e árvores. Existem alguns aspectos a que é necessário prestar atenção quando se manipula vectores em programação, nomeadamente: •Os vectores têm dimensão ﬁxa. O número de elementos é indicado na declara- ção e não pode ser alterado durante a execução do programa. •Os vectores não se podem manipular como um todo, mas sim elemento a ele- mento. Isto signiﬁca que não se podem somar dois vectores directamente, mas sim os elementos de cada vector individualizados. •Muitas linguagens de programação não avisam (isto é não dá erro) se o limite da dimensão de um vector for excedido. Neste caso os resultados da execução do programa podem ser imprevisíveis. 1.7.1 Exercícios resolvidos 1.7.1.1 Funções manipulando vectores Faça um algoritmo que permita: a)Uma função que faça a leitura de 10 valores (inteiros), guardando-os num vec- tor; b)Uma função que retorne a diferença entre o maior e o menor valor do vector; c)Uma função que devolva o número de "
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 57,
      "text": "a)Uma função que faça a leitura de 10 valores (inteiros), guardando-os num vec- tor; b)Uma função que retorne a diferença entre o maior e o menor valor do vector; c)Uma função que devolva o número de valores pares e ímpares do vector; No procedimento leituraVector apresentada de seguida é realizada a leitura do vector. Note-se que tanto o próprio vector como a respectiva dimensão são passados para o procedimento como argumentos. Procedimento leituraVector( vector,dim) início parai←1;i≤dim;i←i+1fazer escrever \"Introduza o elemento\", i; lervector [i]; ﬁm-para ﬁm-procedimento A função contarPares apresentada de seguida contabiliza a quantidade de nú- meros existentes no vector. A função recebe próprio vector e a respectiva dimensão como parâmetros e retorna a quantidade de pares. 43"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 58,
      "text": "ISEP/DEI - Jorge Santos FunçãocontarPares( vector,dim) início soma←0; parai←1;i≤dim;i←i+1fazer sevector [i] % 2 então soma←soma +1; ﬁm-se ﬁm-para # Retornar resultado ; contarPares ←soma ; ﬁm-função A função maiorDiferenca apresentada de seguida, recebe o próprio vector e a respectiva dimensão como parâmetros e retorna a diferença entre os valores máximo e mínimo existentes no vector. FunçãomaiorDiferenca( vector,dim) início # Os valores máximo e mínimo são iniciados com o primeiro elemento do vector ; máximo ←vector [1]; mínimo ←vector [1]; parai←1;i≤dim;i←i+1fazer sevector [i] >máximo então máximo ←vector [i]; senão sevector [i] <mínimo então mínimo ←vector [i]; ﬁm-se ﬁm-se ﬁm-para # Retornar resultado ; maiorDiferenca ←máximo -mínimo ; ﬁm-função No seguinte extracto (algoritmo 1.20) é deﬁnido o vector e evocadas as funções e procedimento anteriormente deﬁnidos. 44"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 59,
      "text": "Algoritmia e Programação início DIM vector (1 até 10) ; # Evocar o procedimento de leitura do vector ; lerVector (vector ,10); # Calcular a diferença entre máximo e mínimo e apresentar resultado ; escrever \"Diferença máxima=\", maiorDiferenca (vector ,10); # Contar os números pares e ímpares ; nPares ←maiorDiferenca (vector ,10)escrever \"Números pares=\", nPares ; escrever \"Números ímpares=\", 10- nPares ; ﬁm Algoritmo 1.20 :Manipulação de Vectores (leitura, diferença entre máximo e mí- nimo e número de pares e ímpares) 1.7.2 Exercícios propostos 1.7.2.1 Determinar desvio padrão de uma série Escreva um programa modular que permita determinar o desvio padrão de um sé- rie de números de acordo com a formula 1.7.2 . Considere a deﬁnição de funções e procedimento para os diversos sub-problemas. desvioPadrao =√n ∑ i=1(xi−media ) n−1(1.7.2) 1.7.2.2 Prova de atletismo Faça a leitura das pontuações que 5 juízes de uma determinada prova atribuíram a um atleta (valores compreendidos entre 0 e 9 inclusive). Determine e apresente com formato adequado, os seguintes valores: •média obtida pelo atleta; •a pior e a melhor pontuação; •a percentagem de pontuações iguais ou superiores a 8 valores; •"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 59,
      "text": " inclusive). Determine e apresente com formato adequado, os seguintes valores: •média obtida pelo atleta; •a pior e a melhor pontuação; •a percentagem de pontuações iguais ou superiores a 8 valores; •supondo que a 1 ªnota foi atribuída pelo juiz n º1 e assim sucessivamente deter- mine os números dos juízes que atribuíram a melhor nota do atleta. 1.8 Ordenação e pesquisa de vectores A ordenação de vectores e a pesquisa de um dado elemento num vector, são opera- ções muito comuns em programação. Existem inúmeros métodos para ordenar vec- 45"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 60,
      "text": "ISEP/DEI - Jorge Santos tores e para pesquisar valores em vectores. Serão apresentados nesta secção apenas um exemplo de cada um. Também por uma questão de simpliﬁcação serão apenas utilizados vectores de números. No entanto estes métodos poder-se-iam adaptar fa- cilmente a vectores de outro tipo de dados. 1.8.1 Ordenação por selecção O algoritmo do método de ordenação por selecção consiste em seleccionar repetida- mente o menor elemento dos que ainda não foram tratados (daí o nome do método). Pretendendo-se uma ordenação por ordem crescente, primeiro selecciona-se o menor elemento do vector e faz-se a sua troca com o elemento na primeira posição do vector, em seguida selecciona-se o segundo menor elemento e faz-se a sua troca com o ele- mento na segunda posição do vector, repetindo-se o processo até que todo o vector ﬁque ordenado. De seguida é apresentado o algoritmo que implementa este método onde vector é o vector a ordenar e dimo número de elementos do vector. Este método é bastante eﬁciente para vectores de pequena e média dimensão. Procedimento ordenarVector (vector ,dim) início parai←1;i≤dim-1;i←i+1fazer paraj←i+1;j≤dim;j←j+1fazer sevector [j] <vector [i]então # Fazer a tro"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 60,
      "text": "te eﬁciente para vectores de pequena e média dimensão. Procedimento ordenarVector (vector ,dim) início parai←1;i≤dim-1;i←i+1fazer paraj←i+1;j≤dim;j←j+1fazer sevector [j] <vector [i]então # Fazer a troca dos dois elementos utilizando uma variável auxiliar ; temp←vector [j]; vector[j] ←vector [i]; vector[i] ←temp ; ﬁm-se ﬁm-para ﬁm-para ﬁm-procedimento No procedimento ordenarVector é necessário fazer a troca de valores entre duas variáveis. Este conceito é muito utilizado em programação e como tal merece uma análise atenta. Considere-se o problema o problema de trocar os conteúdos de duas garrafas cheias contendo líquidos ( e.g., água e sumo de laranja). Para proceder à trocas dos conteúdos é necessário considerar uma terceira garrafa vazia que servira como auxi- liar do processo, pois não é possível proceder à trocar directa. O problema de trocar os conteúdos de duas variáveis é similar e como tal o ex- tracto de código seguinte está errado, pois no ﬁnal ambas as variáveis AeBconterão o mesmo valor, 5. 46"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 61,
      "text": "Algoritmia e Programação início A←10; B←5; # Fazer a troca dos conteúdos - ERRADO!!! ; A←B; B←A; ﬁm No extracto seguinte é adoptado o procedimento adequado, conforme descrito anteriormente, a utilização de uma variável auxiliar. No ﬁnal, as variáveis AeB conterão os valores 5 e 10, respectivamente. início A←10; B←5; # Fazer a troca dos conteúdos - CORRECTO!!! ; temp←A; A←B; B←temp ; ﬁm 1.8.2 Pesquisa Sequencial A pesquisa sequencial é o método mais simples de implementar na procura de um elemento num vector. Este método consiste em pesquisar sequencial e exaustiva- mente um vector na procura de um dado valor. A pesquisa termina quando for en- contrado o valor a procurar ou quando tenha chegado ao ﬁm do vector. Este método funciona em vectores ordenados e/ou desordenados. No exemplo seguinte é considerado um vector notas com 100 elementos em que se pretende procurar um valor usando o método de pesquisa sequencial descrita. início DIM notas (1 até 100); escrever \"Introduza o valor a pesquisar=\"; lervalor ; # Evocar a função de pesquisa ; posicao ←pequisarValor (notas, 100, valor ); seposicao = -1 então escrever \"O valor desejado não existe no vector\"; ﬁm-se escrever \"O valor desejado"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 61,
      "text": "uisar=\"; lervalor ; # Evocar a função de pesquisa ; posicao ←pequisarValor (notas, 100, valor ); seposicao = -1 então escrever \"O valor desejado não existe no vector\"; ﬁm-se escrever \"O valor desejado existe na posição=\", posicao ; ﬁm Algoritmo 1.21 :Utilizar a pesquisa sequencial) A pesquisa propriamente dita é realizada pela seguinte função: 47"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 62,
      "text": "ISEP/DEI - Jorge Santos FunçãopequisarValor( vector,dim,valor) início encontrou ←falso; i←0; # Percorrer o vector até encontrar o elemento ou chegar ao ﬁm do vector ; enquanto encontrou =falso ei≤dimfazer sevalor =vector[i] então encontrou ←verdade; senão i←i+1; ﬁm-se ﬁm-enquanto seencontrou = verdade então # Caso encontre o valor retorna a posição ; pequisarValor ←i; senão # Caso não encontre o valor retorna -1 ; pequisarValor ←-1; ﬁm-se ﬁm-função 1.8.3 Exercicios resolvidos 1.8.3.1 Inverter um vector Considere o problema de inverter um vector para o qual é apresentada de seguida uma solução possível. Esta solução troca o primeiro elemento com o último, o se- gundo com o penúltimo, o terceiro com o antepenúltimo e assim sucessivamente até inverter a totalidade do vector. Note-se que o iterador do vector vai variar desde a primeira posição até metade da dimensão. Procedimento invertervector (vector ,dim) início parai←1;i≤dim/2;i←i+1fazer # Fazer a troca dos dois elementos ; temp←vector [i]; vector[i] ←vector [dim-i+1]; vector[dim-i+1] ←temp ; ﬁm-para ﬁm-procedimento 48"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 63,
      "text": "Algoritmia e Programação 1.8.4 Exercícios propostos 1.8.4.1 Junção ordenada de vectores Suponha que as notas dos alunos de duas turmas são lidas para dois vectores, um para cada turma. Considere que as notas foram inseridas em ambos os vectores or- denadamente, da menor para a maior. Escreva um programa que faça a junção ordenada dos dois vectores de notas num terceiro vector. 1.8.4.2 Método de ordenação por troca directa Neste método compara-se cada posição do vector com todas as outras sucessiva- mente e troca sempre que encontrar um valor menor numa posição à frente. Escreva um algoritmo que implemente este método. 1.8.4.3 Filtro gráﬁco Uma unidade industrial na área da metalomecânica utiliza sistemas de vídeo para o reconhecimento automático de componentes que passam num tapete rolante. Após a captura de cada imagem, esta tem que ser tratada com ﬁltros de software que permi- tem eliminar erros menores e suavizar a imagem. Construa um programa que implementa um ﬁltro que substitui cada pixel pela média dos valores das oito células que o rodeiam. Na imagem 1.20 está representada a imagem conforme foi capturada em que cada célula representa o tom de cinzento de um pixel . A B C D "
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 63,
      "text": "ada pixel pela média dos valores das oito células que o rodeiam. Na imagem 1.20 está representada a imagem conforme foi capturada em que cada célula representa o tom de cinzento de um pixel . A B C D E F 129 28 70 47 65 ... 2214 84 18 175 118 ... 3214 150 141 198 158 ... 4129 130 31 51 36 ... 5... ... ... ... ... ... Figura 1.20: Imagem vídeo - original Exemplo de cálculo das células: 49"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 64,
      "text": "ISEP/DEI - Jorge Santos célula B2=A1+A2+A3+B1+B3+C1+C2+C3=108 célula C2=B1+B2+B3+C1+C3+D1+D2+D3=114 Note-se que as células dos limites da imagem (assinalados a cinzento) não podem ser calculados pois não têm o número suﬁciente de vizinhos. Na imagem 1.21 são apresentados os valores da células B2eC2após serem calcu- ladas enquanto que as restantes células ainda não foram calculadas. A B C D E F 129 28 70 47 65 ... 2214 108 114 175 118 ... 3214 150 141 198 158 ... 4129 130 31 51 36 ... 5... ... ... ... ... ... Figura 1.21: Imagem vídeo - em tratamento 50"
    },
    {
      "source": "algoritmia e programacao.pdf",
      "page": 65,
      "text": "Bibliograﬁa [CCT, 2001 ]CCT. C Programming -Foundation Level, Training Manual & Exercises . Chel- tenham Computer Training, Gloucester/UK, 2001. [Kernighan e Ritchie, 1988 ]Brian W. Kernighan e Dennis M. Ritchie. The C Program- ming Language, Second Edition . Prentice Hall, Inc., 1988. [Mosich, 1988 ]D. Mosich. Advanced Turbo C Programmer’s Guide . John Wiley & Sons, 1988. [Sampaio e Sampaio, 1998 ]Isabel Sampaio e Alberto Sampaio. Fundamental da Pro- gramação em C . FCA- Editora Informática, 1998. 51"
    }
  ]
}